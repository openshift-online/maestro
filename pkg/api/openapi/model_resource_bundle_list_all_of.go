/*
maestro Service API

maestro Service API

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ResourceBundleListAllOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResourceBundleListAllOf{}

// ResourceBundleListAllOf struct for ResourceBundleListAllOf
type ResourceBundleListAllOf struct {
	Items []ResourceBundle `json:"items,omitempty"`
}

// NewResourceBundleListAllOf instantiates a new ResourceBundleListAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceBundleListAllOf() *ResourceBundleListAllOf {
	this := ResourceBundleListAllOf{}
	return &this
}

// NewResourceBundleListAllOfWithDefaults instantiates a new ResourceBundleListAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceBundleListAllOfWithDefaults() *ResourceBundleListAllOf {
	this := ResourceBundleListAllOf{}
	return &this
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *ResourceBundleListAllOf) GetItems() []ResourceBundle {
	if o == nil || IsNil(o.Items) {
		var ret []ResourceBundle
		return ret
	}
	return o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceBundleListAllOf) GetItemsOk() ([]ResourceBundle, bool) {
	if o == nil || IsNil(o.Items) {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *ResourceBundleListAllOf) HasItems() bool {
	if o != nil && !IsNil(o.Items) {
		return true
	}

	return false
}

// SetItems gets a reference to the given []ResourceBundle and assigns it to the Items field.
func (o *ResourceBundleListAllOf) SetItems(v []ResourceBundle) {
	o.Items = v
}

func (o ResourceBundleListAllOf) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResourceBundleListAllOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Items) {
		toSerialize["items"] = o.Items
	}
	return toSerialize, nil
}

type NullableResourceBundleListAllOf struct {
	value *ResourceBundleListAllOf
	isSet bool
}

func (v NullableResourceBundleListAllOf) Get() *ResourceBundleListAllOf {
	return v.value
}

func (v *NullableResourceBundleListAllOf) Set(val *ResourceBundleListAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceBundleListAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceBundleListAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceBundleListAllOf(val *ResourceBundleListAllOf) *NullableResourceBundleListAllOf {
	return &NullableResourceBundleListAllOf{value: val, isSet: true}
}

func (v NullableResourceBundleListAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceBundleListAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
