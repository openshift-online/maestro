/*
maestro Service API

maestro Service API

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ConsumerPatchRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConsumerPatchRequest{}

// ConsumerPatchRequest struct for ConsumerPatchRequest
type ConsumerPatchRequest struct {
	Labels *map[string]string `json:"labels,omitempty"`
}

// NewConsumerPatchRequest instantiates a new ConsumerPatchRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConsumerPatchRequest() *ConsumerPatchRequest {
	this := ConsumerPatchRequest{}
	return &this
}

// NewConsumerPatchRequestWithDefaults instantiates a new ConsumerPatchRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConsumerPatchRequestWithDefaults() *ConsumerPatchRequest {
	this := ConsumerPatchRequest{}
	return &this
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *ConsumerPatchRequest) GetLabels() map[string]string {
	if o == nil || IsNil(o.Labels) {
		var ret map[string]string
		return ret
	}
	return *o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsumerPatchRequest) GetLabelsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *ConsumerPatchRequest) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given map[string]string and assigns it to the Labels field.
func (o *ConsumerPatchRequest) SetLabels(v map[string]string) {
	o.Labels = &v
}

func (o ConsumerPatchRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConsumerPatchRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	return toSerialize, nil
}

type NullableConsumerPatchRequest struct {
	value *ConsumerPatchRequest
	isSet bool
}

func (v NullableConsumerPatchRequest) Get() *ConsumerPatchRequest {
	return v.value
}

func (v *NullableConsumerPatchRequest) Set(val *ConsumerPatchRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableConsumerPatchRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableConsumerPatchRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConsumerPatchRequest(val *ConsumerPatchRequest) *NullableConsumerPatchRequest {
	return &NullableConsumerPatchRequest{value: val, isSet: true}
}

func (v NullableConsumerPatchRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConsumerPatchRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
