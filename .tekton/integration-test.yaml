kind: Pipeline
apiVersion: tekton.dev/v1
metadata:
  name: maestro-integration-test
spec:
  params:
    - description: 'Snapshot of the application'
      name: SNAPSHOT
      default: '{"components": [{"name":"test-app", "containerImage": "quay.io/example/repo:latest"}]}'
      type: string
    - description: 'Namespace where the application is running'
      name: NAMESPACE
      default: "default"
      type: string
    - description: 'Expected output'
      name: EXPECTED_OUTPUT
      default: ""
      type: string
  tasks:
    - name: integration-test
      description: Set up DB, run integration tests, and read results
      params:
        - name: SNAPSHOT
          value: $(params.SNAPSHOT)
        - name: NAMESPACE
          value: $(params.NAMESPACE)
        - name: EXPECTED_OUTPUT
          value: $(params.EXPECTED_OUTPUT)
      taskSpec:
        params:
        - name: SNAPSHOT
        - name: NAMESPACE
        - name: EXPECTED_OUTPUT
        results:
        - name: TEST_OUTPUT
          description: Test output
        steps:
        - image: registry.redhat.io/openshift4/ose-cli:latest
          env:
          - name: SNAPSHOT
            value: $(params.SNAPSHOT)
          - name: NAMESPACE
            value: $(params.NAMESPACE)
          - name: EXPECTED_OUTPUT
            value: $(params.EXPECTED_OUTPUT)
          script: |
            # Install Deps
            dnf -y install jq git make

            # Install golang with a given version
            export GOVERSION=1.22.4
            curl -O -J https://dl.google.com/go/go$GOVERSION.linux-amd64.tar.gz
            rm -rf /usr/local/go && tar -C /usr/local -xzf go$GOVERSION.linux-amd64.tar.gz

            # Runtime Env Config
            export PATH=$PATH:/usr/local/bin:/usr/local/go/bin:$HOME/go/bin
            export GOPATH=$HOME/go

            go install gotest.tools/gotestsum@latest  

            # Set Vars
            TARGET_COMPONENT_NAME="maestro"
            REPO_URL=$(echo $SNAPSHOT | jq -r '.components[] | select(.name == "maestro").source.git.url')
            REPO_COMMIT=$(echo $SNAPSHOT | jq -r '.components[] | select(.name == "maestro").source.git.revision')
            test_output_file=${PWD}/test_output.json

            # Log Vars for Tracibility
            echo "REPO_URL: $REPO_URL"
            echo "TARGET_COMPONENT_NAME: $TARGET_COMPONENT_NAME"
            echo "REPO_COMMIT: $REPO_COMMIT"
            echo "SNAPSHOT: $(echo $SNAPSHOT | jq)"

            # Clone Repo and checkout at snapshot commit
            git clone $REPO_URL $TARGET_COMPONENT_NAME
            cd $TARGET_COMPONENT_NAME
            git config --local --add remote.origin.fetch '+refs/pull/*/head:refs/remotes/origin/pr/*'
            git fetch origin
            git checkout $REPO_COMMIT

            # Wait for the DB sidecar to be ready
            echo "[INFO] Waiting for database to be ready for connection"
            timeout 5m bash -c 'until echo > /dev/tcp/localhost/5432; do sleep 2s; done'

            # Generate mqtt config file
            echo '{"brokerHost":"localhost:1883","username":"","password":"","topics":{"sourceEvents":"sources/maestro/consumers/+/sourceevents","agentEvents":"sources/maestro/consumers/+/agentevents"}}' > secrets/mqtt.config

            # Generate db.password
            echo 'foobar-bizz-buzz' > secrets/db.password

            # Run integration tests with JSON output
            make test-integration integration_test_json_output="$test_output_file"

            # Read, process, and write output in accepted format
            # Formatting docs: https://redhat-appstudio.github.io/book/ADR/0030-tekton-results-naming-convention.html#test_output-schema-validation
            FAILURES=$(cat $test_output_file | jq 'select(.Action == "fail")' | jq -r --slurp 'length')
            SUCCESSES=$(cat $test_output_file | jq 'select(.Action == "pass")' | jq -r --slurp 'length')
            # Hard-code warnings
            WARNINGS=0
            RESULT="$(if [[ $FAILURES == 0 ]]; then echo "SUCCESS"; else echo "FAILURE"; fi)"
            # TODO: Switch to rfc-3339 when RHTAP changes the schema
            # TIMESTAMP="$(date --rfc-3339=seconds)"
            TIMESTAMP="$(date +%s)"
            TEST_OUTPUT=$(jq -r --null-input \
              --arg failures $FAILURES \
              --arg successes $SUCCESSES \
              --arg warnings $WARNINGS \
              --arg result "$RESULT" \
              --arg timestamp "$TIMESTAMP" \
              '{"result": $result, "successes": $successes|tonumber, "failures": $failures|tonumber, "warnings": $warnings|tonumber, "timestamp": $timestamp}' \
            )
            echo -n "$TEST_OUTPUT" | tee $(results.TEST_OUTPUT.path)
        sidecars:
          - image: docker.io/library/postgres:16.4
            name: database-test
            env:
            - name: PGDATA
              value: /work/data
            - name: POSTGRES_DB
              value: maestro
            - name: POSTGRES_PASSWORD
              value: foobar-bizz-buzz
            - name: POSTGRES_USER
              value: maestro
            volumeMounts:
              - mountPath: /work
                name: pgdata
          - image: docker.io/library/eclipse-mosquitto:2.0.18
            name: mqtt-test
            volumeMounts:
              - mountPath: /mosquitto/data
                name: mqttdata
        volumes:
          - name: pgdata
            emptyDir: {}
          - name: mqttdata
            emptyDir: {}
