// Code generated for package openapi by go-bindata DO NOT EDIT. (@generated)
// sources:
// ../../openapi/openapi.yaml
package openapi

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _openapiYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x5f\x8f\xdb\xb8\x11\x7f\xdf\x4f\x31\x40\x5b\x38\x39\xec\xda\x4e\xef\x0a\xb4\x46\x72\x40\x72\xbd\x14\x77\xc8\x25\x69\x36\x69\x1f\x8a\xc2\x4b\x93\x23\x8b\x89\x44\x2a\x24\xb5\x59\xa7\xed\x77\x2f\x48\xea\xbf\x25\xad\xec\xf3\xc6\xca\x9e\xf3\x92\x15\x35\x33\x9c\x21\x67\x7e\x1c\x92\x23\xcb\x04\x05\x49\xf8\x02\xbe\x9d\xce\xa7\xf3\x33\x2e\x02\xb9\x38\x03\x30\xdc\x44\xb8\x80\x98\xa0\x36\x4a\xc2\x25\xaa\x6b\x4e\x11\x9e\xbe\xfe\xe9\x0c\x80\xa1\xa6\x8a\x27\x86\x4b\xd1\x45\x72\x8d\x4a\xbb\xd7\xf3\xe9\x7c\xfa\xe8\x4c\xa3\xb2\x2d\x56\xf2\x05\xa4\x2a\x5a\x40\x68\x4c\xb2\x98\xcd\x22\x49\x49\x14\x4a\x6d\x16\x7f\x9e\xcf\xe7\x67\x00\x0d\xe9\x34\x55\x0a\x85\x01\x26\x63\xc2\x45\x9d\x5d\x2f\x66\x33\x92\xf0\xa9\x35\x41\x87\x3c\x30\x53\x2a\xe3\x6d\x11\xbf\x10\x2e\xe0\x41\xa2\x24\x4b\xa9\x6d\x79\x08\x5e\x9b\x76\x61\xda\x90\x35\xde\x26\xf2\xd2\x90\x35\x17\xeb\x5c\x50\x42\x4c\xe8\x6c\xb3\x12\x66\xd9\x80\xcc\xae\x1f\xcd\x14\x6a\x99\x2a\x8a\xee\x25\xc0\x1a\x8d\xff\x03\x40\xa7\x71\x4c\xd4\x66\x01\x6f\xd0\xa4\x4a\x68\x20\x10\x71\x6d\x40\x06\x50\x30\xe5\xa4\x48\x53\xc5\xcd\x26\x67\xb5\x6a\x3f\x43\xa2\x50\x2d\xe0\x5f\xff\xce\x1a\x15\xea\x44\x0a\x9d\xf7\x64\xff\x4d\xfe\x38\x9f\x4f\xca\xc7\x86\x09\x4f\xe1\xe7\xcb\x57\x2f\x81\x28\x45\x36\xd5\x5e\x41\xae\xde\x23\x35\xba\xc2\x47\xa5\x30\x28\x4c\x55\x14\x00\x49\x92\x88\x53\x62\x85\xcd\xde\x6b\x29\xea\x6f\x01\x34\x0d\x31\x26\xcd\x56\x80\xdf\x2b\x0c\x16\x30\xf9\xdd\x8c\xca\x38\x91\x02\x85\xd1\x33\x4f\xab\x67\x6f\x32\x1d\x5e\x70\x6d\x26\xa5\x1d\xdf\xcd\x1f\xf5\xd8\x91\x9a\x10\x8c\xfc\x80\x02\xb8\x06\x2e\xae\x49\xc4\xd9\x31\x94\xff\x51\x29\xa9\x6a\x5a\x7f\xdb\xad\xf5\x3b\x41\x52\x13\x4a\xc5\x3f\x23\x03\x23\x21\x41\x15\x48\x15\x83\x4c\x50\x39\xb5\xc6\x60\xc1\x9f\xfa\xfc\xe7\x9d\xc0\x9b\x04\xa9\x41\x06\x68\xf9\x40\x52\x17\xab\xc7\x1f\xfb\x84\x28\x12\xa3\xc9\xe0\x06\x5c\xbc\xb4\x31\x97\x74\xb3\x84\xac\x71\x32\x94\x58\xf3\xcf\x3b\x10\x23\x51\x34\x1c\x4c\x2e\x15\x43\xf5\x6c\x33\x98\x3e\xe0\x18\x31\xed\xc9\x13\x8b\xa2\x4d\x78\xf9\x41\x21\x31\x08\x04\x04\x7e\x2a\x62\x7c\x37\x60\xf9\x98\xa2\x36\xcf\x24\xab\xd0\xd5\x3c\x21\x8f\x5a\x60\xc4\x90\x82\xc4\xf2\x71\x85\x6c\x01\x46\xa5\x78\xd6\xe3\x12\xfd\x0e\xd1\xee\x0e\x43\x50\x64\xd2\x0b\x8d\x3d\x90\xe2\xc7\xec\x28\x8e\xdc\xd4\xdd\xe1\x48\x4f\x14\xfe\xc3\xa2\x9d\x53\xc1\x47\xa1\x1e\x4f\x18\x9e\x80\xfb\x88\x16\xfc\xa5\xdb\x82\x22\x5c\x49\xa4\x90\xb0\x0d\xe0\x0d\xd7\xc7\x59\xef\x77\x5a\x70\x9e\x0a\x48\xbb\xd6\x1c\xa0\x36\x64\x6d\x46\x66\x42\x6c\xc2\xdc\x71\x4c\xea\x4c\x05\x67\xff\xe1\xec\x7f\xdd\xf9\xe0\xdf\xd0\x00\x11\x65\x3a\xb6\xda\x40\x11\x16\x77\x93\x09\x16\x0e\x11\xc8\x54\xb0\x5a\x87\x5f\x74\xe8\x5a\xb1\xef\x04\x20\xc7\xb1\xe0\xbb\x6e\x0b\x5e\xca\xd2\x3b\x3f\x71\x13\x82\x4e\x90\xf2\x80\x23\x03\xce\xbe\x16\x34\x19\x6b\xfa\x9a\x10\x43\xc3\x2d\x50\x78\x97\x30\x97\xc5\x89\x3b\x4a\xe1\xbc\x7c\x56\xce\xeb\xc8\x52\xb9\xd7\x76\x54\xde\x78\x33\xfa\xd3\xba\x21\x38\x97\x66\xd6\xea\x94\x52\xd4\x3a\x48\xa3\x68\x33\x1a\xc0\x3b\x25\x7b\x5f\x58\xeb\x13\x56\x8f\xc2\x88\x7b\x98\xb1\x6e\xad\x31\x0e\x78\x6c\x96\x3a\x8a\x0c\xd5\x6a\x1b\xa1\xc1\xad\xd5\xe6\xaf\xae\x19\xc8\x9e\x8b\x4d\x1b\x2c\xf7\xb8\x68\x79\x7c\xe0\xba\xed\x80\xe5\x13\x32\x7e\x79\xad\x4f\xc8\x38\x02\x23\x76\x43\x18\x17\x43\x23\x42\x98\xe6\x59\xec\xad\x07\x9a\x9c\xf5\x6d\x9e\x2f\x56\xa9\x60\xd1\x7e\xd7\x29\x90\xf1\xde\xe9\x5e\xba\xf3\x56\xc5\x77\x3e\x86\xcb\x95\x67\x4e\x93\xd3\x15\xcb\x28\x20\xea\xab\xdc\xa3\xfe\x56\xaf\x58\x6e\x43\xa5\x5d\x4f\xf6\x3c\x24\x7c\xc1\x03\xbe\xac\xc7\x91\x9c\xf3\x79\x20\x3a\x81\xd0\x08\x2c\x18\x98\x27\x65\xfe\x73\x7f\xd2\xa5\xaf\x19\x50\xdb\x33\x25\x2a\x85\x4e\xe3\x42\xce\xb0\x14\xa9\x60\xfa\xa2\xb9\x51\xde\xeb\x31\x93\xa2\x1f\x32\x1d\x4e\xe9\xd0\x28\x90\xe8\xde\x44\xef\x8e\x09\xd1\x8e\x29\xd1\xce\x49\xd1\xee\x69\xd1\xc1\x6b\x4f\xf2\x68\xdf\x0d\x62\x6e\xbb\xb8\xc8\xe3\x77\x2c\x17\x16\xb9\x3e\x5f\x63\xed\x49\x53\xf7\xd3\xa1\xdb\x09\xc2\xf7\xb1\xa0\xe7\x24\xbf\x08\xd7\xaf\xec\x24\x7f\x78\xed\x49\x03\xe6\x8e\x63\x52\x67\x52\x38\x6c\x87\x5a\x24\x66\x77\xbf\x35\x2d\x1c\xe2\xc8\x7b\xd2\x56\xec\x3b\x01\xc8\x18\x77\xa3\x85\x77\x9e\xb6\xa1\x07\x3f\xac\xef\xaf\x3d\xb9\x9b\x14\x2e\xaf\x3d\xa1\x23\x4d\xe5\x0e\x52\x7b\x52\xe0\xdc\x58\x6a\x4f\x4e\xc9\xde\x18\xb4\x3e\x61\xf5\x28\x8c\xb8\x87\x19\x6b\x77\xed\xc9\x28\x32\xd4\xdb\x6b\x4f\xf6\x5b\x6c\x76\xac\x3d\x29\x8f\x0f\x4e\xb5\x27\x27\x64\x3c\xac\x05\xf7\x00\x19\xf7\xac\x3d\x19\x09\xc2\xec\x79\xa7\x52\xbe\xb1\x6c\x39\xee\x5c\x5a\xf9\x39\xb0\x64\xc0\x93\x49\x35\x9b\x04\xfd\x37\xc4\x67\x15\xbd\x71\x01\x2b\x47\x96\x35\xfa\x87\xe7\x52\xc5\xc4\x2c\xe0\xe7\x7f\xbe\x3d\xcb\x0d\xcc\x84\xbe\x72\xb7\x20\x6f\x30\x40\x85\x82\x62\x5d\xba\xbf\x22\xc9\x9a\x12\x65\x5d\xdd\xf0\x2a\xce\x71\x56\x1d\x27\xcf\xa4\x8d\xe2\x62\x5d\x34\x7f\xe0\xe2\x76\xa2\xd0\x0e\x50\x1f\xd1\x0b\x5e\x9e\xf4\x0e\xd4\x6d\x50\xc7\x09\x59\xe3\x36\x11\x17\x06\xd7\x15\x4f\xd2\xfc\xf3\x00\x2a\x23\x0d\x89\x6e\x23\x2b\x76\x16\x95\x15\xc5\x6a\x5a\x79\xb4\x3a\x55\x1e\x6d\xe7\x95\x47\xd7\x4b\xe5\x99\x1b\x8c\x7d\xd8\x3a\x27\xcc\xe5\x92\x28\x7a\x15\xf4\x7b\x60\xee\xbc\x0d\x17\x28\x4b\x14\x5a\x06\xba\x7d\xa8\x6d\xa4\x31\xac\x87\x4c\xeb\x70\x5b\xfb\xc9\x56\xcc\x75\x90\x16\xc8\xba\xac\xbb\x59\x0b\x83\x33\xbd\xea\x23\x3b\x98\x5f\xbd\x84\xdb\xc9\x66\x37\xf2\x6d\x8a\xb9\xbb\xc6\x5a\x7b\x0b\xe9\x60\x40\xc9\x0b\x17\x8e\x34\xb3\x82\xc4\xc3\x66\x36\xc7\xdf\xe5\x60\x8e\xfc\xd7\x1a\x5a\x68\x9b\xb1\x05\xfe\xbc\x13\xd9\x92\x98\x41\xb2\x01\x82\x0c\xf4\xec\xce\xf7\xc2\xf0\xb8\x5a\x94\x98\xed\x87\x0f\x23\x2c\xcb\xe2\x0e\x23\x2c\x26\x82\x07\xa8\x5b\x45\x35\xe6\x2b\xef\x79\x29\xfd\xda\x38\x84\xc3\x1b\xbe\xd4\x46\x11\x83\xeb\xcd\x20\x1e\x6d\x88\x49\x5b\x1d\xbd\x42\x5a\xfd\x11\x85\xfb\x12\x84\xf5\x2f\x65\xda\xbe\x0a\xda\x71\x49\x6a\x71\xf8\x76\x77\x6f\xf3\x82\xd6\x41\xe9\xf4\x80\x56\xea\x9e\xd9\xef\x9c\xd0\xb2\x70\xf3\xbe\x4d\x6b\xb5\x12\xac\xde\x76\x82\xda\xdf\x12\xd4\xfe\x1a\x3f\x3b\x18\x30\xe7\xca\x2c\xa9\x14\x01\x5f\xdf\x81\x4e\x83\x60\x3c\x3f\x9a\x68\x8d\x80\x3d\x63\xa0\x33\x0a\xba\xe2\xa0\x2d\x12\x7a\xe6\x38\x22\x2b\x8c\x86\x8e\x82\x33\x8a\x31\x6e\x27\x86\x44\xaf\x3b\xfa\xef\xed\xaf\x2b\x3c\x7a\x58\xfa\x1d\xb1\x3b\x48\xf6\x10\x59\xad\x2d\xdb\x6b\x16\xeb\x45\x69\x3b\x4f\x5d\x8f\x4b\x6e\xfb\x6f\x07\xf9\x2e\x97\x08\x6d\x17\x26\x3b\x2e\xcb\xdb\x0e\xd4\x61\xf3\xed\x8e\xd3\x98\xae\xe6\x61\x40\xb9\x91\x71\x1e\x5e\x5e\x3b\x73\xb1\x80\x84\x98\x30\x7b\xac\x1d\x79\xbc\x0d\x11\x38\xf3\xdf\x75\x50\xa9\x72\x96\xd6\x3b\xaa\xe6\xe1\xc5\x96\xfb\x54\x37\xbc\x5e\x87\xca\x76\xd3\x6a\xf1\x31\x45\xb5\x69\x53\xe3\x35\x59\x23\x88\x34\x5e\xa1\x2a\x75\xf1\xc5\x9c\x9f\x42\x14\xb5\x06\xbc\xa1\x88\x4c\x57\x4e\x98\x6c\x2f\xd5\xad\x6c\xbb\xa2\xcd\xb5\x88\x61\x40\xd2\xc8\x2c\xe0\x51\x99\x1a\x71\xc1\xe3\x34\x2e\x9b\xca\x71\x08\x48\xa4\xbd\xfc\xea\x86\xdd\x5b\x59\xe9\xba\xd7\xca\x5f\xc8\x8d\x15\xbf\x65\xa8\x06\x23\x41\xb9\x1a\xd6\x3d\x2d\xc8\x7e\x67\xae\x66\xc3\xbc\xcf\x06\x57\x4b\xd7\xb0\xc2\xb5\x75\xd8\xd1\x26\xa4\x61\xdd\x7f\x2f\x0a\x1d\x2e\xb3\xa9\xd1\xae\x80\xc4\x0b\x06\xaa\xb8\x41\xc5\xc9\xd4\x39\x9d\xde\x08\x43\x6e\xec\x18\x98\x90\xeb\xd2\x99\x81\x97\xe7\x84\x9a\xc7\x3c\x22\xca\x8e\x8e\x69\xb0\x20\x2c\x3f\x85\xa8\x70\x09\x34\x22\xa9\x46\xdb\x4a\x04\x5c\xfe\xfd\x85\x5b\x8b\x30\x46\x61\xce\xcb\xdc\x54\xe7\xc5\x2c\xd6\x54\x9d\x8b\x78\xaf\xa5\x00\x62\x8c\xe2\xab\xd4\xa0\x86\x19\x50\x19\xa5\xb1\xa8\x53\x11\x4a\x65\x2a\xcc\x14\x0a\x71\xcf\xa5\x02\xbc\x21\x71\x12\xe1\x39\x70\x01\xae\xd0\x30\x9b\x43\xc5\xf1\x1a\x2d\x28\x56\x79\xb5\x3f\x13\x25\x90\x6a\x54\x56\x78\x69\xa2\x21\xca\x9d\x30\x3a\x82\xab\x78\x73\xb5\x38\x2b\x5e\x5e\x5d\x5d\xe9\x8f\x51\xc5\x0a\xcf\x0c\x11\xff\x80\x30\x89\x37\x7f\x98\x54\x49\x4b\xbe\xb7\xdb\x83\x0e\x94\x08\x20\x91\x96\xb0\x42\x7f\x4a\x89\x0c\xa4\x0d\xac\xa8\xf6\x33\x09\xd3\x3d\x8c\xd4\xe9\xaa\x70\x03\xed\x01\x0f\x5d\xe1\xcb\x55\x20\xe5\x93\x15\x51\x57\xe7\x9d\x36\x55\x79\x97\x1e\x2b\xa7\x1f\x70\x03\x4f\x60\x12\x48\x39\x01\x22\x58\x2b\xcd\x35\x89\x52\xb4\x54\x2b\xa2\x3a\x46\xe1\x27\x3f\x7d\x55\xcf\x12\x13\x63\x41\xfa\x9a\x33\x64\xe7\x20\x15\x70\x4f\xe3\xa5\x71\x0d\x18\x27\x66\x73\x6e\xdb\xca\x23\xf7\xad\xb9\x34\x21\x31\xae\xc5\x4e\x08\x84\x44\x43\x82\x2a\xe6\xda\x26\xc1\x76\x80\x34\x22\x7c\xe2\x51\x04\xab\x72\x9e\x7d\x74\x23\x9b\x0e\xc5\xd2\xac\x78\xb5\x1e\xa2\x59\xe3\x1d\xc4\xa8\x9f\xdd\xd5\xe6\xe0\x51\x9a\x0b\x1e\x16\xa8\xab\xd4\xec\x1c\xac\x8d\x30\xdd\xd1\x81\x8b\x59\x75\xaf\xbd\xdf\xe6\x81\x36\x20\x14\x89\xa6\xed\xde\xf7\x4a\xed\xd7\x27\x2c\x89\x60\x4b\x08\xb8\xd2\x06\x86\x2b\x71\xee\x39\x5e\xf6\xea\x74\xa8\x88\x10\x12\xf0\x26\x89\x38\xe5\xc6\x9b\xe0\x01\xcc\x79\x7c\x0e\x2e\x83\x1d\xdd\xd7\x5c\xd7\xfd\xdc\xb7\x1d\xc6\xcd\x53\xa7\x8f\x76\xf7\xaf\x71\x4c\x2e\x34\x5a\xfb\x2d\xe6\xe5\xdf\x8a\xf8\xde\xec\x2c\xad\x70\x2b\x50\x01\x9e\xfb\xd7\x32\xb0\x40\x74\xa1\x8d\x4a\xa9\x49\x95\x95\x28\x5c\xe2\xe4\x32\x4f\x6d\x67\x03\x1e\x17\x6f\xbf\x9f\x3e\x76\x62\xbf\x07\x21\x8d\x3b\x68\x2e\x05\x3e\xd6\x26\x27\xfa\x06\x62\x24\x42\x3b\xaf\x70\xf4\x4e\x20\x14\x62\x0a\x9e\x1f\xbd\x23\x2f\xbc\x57\x13\x1a\xc2\x65\x05\x15\xad\xee\x6b\x34\xc0\xd9\xb9\xbb\xee\x38\x87\x24\x22\xe2\x01\x67\x4e\xc7\x0f\x5c\xb0\x87\xee\x2f\x0f\x9e\xf0\xa0\xe8\x4e\x3f\xac\x79\x57\xf1\xb7\xa4\xb1\x13\x58\x87\xf6\x8b\x8b\xd2\x75\x3c\xfb\x13\xce\xce\x5d\x87\xb6\xbf\x29\x67\xfe\x7f\xdb\xe1\x79\x06\xd4\xdf\xd4\xb9\xd0\xd0\xf0\x85\x7b\xf3\xa4\x56\xfd\x54\x76\xde\xeb\x30\xff\x0f\x00\x00\xff\xff\x5d\x61\x06\x2e\xdb\x57\x00\x00")

func openapiYamlBytes() ([]byte, error) {
	return bindataRead(
		_openapiYaml,
		"openapi.yaml",
	)
}

func openapiYaml() (*asset, error) {
	bytes, err := openapiYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "openapi.yaml", size: 22491, mode: os.FileMode(493), modTime: time.Unix(1718089229, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"openapi.yaml": openapiYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"openapi.yaml": &bintree{openapiYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
