// Code generated for package openapi by go-bindata DO NOT EDIT. (@generated)
// sources:
// ../../openapi/openapi.yaml
package openapi

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _openapiYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x5f\x8f\xdb\xb8\x11\x7f\xf7\xa7\x18\xa0\x2d\x7c\x39\x78\x6d\xa7\x77\x05\x5a\x23\x39\x20\xb9\x5e\x8a\x3b\xe4\x92\x34\x9b\xb4\x0f\x45\xb1\x4b\x93\x23\x8b\xb7\x12\xa9\x90\xd4\xee\x3a\x6d\xbf\x7b\x41\x52\xff\x2d\x69\x65\x63\x37\x56\x16\xbe\x97\x5b\x51\xc3\xe1\x0c\xf9\x9b\x9f\x86\x1c\x3a\x32\x41\x41\x12\xbe\x82\xef\xe6\xcb\xf9\x72\xc2\x45\x20\x57\x13\x00\xc3\x4d\x84\x2b\x88\x09\x6a\xa3\x24\x9c\xa3\xba\xe6\x14\xe1\xc5\xbb\x9f\x27\x00\x0c\x35\x55\x3c\x31\x5c\x8a\x2e\x91\x6b\x54\xda\xbd\x5e\xce\x97\xf3\xa7\x13\x8d\xca\xb6\x58\xcd\x67\x90\xaa\x68\x05\xa1\x31\xc9\x6a\xb1\x88\x24\x25\x51\x28\xb5\x59\xfd\x79\xb9\x5c\x4e\x00\x1a\xda\x69\xaa\x14\x0a\x03\x4c\xc6\x84\x8b\x7a\x77\xbd\x5a\x2c\x48\xc2\xe7\xd6\x05\x1d\xf2\xc0\xcc\xa9\x8c\x77\x55\xfc\x4a\xb8\x80\x6f\x12\x25\x59\x4a\x6d\xcb\x13\xf0\xd6\xb4\x2b\xd3\x86\x6c\xf0\x2e\x95\xe7\x86\x6c\xb8\xd8\xe4\x8a\x12\x62\x42\xe7\x9b\xd5\xb0\xc8\x26\x64\x71\xfd\x74\xa1\x50\xcb\x54\x51\x74\x2f\x01\x36\x68\xfc\x1f\x00\x3a\x8d\x63\xa2\xb6\x2b\x78\x8f\x26\x55\x42\x03\x81\x88\x6b\x03\x32\x80\xa2\x53\x2e\x8a\x34\x55\xdc\x6c\xf3\xae\xd6\xec\x97\x48\x14\xaa\x15\xfc\xeb\xdf\x59\xa3\x42\x9d\x48\xa1\xf3\x91\xec\x7f\xd3\x3f\x2e\x97\xd3\xf2\xb1\xe1\xc2\x0b\xf8\xe5\xfc\xed\x1b\x20\x4a\x91\x6d\x75\x54\x90\xeb\xdf\x90\x1a\x5d\xe9\x47\xa5\x30\x28\x4c\x55\x15\x00\x49\x92\x88\x53\x62\x95\x2d\x7e\xd3\x52\xd4\xdf\x02\x68\x1a\x62\x4c\x9a\xad\x00\xbf\x57\x18\xac\x60\xfa\xbb\x05\x95\x71\x22\x05\x0a\xa3\x17\x5e\x56\x2f\xde\x67\x36\xbc\xe6\xda\x4c\x4b\x3f\xbe\x5f\x3e\xed\xf1\x23\x35\x21\x18\x79\x85\x02\xb8\x06\x2e\xae\x49\xc4\xd9\x31\x8c\xff\x49\x29\xa9\x6a\x56\x7f\xd7\x6d\xf5\x47\x41\x52\x13\x4a\xc5\x3f\x23\x03\x23\x21\x41\x15\x48\x15\x83\x4c\x50\x39\xb3\xc6\xe0\xc1\x9f\xfa\xf0\xf3\x51\xe0\x6d\x82\xd4\x20\x03\xb4\xfd\x40\x52\x17\xab\xc7\x9f\xfb\x84\x28\x12\xa3\xc9\xe8\x06\x5c\xbc\xb4\x75\x2e\xe5\x16\x09\xd9\xe0\x74\xa8\xb0\xe6\x9f\xf7\x10\x46\xa2\x68\x38\x58\x5c\x2a\x86\xea\xe5\x76\xb0\x7c\xc0\x31\x62\xda\x8b\x27\x96\x45\x9b\xf4\xf2\xa3\x42\x62\x10\x08\x08\xbc\x29\x62\x7c\x3f\x62\xf9\x94\xa2\x36\x2f\x25\xab\xc8\xd5\x90\x90\x47\x2d\x30\x62\x48\x21\x62\xfb\x71\x85\x6c\x05\x46\xa5\x38\xe9\x81\x44\x3f\x20\xda\xe1\x30\x84\x45\xa6\xbd\xd4\xd8\x43\x29\x7e\xce\x8e\x02\xe4\xa6\xed\x8e\x47\x7a\xa2\xf0\x1f\x96\xed\x9c\x09\x3e\x0a\xf5\x78\xc2\xf0\x44\xdc\x47\xf4\xe0\x2f\xdd\x1e\x14\xe1\x4a\x22\x85\x84\x6d\x01\x6f\xb9\x3e\xce\xf7\x7e\xaf\x0f\xce\x0b\x01\x69\xd7\x37\x07\xa8\x0d\x59\x9b\x91\x99\x10\x9b\x34\x77\x1c\x97\x3a\x53\xc1\xc5\x7f\x38\xfb\x5f\x77\x3e\xf8\x37\x34\x40\x44\x99\x8e\xad\xb7\x50\x84\xc5\xc3\x64\x82\x05\x20\x02\x99\x0a\x56\x1b\xf0\x8b\x4e\x5d\x2b\xf7\x9d\x08\xe4\x38\x1e\x7c\xdf\xed\xc1\x1b\x59\xa2\xf3\x86\x9b\x10\x74\x82\x94\x07\x1c\x19\x70\xf6\xb5\xb0\xc9\x58\xd3\xd7\x84\x18\x1a\xee\x90\xc2\xc7\x84\xb9\x2c\x4e\x3c\x50\x0a\xe7\xf5\xb3\x72\x5d\x47\x96\xca\xbd\xb3\xb3\xf2\xde\xbb\xd1\x9f\xd6\x0d\xe1\xb9\x34\xf3\x56\xa7\x94\xa2\xd6\x41\x1a\x45\xdb\xd1\x10\xde\x29\xd9\xfb\xc2\x56\x9f\xb8\x7a\x14\x4e\x3c\xc2\x8c\x75\xe7\x1b\xe3\x88\xc7\x66\xa9\xa3\xc8\x50\xad\xb5\x11\x1a\xdc\xf9\xda\xfc\xd5\x35\x03\x39\xf0\x63\xd3\x46\xcb\x3d\x10\x2d\x8f\x0f\xdc\xb0\x1d\xb4\x7c\x62\xc6\x2f\x6f\xf5\x89\x19\x47\xe0\xc4\x7e\x0c\xe3\x62\x68\x44\x0c\xd3\x3c\x8b\xbd\xf3\x40\x93\xb3\xb6\xcd\x33\x95\x42\xa7\x71\xa1\x65\x58\x1d\xa5\xe8\xf4\xa0\xbb\xe7\x66\x1d\x25\x1f\xf5\x98\x75\x94\x1f\x33\x1b\x4e\x75\x94\x51\xf0\xd0\x57\xb9\x11\x6d\xab\xa3\xec\x59\x49\xd9\xb3\x96\xb2\x77\x35\x65\xff\x7a\xca\xbd\x57\x54\xf2\x68\xbf\xdf\xed\x78\x1e\xbf\x63\xd9\x86\xe7\xf6\x7c\x8d\x15\x95\xa6\xed\xa7\x54\xf2\x44\xe1\x87\x78\xd0\xb3\x3f\x2d\xc2\xf5\x2b\xdb\x9f\x0e\xaf\xa8\x34\x68\xee\x38\x2e\x75\x26\x85\xc3\x2a\x2a\x45\x62\xf6\xf0\x15\x95\x02\x10\x47\xae\xa8\xb4\x72\xdf\x89\x40\xc6\xb8\x17\x2d\xd0\xf9\x78\xf6\xa2\x23\xf9\x6e\xde\x55\x51\x79\x98\x14\x2e\xaf\xa8\xd0\x91\xa6\x72\xf7\x52\x51\x29\x78\x6e\x2c\x15\x95\x53\xb2\x37\x06\xab\x4f\x5c\x3d\x0a\x27\x1e\x61\xc6\xda\x5d\x51\x19\x45\x86\x7a\x77\x45\xe5\xb0\x8f\xcd\x9e\x15\x95\xf2\xf8\xe0\x54\x51\x39\x31\xe3\xfd\x7a\xf0\x08\x98\xf1\xc0\x8a\xca\x48\x18\xe6\x80\xdb\xed\x9c\x4d\x27\xe5\x1b\xdb\x2d\xe7\x9d\x73\xab\x3f\x27\x96\x8c\x78\x32\xad\x66\x9b\xa0\xff\x65\xcc\xa4\x62\x37\xae\x60\xed\xc4\xb2\x46\xff\xf0\x4a\xaa\x98\x98\x15\xfc\xf2\xcf\x0f\x93\xdc\xc1\x4c\xe9\x5b\x57\x05\x79\x8f\x01\x2a\x14\x14\xeb\xda\x7d\x89\x24\x6b\x4a\x94\x85\xba\xe1\x55\x9e\xe3\xac\x3a\x4f\xbe\x93\x36\x8a\x8b\x4d\xd1\x7c\xc5\xc5\xdd\x42\xa1\x9d\xa0\x3e\xa1\xd7\xbc\x3c\xe9\x1d\x68\xdb\xa0\x81\x13\xb2\xc1\x5d\x21\x2e\x0c\x6e\x2a\x48\xd2\xfc\xf3\x00\x29\x23\x0d\x89\xee\x12\x2b\x76\x16\x95\x2f\x8a\xb5\xb4\xf2\x68\x6d\xaa\x3c\xda\xc1\x2b\x8f\x6e\x94\xca\x33\x37\x18\xfb\xb0\x75\x20\xcc\xf5\x92\x28\x7a\x1b\xf4\x23\x30\x07\x6f\x03\x02\xe5\x6f\x1b\x5a\x26\xba\x7d\xaa\x6d\xa4\x31\xac\x87\x4c\xeb\x74\x5b\xff\xc9\x4e\xcc\x75\x88\x16\xcc\x7a\x51\x87\x59\x4b\x07\xe7\x7a\x15\x23\x7b\xb8\x5f\x2d\xc2\xed\xe5\xb3\x9b\xf9\x36\xc3\x5c\xad\xb1\xd6\xde\x22\x3a\x98\x50\xf2\xfb\x17\x47\x5a\x59\x41\xe2\x61\x2b\x9b\xf3\xef\xc5\xe0\x1e\xf9\x6f\x10\x5b\x64\x9b\xb1\x05\xfe\xbc\x13\xd9\x05\x31\x83\x74\x03\x04\x19\xe9\xd9\x9d\xef\x99\xe1\x71\xb5\xd4\x9e\xed\x87\xef\x47\x59\x4c\x04\x0f\x50\xb7\xaa\x6a\x4c\x31\x80\x36\xc4\xa4\xad\xa8\xa9\x88\x56\x7f\x67\xf7\x58\x10\x5d\xbf\x4c\xd9\x76\x71\x74\x4f\x7e\x6f\x41\x4f\x3b\x76\xda\xd6\x67\x67\x8c\x3c\x27\x6f\x9d\xee\x03\xe3\xac\x73\xf6\xbb\xe6\xbf\x2d\xda\x7a\x40\x19\x91\x35\x46\x3b\x8b\xd0\x31\xa2\x73\x8a\x31\x6e\x09\x95\x44\xef\x3a\xc6\xef\x1d\xaf\x2b\x04\x7b\xba\xf4\x47\x4e\x77\x20\x1e\xa0\xb2\x7a\xa9\xe2\xa0\x55\xac\xdf\xc6\xd8\x7b\xe9\x5a\x23\xa2\x2b\x7c\x3a\xc4\xf7\x39\x3d\x6b\x3b\x29\xdc\x33\x84\x76\x01\xd4\xe1\xf3\xdd\xc0\x69\x2c\x57\x33\x0b\x2e\xbf\xe0\x0e\xe1\x65\xbd\x85\x8b\x15\x24\xc4\x84\xd9\x63\x2d\xd7\xff\x10\xa2\xdd\x99\xb8\x1f\x3f\x53\xa9\x58\x33\x85\xaa\x1e\xce\x36\xb3\xf6\x1d\xf8\x54\x33\x3d\x6f\x43\x25\xcf\xb2\x56\x7c\x4a\x51\x6d\xdb\xcc\x78\x47\x36\x08\x22\x8d\xd7\xa8\x4a\x5b\xfc\x2d\xa6\x9b\x10\x45\xad\x01\x6f\x29\x22\xd3\x95\xad\x95\x1d\xa5\x9a\xc3\xb5\x1b\xda\xe4\x2c\x86\x01\x49\x23\xb3\x82\xa7\x25\x8d\x71\xc1\xe3\x34\x2e\x9b\xca\x79\x08\x48\xa4\xbd\xfe\x6a\xa6\xea\xbd\xac\x0c\xdd\xeb\xe5\xaf\xe4\xd6\xaa\xdf\x71\x54\xdb\xcd\xae\x72\x97\xb7\x0e\xf4\x20\xfb\x67\x03\x6a\x3e\x2c\xfb\x7c\x70\x97\x48\x1a\x5e\xb8\xb6\x0e\x3f\xda\x94\x34\xbc\xfb\xef\x59\x61\xc3\x79\xb6\x34\xda\x55\x4e\xbd\x62\xa0\x8a\x1b\x54\x9c\xcc\x1d\xe8\xf4\x56\x18\x72\x6b\xe7\xc0\x84\x5c\x97\x60\x06\x5e\x6e\x90\x35\x8f\x79\x44\x94\x9d\x1d\xd3\xe8\x82\x70\x71\x13\xa2\xc2\x0b\xa0\x11\x49\x35\xda\x56\x22\xe0\xfc\xef\xaf\xdd\xe7\x1f\x63\x14\x66\x56\x28\x4a\x75\x5e\xc5\xb5\xae\xea\x5c\x85\xdd\x9a\x02\x31\x46\xf1\x75\x6a\x50\xc3\x02\xa8\x8c\xd2\x58\xd4\xa5\x08\xa5\x32\x15\x66\x0e\x85\xba\x57\x52\x01\xde\x92\x38\x89\x70\x06\x5c\x80\xbb\x61\x93\xad\xa1\xe2\x78\x8d\x96\x14\xab\x7d\xb5\x3f\x0c\x20\x90\x6a\x54\x56\x79\xe9\xa2\x21\xca\x6d\xad\x9d\xc0\x65\xbc\xbd\x5c\x4d\x8a\x97\x97\x97\x97\xfa\x53\x54\xf1\xc2\x77\x86\x88\x5f\x21\x4c\xe3\xed\x1f\xa6\x55\xd1\xb2\xdf\x87\xdd\x49\x07\x4a\x04\x90\x48\x4b\x58\xa3\xdf\x9e\x23\x03\x69\x03\x2b\xaa\xfd\xea\x65\x7e\x80\x93\x3a\x5d\x17\x30\xd0\x9e\xf0\xd0\x55\x7c\x2f\x03\x29\x9f\xaf\x89\xba\x9c\x75\xfa\x54\xed\x7b\xe1\xb9\x72\x7e\x85\x5b\x78\x0e\xd3\x40\xca\x29\x10\xc1\x5a\x65\xae\x49\x94\xa2\x95\x5a\x13\xd5\x31\x0b\x3f\xfb\xe5\xab\x22\x4b\x4c\x8d\x25\xe9\x6b\xce\x90\xcd\x40\x2a\xe0\x5e\xc6\x6b\xe3\x1a\x30\x4e\xcc\x76\x66\xdb\xca\xb3\xa6\x9d\xb5\x34\x21\x31\xae\xc5\x2e\x08\x84\x44\x43\x82\x2a\xe6\xda\xa6\x4a\x76\x82\x34\x22\xdc\xf0\x28\x82\x75\xb9\xce\x3e\xba\x91\xcd\x87\x72\x69\x76\x6b\xab\x1e\xa2\x59\xe3\x03\xc4\xa8\x5f\xdd\xf5\xf6\xde\xa3\x34\x57\x3c\x2c\x50\xd7\xa9\xd9\x3b\x58\x1b\x61\xba\x27\x80\x8b\x55\x75\xaf\x3d\x6e\xf3\x40\x1b\x10\x8a\x44\xd3\x76\xf4\xbd\x55\x87\x8d\x09\x17\x44\xb0\x0b\x08\xb8\xd2\x06\x86\x1b\x31\xf3\x3d\xde\xf4\xda\x74\x5f\x11\x21\x24\xe0\x6d\x12\x71\xca\x8d\x77\xc1\x13\x98\x43\x7c\x4e\x2e\x83\x81\xee\x2f\x1b\xd6\x71\xee\xdb\xee\x07\xe6\xa9\xb3\x47\xbb\xc2\x43\x1c\x93\x33\x8d\xd6\x7f\xcb\x79\xf9\x25\x69\x3f\x9a\x5d\xa5\x35\xee\x04\x2a\xc0\x2b\xff\x5a\x06\x96\x88\xce\xb4\x51\x29\x35\xa9\xb2\x1a\x85\x4b\x9c\x5c\xe6\xa9\xed\x6a\xc0\xb3\xe2\xed\x0f\xf3\x67\x4e\xed\x0f\x20\xa4\x71\x27\x2c\xa5\xc2\x67\xda\xe4\x42\xdf\x42\x8c\x44\x68\x87\x0a\x27\xef\x14\x42\xa1\xa6\xe8\xf3\x93\x07\xf2\xca\xa3\x9a\xd0\x10\xce\x2b\xac\x68\x6d\xdf\xa0\x01\xce\x66\xee\x9c\x6f\x06\x49\x44\xc4\x37\x9c\x39\x1b\xaf\xb8\x60\x4f\xdc\x5f\x9e\x3c\xe1\x9b\x62\x38\xfd\xa4\x86\xae\xe2\x6f\x49\x63\xa7\xb0\x4e\xed\x67\x67\x25\x74\x7c\xf7\xe7\x9c\xcd\xdc\x80\x76\xbc\x39\x67\xfe\xff\x76\xc0\x59\x46\xd4\xdf\xd6\x7b\xa1\xa1\xe1\x6b\xf7\xe6\x79\xad\xec\x5f\x0e\xde\x0b\x98\xff\x07\x00\x00\xff\xff\x08\x8d\x91\xbe\xaa\x49\x00\x00")

func openapiYamlBytes() ([]byte, error) {
	return bindataRead(
		_openapiYaml,
		"openapi.yaml",
	)
}

func openapiYaml() (*asset, error) {
	bytes, err := openapiYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "openapi.yaml", size: 18858, mode: os.FileMode(493), modTime: time.Unix(1713249971, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"openapi.yaml": openapiYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"openapi.yaml": &bintree{openapiYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
