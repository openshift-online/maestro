// Code generated for package openapi by go-bindata DO NOT EDIT. (@generated)
// sources:
// ../../openapi/openapi.yaml
package openapi

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _openapiYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x5f\x73\xdb\xb8\x11\x7f\xf7\xa7\xd8\x99\xb6\xa3\xe4\x46\x96\x94\xde\x75\xa6\xd5\x24\x37\x93\x5c\x2f\x9d\xbb\xc9\x25\x69\x9c\xb4\x0f\x9d\x8e\x0c\x11\x4b\x11\x31\x09\x30\x00\x68\x5b\x69\xfb\xdd\x3b\x00\xf8\x5f\x24\x4d\xea\x6c\x8b\xf6\x29\x2f\xb1\xc0\xc5\x62\x17\xf8\xed\x8f\x0b\x60\x25\x11\x23\x27\x31\x5b\xc2\xb7\xb3\xc5\x6c\x71\xc2\xb8\x2f\x96\x27\x00\x9a\xe9\x10\x97\x10\x11\x54\x5a\x0a\x38\x43\x79\xc9\x3c\x84\x97\xef\x7f\x3a\x01\xa0\xa8\x3c\xc9\x62\xcd\x04\x6f\x13\xb9\x44\xa9\xec\xe3\xc5\x6c\x31\x7b\x76\xa2\x50\x9a\x16\xa3\xf9\x14\x12\x19\x2e\x21\xd0\x3a\x5e\xce\xe7\xa1\xf0\x48\x18\x08\xa5\x97\x7f\x5e\x2c\x16\x27\x00\x35\xed\x5e\x22\x25\x72\x0d\x54\x44\x84\xf1\x6a\x77\xb5\x9c\xcf\x49\xcc\x66\xc6\x05\x15\x30\x5f\xcf\x3c\x11\xed\xaa\xf8\x85\x30\x0e\x4f\x62\x29\x68\xe2\x99\x96\xa7\xe0\xac\x69\x56\xa6\x34\xd9\xe0\x4d\x2a\xcf\x34\xd9\x30\xbe\xc9\x14\xc5\x44\x07\xd6\x37\xa3\x61\x9e\x4e\xc8\xfc\xf2\xd9\x5c\xa2\x12\x89\xf4\xd0\x3e\x04\xd8\xa0\x76\x7f\x00\xa8\x24\x8a\x88\xdc\x2e\xe1\x03\xea\x44\x72\x05\x04\x42\xa6\x34\x08\x1f\xf2\x4e\x99\x28\x7a\x89\x64\x7a\x9b\x75\x35\x66\xbf\x42\x22\x51\x2e\xe1\x5f\xff\x4e\x1b\x25\xaa\x58\x70\x95\x8d\x64\xfe\x4d\xfe\xb8\x58\x4c\x8a\x8f\x35\x17\x5e\xc2\xcf\x67\xef\xde\x02\x91\x92\x6c\xcb\xa3\x82\x58\x7f\x46\x4f\xab\x52\x3f\x4f\x70\x8d\x5c\x97\x55\x01\x90\x38\x0e\x99\x47\x8c\xb2\xf9\x67\x25\x78\xf5\x29\x80\xf2\x02\x8c\x48\xbd\x15\xe0\xf7\x12\xfd\x25\x4c\x7e\x37\xf7\x44\x14\x0b\x8e\x5c\xab\xb9\x93\x55\xf3\x0f\xa9\x0d\x6f\x98\xd2\x93\xc2\x8f\xef\x16\xcf\x3a\xfc\x48\x74\x00\x5a\x5c\x20\x07\xa6\x80\xf1\x4b\x12\x32\x7a\x08\xe3\x7f\x94\x52\xc8\x8a\xd5\xdf\xb6\x5b\xfd\x89\x93\x44\x07\x42\xb2\xaf\x48\x41\x0b\x88\x51\xfa\x42\x46\x20\x62\x94\xd6\xac\x31\x78\xf0\xa7\x2e\xfc\x7c\xe2\x78\x1d\xa3\xa7\x91\x02\x9a\x7e\x20\x3c\x1b\xab\x87\x9f\xfb\x98\x48\x12\xa1\x4e\xe9\x06\x6c\xbc\x34\x75\x2e\xe4\xe6\x31\xd9\xe0\xa4\xaf\xb0\x62\x5f\x07\x08\x23\x91\x5e\xd0\x5b\x5c\x48\x8a\xf2\xd5\xb6\xb7\xbc\xcf\x30\xa4\xca\x89\xc7\x86\x45\xeb\xf4\xf2\x83\x44\xa2\x11\x08\x70\xbc\xca\x63\x7c\x18\xb1\x7c\x49\x50\xe9\x57\x82\x96\xe4\x2a\x48\xc8\xa2\x16\x28\xd1\x24\x17\x31\xfd\x98\x44\xba\x04\x2d\x13\x3c\xe9\x80\x44\x37\x20\x9a\xe1\xd0\x87\x45\x26\x9d\xd4\xd8\x41\x29\x6e\xce\x0e\x02\xe4\xba\xed\x96\x47\x3a\xa2\xf0\x1f\x86\xed\xac\x09\x2e\x0a\xd5\x78\xc2\xf0\x48\xdc\x07\xf4\xe0\x2f\xed\x1e\xe4\xe1\x4a\x42\x89\x84\x6e\x01\xaf\x99\x3a\xcc\xfb\x7e\xd0\x0b\xe7\x25\x87\xa4\xed\x9d\x03\x9e\x09\x59\x93\x91\xe9\x00\xeb\x34\x77\x18\x97\x5a\x53\xc1\xf9\x7f\x18\xfd\x5f\x7b\x3e\xf8\x37\xd4\x40\x78\x91\x8e\xad\xb7\x90\x87\xc5\xdd\x64\x82\x39\x20\x7c\x91\x70\x5a\x19\xf0\x5e\xa7\xae\x91\xfb\x8e\x04\x72\x18\x0f\xbe\x6b\xf7\xe0\xad\x28\xd0\x79\xc5\x74\x00\x2a\x46\x8f\xf9\x0c\x29\x30\xfa\x50\xd8\x64\xac\xe9\x6b\x4c\xb4\x17\xec\x90\xc2\xa7\x98\xda\x2c\x8e\xdf\x51\x0a\xe7\xf4\xd3\x62\x5d\x47\x96\xca\xbd\x37\xb3\xf2\xc1\xb9\xd1\x9d\xd6\xf5\xe1\xb9\x24\xf5\x56\x25\x9e\x87\x4a\xf9\x49\x18\x6e\x47\x43\x78\xc7\x64\xef\x9e\xad\x3e\x72\xf5\x28\x9c\x78\x84\x19\xeb\xce\x3b\xc6\x12\x8f\xc9\x52\x47\x91\xa1\x1a\x6b\x43\xd4\xb8\xf3\xb6\xf9\xab\x6d\x06\xb2\xe7\xcb\xa6\x89\x96\x3b\x20\x5a\x1c\x1f\xd8\x61\x5b\x68\xf9\xc8\x8c\xf7\x6f\xf5\x91\x19\x47\xe0\xc4\x30\x86\xb1\x31\x34\x22\x86\xa9\x9f\xc5\xde\x78\xa0\xc9\x68\xd7\xe6\xf9\x74\x9d\x70\x1a\xee\x77\x9d\x02\x69\xdf\x3b\xdd\x4b\xb7\xde\xaa\xb8\xc1\xc7\x70\xb9\xf2\xca\x5a\x72\xbc\x62\x19\x05\x45\x3d\xc8\x3d\xea\x6f\xf5\x8a\xe5\x26\x56\x1a\x7a\xb2\xe7\x28\xe1\x1e\x0f\xf8\xd2\x11\x47\x72\xce\xe7\x88\xe8\x48\x42\x23\xf0\xa0\x67\x9e\x94\xe2\xe7\xf1\xa4\x4b\x0f\x99\x50\x9b\x33\x25\x4f\x70\x95\x44\xb9\x9e\x7e\x29\x52\xde\xe9\x5e\x73\xa3\x6c\xd4\x43\x26\x45\x3f\xa4\x36\x1c\xd3\xa1\x51\x30\xd1\xa3\x89\xde\x81\x09\xd1\xc0\x94\x68\x70\x52\x34\x3c\x2d\xba\xf5\xda\x93\x2c\xda\x87\x51\xcc\x4d\x17\x17\x59\xfc\x8e\xe5\xc2\x22\xb3\xe7\x21\xd6\x9e\xd4\x6d\x3f\x1e\xba\x1d\x29\x7c\x1f\x0f\x3a\x4e\xf2\xf3\x70\x7d\x60\x27\xf9\xfd\x6b\x4f\x6a\x34\x77\x18\x97\x5a\x93\xc2\x7e\x3b\xd4\x3c\x31\xbb\xfb\xad\x69\x0e\x88\x03\xef\x49\x1b\xb9\xef\x48\x20\x63\xdc\x8d\xe6\xe8\x3c\x6e\x43\x6f\xfd\xb0\xbe\xbb\xf6\xe4\x6e\x52\xb8\xac\xf6\xc4\x1b\x69\x2a\x77\x2b\xb5\x27\x39\xcf\x8d\xa5\xf6\xe4\x98\xec\x8d\xc1\xea\x23\x57\x8f\xc2\x89\x47\x98\xb1\xb6\xd7\x9e\x8c\x22\x43\xbd\xb9\xf6\x64\xbf\x97\xcd\xc0\xda\x93\xe2\xf8\xe0\x58\x7b\x72\x64\xc6\xdb\xf5\xe0\x11\x30\xe3\x9e\xb5\x27\x23\x61\x98\x3d\xef\x54\x8a\x27\xa6\x5b\xc6\x3b\x67\x46\x7f\x46\x2c\x29\xf1\xa4\x5a\xf5\x36\x46\xf7\x1d\xe2\x93\x92\xdd\xb8\x84\xb5\x15\x4b\x1b\xdd\x87\xd7\x42\x46\x44\x2f\xe1\xe7\x7f\x7e\x3c\xc9\x1c\x4c\x95\xbe\xb3\xb7\x20\x1f\xd0\x47\x89\xdc\xc3\xaa\x76\x77\x45\x92\x36\xc5\xd2\x40\x5d\xb3\x32\xcf\x31\x5a\x9e\x27\xd7\x49\x69\xc9\xf8\x26\x6f\xbe\x60\xfc\x66\xa1\xc0\x4c\x50\x97\xd0\x1b\x56\x9c\xf4\xf6\xb4\xad\xd7\xc0\x31\xd9\xe0\xae\x10\xe3\x1a\x37\x25\x24\x29\xf6\xb5\x87\x94\x16\x9a\x84\x37\x89\xe5\x3b\x8b\xd2\x1b\xc5\x58\x5a\xfa\x68\x6c\x2a\x7d\x34\x83\x97\x3e\xda\x51\x4a\x9f\x99\xc6\xc8\x85\xad\x05\x61\xa6\x97\x84\xe1\x3b\xbf\x1b\x81\x19\x78\x6b\x10\x28\x4a\x14\x1a\x26\xba\x79\xaa\x4d\xa4\x51\xac\x86\x4c\xe3\x74\x1b\xff\xc9\x4e\xcc\xb5\x88\xe6\xcc\xba\xaa\xc2\xac\xa1\x83\x75\xbd\x8c\x91\x01\xee\x97\x2f\xe1\x06\xf9\x6c\x67\xbe\xc9\x30\x7b\xd7\x58\x69\x6f\x10\xed\x4d\x28\x59\xe1\xc2\x81\x56\x96\x93\xa8\xdf\xca\x66\xfc\xbb\xea\xdd\x23\xfb\xb5\x86\x06\xd9\x7a\x6c\x81\x3b\xef\x44\xba\x22\xba\x97\x6e\x00\x3f\x25\x3d\xb3\xf3\x3d\xd5\x2c\x2a\x17\x25\xa6\xfb\xe1\xdb\x51\x96\x66\x71\xb7\xa3\x2c\x22\x9c\xf9\xa8\x1a\x55\xd5\xd6\x2b\x1b\x79\x25\xdc\xbb\xb1\x4f\x8f\x4c\xfd\xca\x13\xdc\x67\x9b\x5e\x7d\x94\x26\x3a\x69\x04\x7a\x49\xb4\xfc\x23\x0a\x8f\x25\x08\xab\xdf\x94\x69\xfa\x56\xd0\xc0\x57\x52\x03\xe0\x9b\xe1\xde\x84\x82\xc6\x49\x69\x45\x40\xa3\x74\xc7\xea\xb7\x2e\x68\x51\xb8\xf9\xd8\x96\xb5\x5c\x09\x56\x6d\x3b\x52\xed\x6f\x82\x6a\x51\x13\x4a\x34\x19\x44\x9c\xbf\x06\x94\x77\xc5\xe2\x77\x60\x53\x2f\xce\xcf\xce\x31\x1a\xc3\x65\xcf\x80\x69\x0d\x99\xb6\xa0\x69\x0a\x9b\x0e\x40\x84\x64\x8d\x61\xdf\x59\xb0\x4e\x51\xca\xcc\xc2\x90\xf0\x7d\xcb\xf8\x9d\xe3\xb5\xc5\x52\x47\x97\x6e\xd4\xb6\x47\xd4\x1e\x2a\xcb\x85\x68\x7b\xad\x62\xb5\x82\x6d\xf0\xd2\x75\x40\x72\x17\xbf\x2d\xe2\x43\x6e\x1c\x9a\x6e\x57\x06\xbe\xc3\x77\x01\xd4\xe2\xf3\xcd\xc0\xa9\x2d\x57\xfd\xe4\xa0\xd8\xf5\x58\x84\x17\x77\xd4\x8c\x2f\x21\x26\x3a\x48\x3f\x56\xce\x47\x3e\x06\x08\x8c\xba\x2f\x81\x78\x42\x66\x5d\x1a\x2f\xb4\xea\x27\x1d\x3b\xf0\x29\xef\x8e\x9d\x0d\xa5\xbd\xa9\xb1\xe2\x4b\x82\x72\xdb\x64\xc6\x7b\xb2\x41\xe0\x49\xb4\x46\x59\xd8\xe2\x2a\x3f\xaf\x02\xe4\x95\x06\xbc\xf6\x10\xa9\x2a\x1d\x47\x99\x51\xca\xfb\xde\x66\x43\xeb\x2f\x2e\x8a\x3e\x49\x42\xbd\x84\x67\x45\xc2\xc3\x38\x8b\x92\xa8\x68\x2a\xe6\xc1\x27\xa1\x72\xfa\xcb\xbb\x7b\xe7\x65\x69\xe8\x4e\x2f\x7f\x21\xd7\x46\xfd\x8e\xa3\x0a\xb4\x00\x69\x0b\x5e\xf7\xf4\x20\xfd\x51\xba\x8a\x0f\x8b\x2e\x1f\x6c\xe1\x5d\xcd\x0b\xdb\xd6\xe2\x47\x93\x92\x9a\x77\xff\x3d\xcd\x6d\x38\x4b\x97\x46\xd9\x6a\x13\xa7\x18\x3c\xc9\x34\x4a\x46\x66\x16\x74\x6a\xcb\x35\xb9\x36\x73\xa0\x03\xa6\x0a\x30\x03\x2b\x0e\x15\x15\x8b\x58\x48\xa4\x99\x1d\x5d\xeb\x82\xb0\xba\x0a\x50\xe2\x0a\xbc\x90\x24\x0a\x4d\x2b\xe1\x70\xf6\xf7\x37\xf6\x5d\x84\x11\x72\x3d\xcd\x15\x25\x2a\xab\x7c\x31\xae\xaa\x4c\xc5\x67\x25\x38\x10\xad\x25\x5b\x27\x1a\x15\xcc\xc1\x13\x61\x12\xf1\xaa\x14\xf1\x3c\x91\x70\x3d\x83\x5c\xdd\x6b\x21\x01\xaf\x49\x14\x87\x38\x05\xc6\xc1\x56\x25\xa6\x6b\x28\x19\x5e\xa2\x21\xc5\x72\x5f\xe5\x0e\x50\x09\x24\x0a\xa5\x51\x5e\xb8\xa8\x89\xb4\xc7\x91\x56\xe0\x3c\xda\x9e\x2f\x4f\xf2\x87\xe7\xe7\xe7\xea\x4b\x58\xf2\xc2\x75\x86\x90\x5d\x20\x4c\xa2\xed\x1f\x26\x65\xd1\xa2\xdf\xc7\xdd\x49\x07\x8f\x70\x20\xa1\x12\xb0\x46\x77\xa4\x89\x14\x84\x09\xac\xb0\xf2\x9b\x0a\xb3\x3d\x9c\x54\xc9\x3a\x87\x81\x72\x84\x87\xb6\x4a\xe6\xdc\x17\xe2\xc5\x9a\xc8\xf3\x69\xab\x4f\xe5\xbe\x2b\xc7\x95\xb3\x0b\xdc\xc2\x0b\x98\xf8\x42\x4c\x80\x70\xda\x28\x73\x49\xc2\x04\x8d\xd4\x9a\xc8\x96\x59\xf8\xc9\x2d\x5f\x19\x59\x7c\xa2\x0d\x49\x5f\x32\x8a\x74\x0a\x42\x02\x73\x32\x4e\x1b\x53\x80\x51\xac\xb7\x53\xd3\x56\x9c\xcf\xef\xac\xa5\x0e\x88\xb6\x2d\x66\x41\x20\x20\x0a\x62\x94\x11\x53\x26\x63\x36\x13\xa4\x10\xe1\x8a\x85\x21\xac\x8b\x75\x76\xd1\x8d\x74\xd6\x97\x4b\xd3\x4a\xd7\x6a\x88\xa6\x8d\x77\x10\xa3\x6e\x75\xd7\xdb\x5b\x8f\xd2\x4c\x71\xbf\x40\x5d\x27\x7a\x70\xb0\xd6\xc2\x74\x20\x80\xf3\x55\xb5\x8f\x1d\x6e\xb3\x40\xeb\x11\x8a\x44\x79\xcd\xe8\x7b\x27\xf7\x1b\x13\x56\x84\xd3\x15\xf8\x4c\x2a\x0d\xfd\x8d\x98\xba\x1e\x6f\x3b\x6d\xba\xad\x88\xe0\x02\xf0\x3a\x0e\x99\xc7\xb4\x73\xc1\x11\x98\x45\x7c\x46\x2e\xbd\x81\xee\x0a\xb4\xab\x38\x77\x6d\xb7\x03\xf3\xc4\xda\xa3\xec\x65\x6d\x14\x91\x53\x85\xc6\x7f\xc3\x79\xd9\x17\x4b\xdc\x68\x66\x95\xd6\xb8\x13\xa8\x00\xaf\xdd\x63\xe1\x1b\x22\x3a\x55\x5a\x26\x9e\x4e\xa4\xd1\xc8\x6d\xe2\x64\x33\x4f\x65\x56\x03\x9e\xe7\x4f\xbf\x9f\x3d\xb7\x6a\xbf\x07\x2e\xb4\x3d\x95\x2e\x14\x3e\x57\x3a\x13\xfa\x06\x22\x24\x5c\x59\x54\x58\x79\xab\x10\x72\x35\x79\x9f\x1f\x1d\x90\x97\x0e\xd5\xc4\x0b\xe0\xac\xc4\x8a\xc6\xf6\x0d\x6a\x60\x74\x6a\xef\x46\xa6\x10\x87\x84\x3f\x61\xd4\xda\x78\xc1\x38\x7d\x6a\xff\x72\xe4\x09\x4f\xf2\xe1\xd4\xd3\x0a\xba\xf2\xbf\x85\x17\x59\x85\x55\x6a\x3f\x3d\x2d\xa0\xe3\xba\xbf\x60\x74\x6a\x07\x34\xe3\xcd\x18\x75\xff\x9b\x01\xa7\x29\x51\x7f\x53\xed\x85\xda\x0b\xde\xd8\x27\x2f\x2a\xa5\x52\xc5\xe0\x9d\x80\xf9\x7f\x00\x00\x00\xff\xff\x14\x78\x42\xd6\x08\x58\x00\x00")

func openapiYamlBytes() ([]byte, error) {
	return bindataRead(
		_openapiYaml,
		"openapi.yaml",
	)
}

func openapiYaml() (*asset, error) {
	bytes, err := openapiYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "openapi.yaml", size: 22536, mode: os.FileMode(493), modTime: time.Unix(1737355203, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"openapi.yaml": openapiYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"openapi.yaml": &bintree{openapiYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
