// Code generated for package openapi by go-bindata DO NOT EDIT. (@generated)
// sources:
// ../../openapi/openapi.yaml
package openapi

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _openapiYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x5f\x8f\xdb\xb8\x11\x7f\xf7\xa7\x18\xa0\x2d\x7c\x39\x78\x6d\xa7\x77\x05\x5a\x23\x39\x20\xb9\x5e\x8a\x3b\xe4\x92\x34\x9b\xb4\x0f\x45\xb1\x4b\x93\x23\x8b\xb7\x12\xa9\x90\xd4\xee\x3a\x6d\xbf\x7b\x41\x52\xff\x2d\x69\x65\x63\x37\x56\x16\xbe\x97\x5b\x51\xc3\xe1\x0c\xf9\x9b\x9f\x86\x1c\x3a\x32\x41\x41\x12\xbe\x82\xef\xe6\xcb\xf9\x72\xc2\x45\x20\x57\x13\x00\xc3\x4d\x84\x2b\x88\x09\x6a\xa3\x24\x9c\xa3\xba\xe6\x14\xe1\xc5\xbb\x9f\x27\x00\x0c\x35\x55\x3c\x31\x5c\x8a\x2e\x91\x6b\x54\xda\xbd\x5e\xce\x97\xf3\xa7\x13\x8d\xca\xb6\x58\xcd\x67\x90\xaa\x68\x05\xa1\x31\xc9\x6a\xb1\x88\x24\x25\x51\x28\xb5\x59\xfd\x79\xb9\x5c\x4e\x00\x1a\xda\x69\xaa\x14\x0a\x03\x4c\xc6\x84\x8b\x7a\x77\xbd\x5a\x2c\x48\xc2\xe7\xd6\x05\x1d\xf2\xc0\xcc\xa9\x8c\x77\x55\xfc\x4a\xb8\x80\x6f\x12\x25\x59\x4a\x6d\xcb\x13\xf0\xd6\xb4\x2b\xd3\x86\x6c\xf0\x2e\x95\xe7\x86\x6c\xb8\xd8\xe4\x8a\x12\x62\x42\xe7\x9b\xd5\xb0\xc8\x26\x64\x71\xfd\x74\xa1\x50\xcb\x54\x51\x74\x2f\x01\x36\x68\xfc\x1f\x00\x3a\x8d\x63\xa2\xb6\x2b\x78\x8f\x26\x55\x42\x03\x81\x88\x6b\x03\x32\x80\xa2\x53\x2e\x8a\x34\x55\xdc\x6c\xf3\xae\xd6\xec\x97\x48\x14\xaa\x15\xfc\xeb\xdf\x59\xa3\x42\x9d\x48\xa1\xf3\x91\xec\x7f\xd3\x3f\x2e\x97\xd3\xf2\xb1\xe1\xc2\x0b\xf8\xe5\xfc\xed\x1b\x20\x4a\x91\x6d\x75\x54\x90\xeb\xdf\x90\x1a\x5d\xe9\x47\xa5\x30\x28\x4c\x55\x15\x00\x49\x92\x88\x53\x62\x95\x2d\x7e\xd3\x52\xd4\xdf\x02\x68\x1a\x62\x4c\x9a\xad\x00\xbf\x57\x18\xac\x60\xfa\xbb\x05\x95\x71\x22\x05\x0a\xa3\x17\x5e\x56\x2f\xde\x67\x36\xbc\xe6\xda\x4c\x4b\x3f\xbe\x5f\x3e\xed\xf1\x23\x35\x21\x18\x79\x85\x02\xb8\x06\x2e\xae\x49\xc4\xd9\x31\x8c\xff\x49\x29\xa9\x6a\x56\x7f\xd7\x6d\xf5\x47\x41\x52\x13\x4a\xc5\x3f\x23\x03\x23\x21\x41\x15\x48\x15\x83\x4c\x50\x39\xb3\xc6\xe0\xc1\x9f\xfa\xf0\xf3\x51\xe0\x6d\x82\xd4\x20\x03\xb4\xfd\x40\x52\x17\xab\xc7\x9f\xfb\x84\x28\x12\xa3\xc9\xe8\x06\x5c\xbc\xb4\x75\x2e\xe5\x16\x09\xd9\xe0\x74\xa8\xb0\xe6\x9f\xf7\x10\x46\xa2\x68\x38\x58\x5c\x2a\x86\xea\xe5\x76\xb0\x7c\xc0\x31\x62\xda\x8b\x27\x96\x45\x9b\xf4\xf2\xa3\x42\x62\x10\x08\x08\xbc\x29\x62\x7c\x3f\x62\xf9\x94\xa2\x36\x2f\x25\xab\xc8\xd5\x90\x90\x47\x2d\x30\x62\x48\x21\x62\xfb\x71\x85\x6c\x05\x46\xa5\x38\xe9\x81\x44\x3f\x20\xda\xe1\x30\x84\x45\xa6\xbd\xd4\xd8\x43\x29\x7e\xce\x8e\x02\xe4\xa6\xed\x8e\x47\x7a\xa2\xf0\x1f\x96\xed\x9c\x09\x3e\x0a\xf5\x78\xc2\xf0\x44\xdc\x47\xf4\xe0\x2f\xdd\x1e\x14\xe1\x4a\x22\x85\x84\x6d\x01\x6f\xb9\x3e\xce\xf7\x7e\xaf\x0f\xce\x0b\x01\x69\xd7\x37\x07\xa8\x0d\x59\x9b\x91\x99\x10\x9b\x34\x77\x1c\x97\x3a\x53\xc1\xc5\x7f\x38\xfb\x5f\x77\x3e\xf8\x37\x34\x40\x44\x99\x8e\xad\xb7\x50\x84\xc5\xc3\x64\x82\x05\x20\x02\x99\x0a\x56\x1b\xf0\x8b\x4e\x5d\x2b\xf7\x9d\x08\xe4\x38\x1e\x7c\xdf\xed\xc1\x1b\x59\xa2\xf3\x86\x9b\x10\x74\x82\x94\x07\x1c\x19\x70\xf6\xb5\xb0\xc9\x58\xd3\xd7\x84\x18\x1a\xee\x90\xc2\xc7\x84\xb9\x2c\x4e\x3c\x50\x0a\xe7\xf5\xb3\x72\x5d\x47\x96\xca\xbd\xb3\xb3\xf2\xde\xbb\xd1\x9f\xd6\x0d\xe1\xb9\x34\xf3\x56\xa7\x94\xa2\xd6\x41\x1a\x45\xdb\xd1\x10\xde\x29\xd9\xfb\xc2\x56\x9f\xb8\x7a\x14\x4e\x3c\xc2\x8c\x75\xe7\x1b\xe3\x88\xc7\x66\xa9\xa3\xc8\x50\xad\xb5\x11\x1a\xdc\xf9\xda\xfc\xd5\x35\x03\x39\xf0\x63\xd3\x46\xcb\x3d\x10\x2d\x8f\x0f\xdc\xb0\x1d\xb4\x7c\x62\xc6\x2f\x6f\xf5\x89\x19\x47\xe0\xc4\x7e\x0c\xe3\x62\x68\x44\x0c\xd3\x3c\x8b\xbd\xf3\x40\x93\xb3\xb6\xcd\x33\x95\x42\xa7\x71\xa1\x65\x58\x1d\xa5\xe8\xf4\xa0\xbb\xe7\x66\x1d\x25\x1f\xf5\x98\x75\x94\x1f\x33\x1b\x4e\x75\x94\x51\xf0\xd0\x57\xb9\x11\x6d\xab\xa3\xec\x59\x49\xd9\xb3\x96\xb2\x77\x35\x65\xff\x7a\xca\xbd\x57\x54\xf2\x68\xbf\xdf\xed\x78\x1e\xbf\x63\xd9\x86\xe7\xf6\x7c\x8d\x15\x95\xa6\xed\xa7\x54\xf2\x44\xe1\x87\x78\xd0\xb3\x3f\x2d\xc2\xf5\x2b\xdb\x9f\x0e\xaf\xa8\x34\x68\xee\x38\x2e\x75\x26\x85\xc3\x2a\x2a\x45\x62\xf6\xf0\x15\x95\x02\x10\x47\xae\xa8\xb4\x72\xdf\x89\x40\xc6\xb8\x17\x2d\xd0\xf9\x78\xf6\xa2\x23\xf9\x6e\xde\x55\x51\x79\x98\x14\x2e\xaf\xa8\xd0\x91\xa6\x72\xf7\x52\x51\x29\x78\x6e\x2c\x15\x95\x53\xb2\x37\x06\xab\x4f\x5c\x3d\x0a\x27\x1e\x61\xc6\xda\x5d\x51\x19\x45\x86\x7a\x77\x45\xe5\xb0\x8f\xcd\x9e\x15\x95\xf2\xf8\xe0\x54\x51\x39\x31\xe3\xfd\x7a\xf0\x08\x98\xf1\xc0\x8a\xca\x48\x18\xe6\x80\xdb\xed\x9c\x4d\x27\xe5\x1b\xdb\x2d\xe7\x9d\x73\xab\x3f\x27\x96\x8c\x78\x32\xad\x66\x9b\xa0\xff\x65\xcc\xa4\x62\x37\xae\x60\xed\xc4\xb2\x46\xff\xf0\x4a\xaa\x98\x98\x15\xfc\xf2\xcf\x0f\x93\xdc\xc1\x4c\xe9\x5b\x57\x05\x79\x8f\x01\x2a\x14\x14\xeb\xda\x7d\x89\x24\x6b\x4a\x94\x85\xba\xe1\x55\x9e\xe3\xac\x3a\x4f\xbe\x93\x36\x8a\x8b\x4d\xd1\x7c\xc5\xc5\xdd\x42\xa1\x9d\xa0\x3e\xa1\xd7\xbc\x3c\xe9\x1d\x68\xdb\xa0\x81\x13\xb2\xc1\x5d\x21\x2e\x0c\x6e\x2a\x48\xd2\xfc\xf3\x00\x29\x23\x0d\x89\xee\x12\x2b\x76\x16\x95\x2f\x8a\xb5\xb4\xf2\x68\x6d\xaa\x3c\xda\xc1\x2b\x8f\x6e\x94\xca\x33\x37\x18\xfb\xb0\x75\x20\xcc\xf5\x92\x28\x7a\x1b\xf4\x23\x30\x07\x6f\x03\x02\xe5\x6f\x1b\x5a\x26\xba\x7d\xaa\x6d\xa4\x31\xac\x87\x4c\xeb\x74\x5b\xff\xc9\x4e\xcc\x75\x88\x16\xcc\x7a\x51\x87\x59\x4b\x07\xe7\x7a\x15\x23\x7b\xb8\x5f\x2d\xc2\xed\xe5\xb3\x9b\xf9\x36\xc3\x5c\xad\xb1\xd6\xde\x22\x3a\x98\x50\xf2\xfb\x17\x47\x5b\x59\x4f\xab\x17\x82\xc4\xc3\x96\x38\xff\x69\x61\x8b\x6c\x33\x64\xc0\x1f\x63\x22\xbb\x20\x66\x90\x6e\x80\x20\xe3\x32\xbb\xa1\x3d\x33\x3c\xae\x56\xd0\xb3\x6d\xee\xfd\x28\x8b\x89\xe0\x01\xea\x56\x55\x8d\x99\x03\xd0\x86\x98\xb4\x15\x0c\x15\xd1\xea\xcf\xe7\x1e\x0b\x50\xeb\x77\x24\xdb\xee\x83\xee\x49\xdb\x2d\xe8\x69\xc7\x4e\xdb\xfa\xec\x8c\x91\xa7\xda\xad\xd3\x7d\x60\xf8\x74\xce\x7e\xd7\xfc\x03\xec\xc6\x4e\x0f\x28\x23\xb2\xc6\x68\x67\x11\x3a\x46\x74\x4e\x31\xc6\x2d\x4f\x92\xe8\x5d\xc7\xf8\xbd\xe3\x75\x85\x60\x4f\x97\xfe\xc8\xe9\x0e\xc4\x03\x54\x56\xef\x4a\x1c\xb4\x8a\xf5\x4b\x16\x7b\x2f\x5d\x6b\x44\x74\x85\x4f\x87\xf8\x3e\x87\x62\x6d\x07\x80\x7b\x86\xd0\x2e\x80\x3a\x7c\xbe\x1b\x38\x8d\xe5\x6a\x26\xb7\xe5\x87\xd9\x21\xbc\x2c\xa3\x70\xb1\x82\x84\x98\x30\x7b\xac\xa5\xf0\x1f\x42\xb4\x1b\x0e\xf7\x9b\x66\x2a\x15\x6b\x66\x46\xd5\x33\xd7\x66\x32\xbe\x03\x9f\x6a\x02\xe7\x6d\xa8\xa4\x4f\xd6\x8a\x4f\x29\xaa\x6d\x9b\x19\xef\xc8\x06\x41\xa4\xf1\x1a\x55\x69\x8b\xbf\x9c\x74\x13\xa2\xa8\x35\xe0\x2d\x45\x64\xba\xb2\x63\xb2\xa3\x54\x53\xb3\x76\x43\x9b\x9c\xc5\x30\x20\x69\x64\x56\xf0\xb4\xa4\x31\x2e\x78\x9c\xc6\x65\x53\x39\x0f\x01\x89\xb4\xd7\x5f\x4d\x40\xbd\x97\x95\xa1\x7b\xbd\xfc\x95\xdc\x5a\xf5\x3b\x8e\x6a\xbb\x87\x55\xee\x4e\xd6\x81\x1e\x64\xff\x1a\x40\xcd\x87\x65\x9f\x0f\xee\x6e\x48\xc3\x0b\xd7\xd6\xe1\x47\x9b\x92\x86\x77\xff\x3d\x2b\x6c\x38\xcf\x96\x46\xbb\x82\xa8\x57\x0c\x54\x71\x83\x8a\x93\xb9\x03\x9d\xde\x0a\x43\x6e\xed\x1c\x98\x90\xeb\x12\xcc\xc0\xcb\x7d\xaf\xe6\x31\x8f\x88\xb2\xb3\x63\x1a\x5d\x10\x2e\x6e\x42\x54\x78\x01\x34\x22\xa9\x46\xdb\x4a\x04\x9c\xff\xfd\xb5\xfb\xfc\x63\x8c\xc2\xcc\x0a\x45\xa9\xce\x8b\xb3\xd6\x55\x9d\xab\xb0\x3b\x4e\x20\xc6\x28\xbe\x4e\x0d\x6a\x58\x00\x95\x51\x1a\x8b\xba\x14\xa1\x54\xa6\xc2\xcc\xa1\x50\xf7\x4a\x2a\xc0\x5b\x12\x27\x11\xce\x80\x0b\x70\x17\x67\xb2\x35\x54\x1c\xaf\xd1\x92\x62\xb5\xaf\xf6\x7b\x7c\x02\xa9\x46\x65\x95\x97\x2e\x1a\xa2\xdc\x8e\xd9\x09\x5c\xc6\xdb\xcb\xd5\xa4\x78\x79\x79\x79\xa9\x3f\x45\x15\x2f\x7c\x67\x88\xf8\x15\xc2\x34\xde\xfe\x61\x5a\x15\x2d\xfb\x7d\xd8\x9d\x74\xa0\x44\x00\x89\xb4\x84\x35\xfa\x5d\x37\x32\x90\x36\xb0\xa2\xda\x8f\x59\xe6\x07\x38\xa9\xd3\x75\x01\x03\xed\x09\x0f\x5d\x21\xf7\x32\x90\xf2\xf9\x9a\xa8\xcb\x59\xa7\x4f\xd5\xbe\x17\x9e\x2b\xe7\x57\xb8\x85\xe7\x30\x0d\xa4\x9c\x02\x11\xac\x55\xe6\x9a\x44\x29\x5a\xa9\x35\x51\x1d\xb3\xf0\xb3\x5f\xbe\x2a\xb2\xc4\xd4\x58\x92\xbe\xe6\x0c\xd9\x0c\xa4\x02\xee\x65\xbc\x36\xae\x01\xe3\xc4\x6c\x67\xb6\xad\x3c\x42\xda\x59\x4b\x13\x12\xe3\x5a\xec\x82\x40\x48\x34\x24\xa8\x62\xae\x6d\xaa\x64\x27\x48\x23\xc2\x0d\x8f\x22\x58\x97\xeb\xec\xa3\x1b\xd9\x7c\x28\x97\x66\x97\xb1\xea\x21\x9a\x35\x3e\x40\x8c\xfa\xd5\x5d\x6f\xef\x3d\x4a\x73\xc5\xc3\x02\x75\x9d\x9a\xbd\x83\xb5\x11\xa6\x7b\x02\xb8\x58\x55\xf7\xda\xe3\x36\x0f\xb4\x01\xa1\x48\x34\x6d\x47\xdf\x5b\x75\xd8\x98\x70\x41\x04\xbb\x80\x80\x2b\x6d\x60\xb8\x11\x33\xdf\xe3\x4d\xaf\x4d\xf7\x15\x11\x42\x02\xde\x26\x11\xa7\xdc\x78\x17\x3c\x81\x39\xc4\xe7\xe4\x32\x18\xe8\xfe\x0e\x61\x1d\xe7\xbe\xed\x7e\x60\x9e\x3a\x7b\xb4\xab\x27\xc4\x31\x39\xd3\x68\xfd\xb7\x9c\x97\xdf\x7d\xf6\xa3\xd9\x55\x5a\xe3\x4e\xa0\x02\xbc\xf2\xaf\x65\x60\x89\xe8\x4c\x1b\x95\x52\x93\x2a\xab\x51\xb8\xc4\xc9\x65\x9e\xda\xae\x06\x3c\x2b\xde\xfe\x30\x7f\xe6\xd4\xfe\x00\x42\x1a\x77\x70\x52\x2a\x7c\xa6\x4d\x2e\xf4\x2d\xc4\x48\x84\x76\xa8\x70\xf2\x4e\x21\x14\x6a\x8a\x3e\x3f\x79\x20\xaf\x3c\xaa\x09\x0d\xe1\xbc\xc2\x8a\xd6\xf6\x0d\x1a\xe0\x6c\xe6\x8e\xef\x66\x90\x44\x44\x7c\xc3\x99\xb3\xf1\x8a\x0b\xf6\xc4\xfd\xe5\xc9\x13\xbe\x29\x86\xd3\x4f\x6a\xe8\x2a\xfe\x96\x34\x76\x0a\xeb\xd4\x7e\x76\x56\x42\xc7\x77\x7f\xce\xd9\xcc\x0d\x68\xc7\x9b\x73\xe6\xff\x6f\x07\x9c\x65\x44\xfd\x6d\xbd\x17\x1a\x1a\xbe\x76\x6f\x9e\xd7\xaa\xf9\xe5\xe0\xbd\x80\xf9\x7f\x00\x00\x00\xff\xff\x5f\xe1\x0b\xf8\x81\x49\x00\x00")

func openapiYamlBytes() ([]byte, error) {
	return bindataRead(
		_openapiYaml,
		"openapi.yaml",
	)
}

func openapiYaml() (*asset, error) {
	bytes, err := openapiYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "openapi.yaml", size: 18817, mode: os.FileMode(493), modTime: time.Unix(1710930902, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"openapi.yaml": openapiYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"openapi.yaml": &bintree{openapiYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
