// Code generated for package openapi by go-bindata DO NOT EDIT. (@generated)
// sources:
// ../../openapi/openapi.yaml
package openapi

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _openapiYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x5f\x8f\xdb\xb8\x11\x7f\xf7\xa7\x18\xa0\x2d\x7c\x39\x78\x6d\xa7\x77\x05\x5a\x23\x39\x20\xb9\x5e\x8a\x3b\xe4\x92\x34\x9b\xb4\x0f\x45\xb1\x4b\x93\x23\x8b\xb7\x12\xa9\x90\xd4\xee\x3a\x6d\xbf\x7b\x41\x52\xff\x2d\x69\x65\x63\x37\x56\x16\xde\x97\x58\xd4\x70\x38\x43\xfe\xe6\xa7\xa1\x86\x8a\x4c\x50\x90\x84\xaf\xe0\xbb\xf9\x72\xbe\x9c\x70\x11\xc8\xd5\x04\xc0\x70\x13\xe1\x0a\x62\x82\xda\x28\x09\xe7\xa8\xae\x39\x45\x78\xf1\xee\xe7\x09\x00\x43\x4d\x15\x4f\x0c\x97\xa2\x4b\xe4\x1a\x95\x76\xb7\x97\xf3\xe5\xfc\xe9\x44\xa3\xb2\x2d\x56\xf3\x19\xa4\x2a\x5a\x41\x68\x4c\xb2\x5a\x2c\x22\x49\x49\x14\x4a\x6d\x56\x7f\x5e\x2e\x97\x13\x80\x86\x76\x9a\x2a\x85\xc2\x00\x93\x31\xe1\xa2\xde\x5d\xaf\x16\x0b\x92\xf0\xb9\x75\x41\x87\x3c\x30\x73\x2a\xe3\x5d\x15\xbf\x12\x2e\xe0\x9b\x44\x49\x96\x52\xdb\xf2\x04\xbc\x35\xed\xca\xb4\x21\x1b\xbc\x4b\xe5\xb9\x21\x1b\x2e\x36\xb9\xa2\x84\x98\xd0\xf9\x66\x35\x2c\xb2\x09\x59\x5c\x3f\x5d\x28\xd4\x32\x55\x14\xdd\x4d\x80\x0d\x1a\xff\x03\x40\xa7\x71\x4c\xd4\x76\x05\xef\xd1\xa4\x4a\x68\x20\x10\x71\x6d\x40\x06\x50\x74\xca\x45\x91\xa6\x8a\x9b\x6d\xde\xd5\x9a\xfd\x12\x89\x42\xb5\x82\x7f\xfd\x3b\x6b\x54\xa8\x13\x29\x74\x3e\x92\xfd\x9b\xfe\x71\xb9\x9c\x96\x97\x0d\x17\x5e\xc0\x2f\xe7\x6f\xdf\x00\x51\x8a\x6c\xab\xa3\x82\x5c\xff\x86\xd4\xe8\x4a\x3f\x2a\x85\x41\x61\xaa\xaa\x00\x48\x92\x44\x9c\x12\xab\x6c\xf1\x9b\x96\xa2\x7e\x17\x40\xd3\x10\x63\xd2\x6c\x05\xf8\xbd\xc2\x60\x05\xd3\xdf\x2d\xa8\x8c\x13\x29\x50\x18\xbd\xf0\xb2\x7a\xf1\x3e\xb3\xe1\x35\xd7\x66\x5a\xfa\xf1\xfd\xf2\x69\x8f\x1f\xa9\x09\xc1\xc8\x2b\x14\xc0\x35\x70\x71\x4d\x22\xce\x8e\x61\xfc\x4f\x4a\x49\x55\xb3\xfa\xbb\x6e\xab\x3f\x0a\x92\x9a\x50\x2a\xfe\x19\x19\x18\x09\x09\xaa\x40\xaa\x18\x64\x82\xca\x99\x35\x06\x0f\xfe\xd4\x87\x9f\x8f\x02\x6f\x13\xa4\x06\x19\xa0\xed\x07\x92\xba\x58\x3d\xfe\xdc\x27\x44\x91\x18\x4d\x46\x37\xe0\xe2\xa5\xad\x73\x29\xb7\x48\xc8\x06\xa7\x43\x85\x35\xff\xbc\x87\x30\x12\x45\xc3\xc1\xe2\x52\x31\x54\x2f\xb7\x83\xe5\x03\x8e\x11\xd3\x5e\x3c\xb1\x2c\xda\xa4\x97\x1f\x15\x12\x83\x40\x40\xe0\x4d\x11\xe3\xfb\x11\xcb\xa7\x14\xb5\x79\x29\x59\x45\xae\x86\x84\x3c\x6a\x81\x11\x43\x0a\x11\xdb\x8f\x2b\x64\x2b\x30\x2a\xc5\x49\x0f\x24\xfa\x01\xd1\x0e\x87\x21\x2c\x32\xed\xa5\xc6\x1e\x4a\xf1\x73\x76\x14\x20\x37\x6d\x77\x3c\xd2\x13\x85\xff\xb0\x6c\xe7\x4c\xf0\x51\xa8\xc7\x13\x86\x27\xe2\x3e\xa2\x07\x7f\xe9\xf6\xa0\x08\x57\x12\x29\x24\x6c\x0b\x78\xcb\xf5\x71\x9e\xf7\x7b\x3d\x70\x5e\x08\x48\xbb\x9e\x39\x40\x6d\xc8\xda\x8c\xcc\x84\xd8\xa4\xb9\xe3\xb8\xd4\x99\x0a\x2e\xfe\xc3\xd9\xff\xba\xf3\xc1\xbf\xa1\x01\x22\xca\x74\x6c\xbd\x85\x22\x2c\x1e\x26\x13\x2c\x00\x11\xc8\x54\xb0\xda\x80\x5f\x74\xea\x5a\xb9\xef\x44\x20\xc7\xf1\xe0\xfb\x6e\x0f\xde\xc8\x12\x9d\x37\xdc\x84\xa0\x13\xa4\x3c\xe0\xc8\x80\xb3\xaf\x85\x4d\xc6\x9a\xbe\x26\xc4\xd0\x70\x87\x14\x3e\x26\xcc\x65\x71\xe2\x81\x52\x38\xaf\x9f\x95\xeb\x3a\xb2\x54\xee\x9d\x9d\x95\xf7\xde\x8d\xfe\xb4\x6e\x08\xcf\xa5\x99\xb7\x3a\xa5\x14\xb5\x0e\xd2\x28\xda\x8e\x86\xf0\x4e\xc9\xde\x17\xb6\xfa\xc4\xd5\xa3\x70\xe2\x11\x66\xac\x3b\xcf\x18\x47\x3c\x36\x4b\x1d\x45\x86\x6a\xad\x8d\xd0\xe0\xce\xd3\xe6\xaf\xae\x19\xc8\x81\x0f\x9b\x36\x5a\xee\x81\x68\xf9\xfa\xc0\x0d\xdb\x41\xcb\x27\x66\xfc\xf2\x56\x9f\x98\x71\x04\x4e\xec\xc7\x30\x2e\x86\x46\xc4\x30\xcd\x77\xb1\x77\xbe\xd0\xe4\xac\x6d\xf3\x4c\xa5\xd0\x69\x5c\x68\x19\x56\x47\x29\x3a\x3d\xe8\xee\xb9\x59\x47\xc9\x47\x3d\x66\x1d\xe5\xc7\xcc\x86\x53\x1d\x65\x14\x3c\xf4\x55\x6e\x44\xdb\xea\x28\x7b\x56\x52\xf6\xac\xa5\xec\x5d\x4d\xd9\xbf\x9e\x72\xef\x15\x95\x3c\xda\xef\x77\x3b\x9e\xc7\xef\x58\xb6\xe1\xb9\x3d\x5f\x63\x45\xa5\x69\xfb\x29\x95\x3c\x51\xf8\x21\x1e\xf4\xec\x4f\x8b\x70\xfd\xca\xf6\xa7\xc3\x2b\x2a\x0d\x9a\x3b\x8e\x4b\x9d\x49\xe1\xb0\x8a\x4a\x91\x98\x3d\x7c\x45\xa5\x00\xc4\x91\x2b\x2a\xad\xdc\x77\x22\x90\x31\xee\x45\x0b\x74\x3e\x9e\xbd\xe8\x48\x9e\x9b\x77\x55\x54\x1e\x26\x85\xcb\x2b\x2a\x74\xa4\xa9\xdc\xbd\x54\x54\x0a\x9e\x1b\x4b\x45\xe5\x94\xec\x8d\xc1\xea\x13\x57\x8f\xc2\x89\x47\x98\xb1\x76\x57\x54\x46\x91\xa1\xde\x5d\x51\x39\xec\x61\xb3\x67\x45\xa5\x7c\x7d\x70\xaa\xa8\x9c\x98\xf1\x7e\x3d\x78\x04\xcc\x78\x60\x45\x65\x24\x0c\x73\xc0\xe9\x76\xce\xa6\x93\xf2\x8e\xed\x96\xf3\xce\xb9\xd5\x9f\x13\x4b\x46\x3c\x99\x56\xb3\x4d\xd0\x7f\x19\x33\xa9\xd8\x8d\x2b\x58\x3b\xb1\xac\xd1\x5f\xbc\x92\x2a\x26\x66\x05\xbf\xfc\xf3\xc3\x24\x77\x30\x53\xfa\xd6\x55\x41\xde\x63\x80\x0a\x05\xc5\xba\x76\x5f\x22\xc9\x9a\x12\x65\xa1\x6e\x78\x95\xe7\x38\xab\xce\x93\xef\xa4\x8d\xe2\x62\x53\x34\x5f\x71\x71\xb7\x50\x68\x27\xa8\x4f\xe8\x35\x2f\xdf\xf4\x0e\xb4\x6d\xd0\xc0\x09\xd9\xe0\xae\x10\x17\x06\x37\x15\x24\x69\xfe\x79\x80\x94\x91\x86\x44\x77\x89\x15\x3b\x8b\xca\x13\xc5\x5a\x5a\xb9\xb4\x36\x55\x2e\xed\xe0\x95\x4b\x37\x4a\xe5\x9a\x1b\x8c\x7d\xd8\x3a\x10\xe6\x7a\x49\x14\xbd\x0d\xfa\x11\x98\x83\xb7\x01\x81\xf2\xdb\x86\x96\x89\x6e\x9f\x6a\x1b\x69\x0c\xeb\x21\xd3\x3a\xdd\xd6\x7f\xb2\x13\x73\x1d\xa2\x05\xb3\x5e\xd4\x61\xd6\xd2\xc1\xb9\x5e\xc5\xc8\x1e\xee\x57\x8b\x70\x7b\xf9\xec\x66\xbe\xcd\x30\x57\x6b\xac\xb5\xb7\x88\x0e\x26\x94\xfc\xfc\xc5\xd1\x56\xd6\xd3\xea\xdd\x8b\xe0\xff\xf2\x0f\x0b\x5b\x64\x9b\x01\x03\xfe\x25\x26\xb2\x0b\x62\x06\xe9\x06\x08\x32\x26\xb3\xdb\xd9\x33\xc3\xe3\x6a\xfd\x3c\xdb\xe4\xde\x8f\xb2\x98\x08\x1e\xa0\x6e\x55\xd5\x98\x37\x00\x6d\x88\x49\x5b\xa1\x50\x11\xad\x7e\x3c\xf7\x58\x60\x5a\x3f\x21\xd9\x76\x1a\x74\x4f\xd2\x6e\x41\x4f\x3b\x76\xda\xd6\x67\x67\x8c\x3c\xd1\x6e\x9d\xee\x03\x83\xa7\x73\xf6\xbb\xe6\x1f\x40\x90\x18\x9b\xb3\xda\x09\xca\x88\xac\x31\xda\x59\x84\x8e\x11\x9d\x53\x8c\x71\xcb\x92\x24\x7a\xd7\x31\x7e\xef\x78\x5d\x21\xd8\xd3\xa5\x3f\x72\xba\x03\xf1\x00\x95\xd5\x93\x12\x07\xad\x62\xfd\x88\xc5\xde\x4b\xd7\x1a\x11\x5d\xe1\xd3\x21\xbe\xcf\x2b\xb1\xb6\xd7\x7f\x7b\x86\xd0\x2e\x80\x3a\x7c\xbe\x1b\x38\x8d\xe5\x6a\xa6\xb6\xe5\x13\xc1\x21\xbc\x2c\xa2\x70\xb1\x82\x84\x98\x30\xbb\xac\x25\xf0\x1f\x42\xb4\xdb\x0d\xf7\x45\x33\x95\x8a\x35\xf3\xa2\xea\x1b\xd7\x66\x2a\xbe\x03\x9f\x6a\xfa\xe6\x6d\xa8\x24\x4f\xd6\x8a\x4f\x29\xaa\x6d\x9b\x19\xef\xc8\x06\x41\xa4\xf1\x1a\x55\x69\x8b\x3f\x9a\x74\x13\xa2\xa8\x35\xe0\x2d\x45\x64\xba\xb2\x5f\xb2\xa3\x54\x13\xb3\x76\x43\x9b\x9c\xc5\x30\x20\x69\x64\x56\xf0\xb4\xa4\x31\x2e\x78\x9c\xc6\x65\x53\x39\x0f\x01\x89\xb4\xd7\x5f\x4d\x3f\xbd\x97\x95\xa1\x7b\xbd\xfc\x95\xdc\x5a\xf5\x3b\x8e\x6a\xbb\x83\x55\xee\x44\xd6\x81\x1e\x64\xff\x17\x40\xcd\x87\x65\x9f\x0f\xee\x64\x48\xc3\x0b\xd7\xd6\xe1\x47\x9b\x92\x86\x77\xff\x3d\x2b\x6c\x38\xcf\x96\x46\xbb\x72\xa8\x57\x0c\x54\x71\x83\x8a\x93\xb9\x03\x9d\xde\x0a\x43\x6e\xed\x1c\x98\x90\xeb\x12\xcc\xc0\xcb\x5d\xaf\xe6\x31\x8f\x88\xb2\xb3\x63\x1a\x5d\x10\x2e\x6e\x42\x54\x78\x01\x34\x22\xa9\x46\xdb\x4a\x04\x9c\xff\xfd\xb5\x7b\xfc\x63\x8c\xc2\xcc\x0a\x45\xa9\xce\x4b\xb3\xd6\x55\x9d\xab\xb0\xfb\x4d\x20\xc6\x28\xbe\x4e\x0d\x6a\x58\x00\x95\x51\x1a\x8b\xba\x14\xa1\x54\xa6\xc2\xcc\xa1\x50\xf7\x4a\x2a\xc0\x5b\x12\x27\x11\xce\x80\x0b\x70\xc7\x66\xb2\x35\x54\x1c\xaf\xd1\x92\x62\xb5\xaf\xf6\x3b\x7c\x02\xa9\x46\x65\x95\x97\x2e\x1a\xa2\xdc\x7e\xd9\x09\x5c\xc6\xdb\xcb\xd5\xa4\xb8\x79\x79\x79\xa9\x3f\x45\x15\x2f\x7c\x67\x88\xf8\x15\xc2\x34\xde\xfe\x61\x5a\x15\x2d\xfb\x7d\xd8\x9d\x74\xa0\x44\x00\x89\xb4\x84\x35\xfa\x3d\x37\x32\x90\x36\xb0\xa2\xda\xa7\x2c\xf3\x03\x9c\xd4\xe9\xba\x80\x81\xf6\x84\x87\xae\x8c\x7b\x19\x48\xf9\x7c\x4d\xd4\xe5\xac\xd3\xa7\x6a\xdf\x0b\xcf\x95\xf3\x2b\xdc\xc2\x73\x98\x06\x52\x4e\x81\x08\xd6\x2a\x73\x4d\xa2\x14\xad\xd4\x9a\xa8\x8e\x59\xf8\xd9\x2f\x5f\x15\x59\x62\x6a\x2c\x49\x5f\x73\x86\x6c\x06\x52\x01\xf7\x32\x5e\x1b\xd7\x80\x71\x62\xb6\x33\xdb\x56\xbe\x40\xda\x59\x4b\x13\x12\xe3\x5a\xec\x82\x40\x48\x34\x24\xa8\x62\xae\x6d\xaa\x64\x27\x48\x23\xc2\x0d\x8f\x22\x58\x97\xeb\xec\xa3\x1b\xd9\x7c\x28\x97\x66\x47\xb1\xea\x21\x9a\x35\x3e\x40\x8c\xfa\xd5\x5d\x6f\xef\x3d\x4a\x73\xc5\xc3\x02\x75\x9d\x9a\xbd\x83\xb5\x11\xa6\x7b\x02\xb8\x58\x55\x77\xdb\xe3\x36\x0f\xb4\x01\xa1\x48\x34\x6d\x47\xdf\x5b\x75\xd8\x98\x70\x41\x04\xbb\x80\x80\x2b\x6d\x60\xb8\x11\x33\xdf\xe3\x4d\xaf\x4d\xf7\x15\x11\x42\x02\xde\x26\x11\xa7\xdc\x78\x17\x3c\x81\x39\xc4\xe7\xe4\x32\x18\xe8\xfe\x04\x61\x1d\xe7\xbe\xed\x7e\x60\x9e\x3a\x7b\xb4\xab\x26\xc4\x31\x39\xd3\x68\xfd\xb7\x9c\x97\x9f\x7c\xf6\xa3\xd9\x55\x5a\xe3\x4e\xa0\x02\xbc\xf2\xb7\x65\x60\x89\xe8\x4c\x1b\x95\x52\x93\x2a\xab\x51\xb8\xc4\xc9\x65\x9e\xda\xae\x06\x3c\x2b\xee\xfe\x30\x7f\xe6\xd4\xfe\x00\x42\x1a\xf7\xda\xa4\x54\xf8\x4c\x9b\x5c\xe8\x5b\x88\x91\x08\xed\x50\xe1\xe4\x9d\x42\x28\xd4\x14\x7d\x7e\xf2\x40\x5e\x79\x54\x13\x1a\xc2\x79\x85\x15\xad\xed\x1b\x34\xc0\xd9\xcc\xbd\xbc\x9b\x41\x12\x11\xf1\x0d\x67\xce\xc6\x2b\x2e\xd8\x13\xf7\xcb\x93\x27\x7c\x53\x0c\xa7\x9f\xd4\xd0\x55\xfc\x96\x34\x76\x0a\xeb\xd4\x7e\x76\x56\x42\xc7\x77\x7f\xce\xd9\xcc\x0d\x68\xc7\x9b\x73\xe6\xff\xb5\x03\xce\x32\xa2\xfe\xb6\xde\x0b\x0d\x0d\x5f\xbb\x3b\xcf\x6b\xb5\xfc\x72\xf0\x5e\xc0\xfc\x3f\x00\x00\xff\xff\xa8\x37\x11\xe1\x7f\x49\x00\x00")

func openapiYamlBytes() ([]byte, error) {
	return bindataRead(
		_openapiYaml,
		"openapi.yaml",
	)
}

func openapiYaml() (*asset, error) {
	bytes, err := openapiYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "openapi.yaml", size: 18815, mode: os.FileMode(493), modTime: time.Unix(1709642839, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"openapi.yaml": openapiYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"openapi.yaml": &bintree{openapiYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
