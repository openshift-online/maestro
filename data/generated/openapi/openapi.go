// Code generated for package openapi by go-bindata DO NOT EDIT. (@generated)
// sources:
// ../../openapi/openapi.yaml
package openapi

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _openapiYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x5f\x8f\xdb\xb8\x11\x7f\xdf\x4f\x31\x40\x5b\x38\x39\xec\xda\x4e\xef\x0a\xb4\x46\x72\x40\x72\xbd\x14\x77\xc8\x25\x69\x36\x69\x1f\x8a\xc2\x4b\x93\x23\x8b\x89\x44\x2a\x24\xb5\x59\xa7\xed\x77\x2f\x48\xea\xbf\x25\xad\xec\xf3\xc6\xca\x9e\xf3\x92\x35\x35\x1c\xce\x90\xbf\xf9\x69\x48\x8e\x2d\x13\x14\x24\xe1\x0b\xf8\x76\x3a\x9f\xce\xcf\xb8\x08\xe4\xe2\x0c\xc0\x70\x13\xe1\x02\x62\x82\xda\x28\x09\x97\xa8\xae\x39\x45\x78\xfa\xfa\xa7\x33\x00\x86\x9a\x2a\x9e\x18\x2e\x45\x97\xc8\x35\x2a\xed\x1e\xcf\xa7\xf3\xe9\xa3\x33\x8d\xca\xb6\x58\xcd\x17\x90\xaa\x68\x01\xa1\x31\xc9\x62\x36\x8b\x24\x25\x51\x28\xb5\x59\xfc\x79\x3e\x9f\x9f\x01\x34\xb4\xd3\x54\x29\x14\x06\x98\x8c\x09\x17\xf5\xee\x7a\x31\x9b\x91\x84\x4f\xad\x0b\x3a\xe4\x81\x99\x52\x19\x6f\xab\xf8\x85\x70\x01\x0f\x12\x25\x59\x4a\x6d\xcb\x43\xf0\xd6\xb4\x2b\xd3\x86\xac\xf1\x36\x95\x97\x86\xac\xb9\x58\xe7\x8a\x12\x62\x42\xe7\x9b\xd5\x30\xcb\x26\x64\x76\xfd\x68\xa6\x50\xcb\x54\x51\x74\x0f\x01\xd6\x68\xfc\x1f\x00\x3a\x8d\x63\xa2\x36\x0b\x78\x83\x26\x55\x42\x03\x81\x88\x6b\x03\x32\x80\xa2\x53\x2e\x8a\x34\x55\xdc\x6c\xf2\xae\xd6\xec\x67\x48\x14\xaa\x05\xfc\xeb\xdf\x59\xa3\x42\x9d\x48\xa1\xf3\x91\xec\xbf\xc9\x1f\xe7\xf3\x49\xf9\xb1\xe1\xc2\x53\xf8\xf9\xf2\xd5\x4b\x20\x4a\x91\x4d\x75\x54\x90\xab\xf7\x48\x8d\xae\xf4\xa3\x52\x18\x14\xa6\xaa\x0a\x80\x24\x49\xc4\x29\xb1\xca\x66\xef\xb5\x14\xf5\xa7\x00\x9a\x86\x18\x93\x66\x2b\xc0\xef\x15\x06\x0b\x98\xfc\x6e\x46\x65\x9c\x48\x81\xc2\xe8\x99\x97\xd5\xb3\x37\x99\x0d\x2f\xb8\x36\x93\xd2\x8f\xef\xe6\x8f\x7a\xfc\x48\x4d\x08\x46\x7e\x40\x01\x5c\x03\x17\xd7\x24\xe2\xec\x18\xc6\xff\xa8\x94\x54\x35\xab\xbf\xed\xb6\xfa\x9d\x20\xa9\x09\xa5\xe2\x9f\x91\x81\x91\x90\xa0\x0a\xa4\x8a\x41\x26\xa8\x9c\x59\x63\xf0\xe0\x4f\x7d\xf8\x79\x27\xf0\x26\x41\x6a\x90\x01\xda\x7e\x20\xa9\x8b\xd5\xe3\xcf\x7d\x42\x14\x89\xd1\x64\x74\x03\x2e\x5e\xda\x3a\x97\x72\xb3\x84\xac\x71\x32\x54\x58\xf3\xcf\x3b\x08\x23\x51\x34\x1c\x2c\x2e\x15\x43\xf5\x6c\x33\x58\x3e\xe0\x18\x31\xed\xc5\x13\xcb\xa2\x4d\x7a\xf9\x41\x21\x31\x08\x04\x04\x7e\x2a\x62\x7c\x37\x62\xf9\x98\xa2\x36\xcf\x24\xab\xc8\xd5\x90\x90\x47\x2d\x30\x62\x48\x21\x62\xfb\x71\x85\x6c\x01\x46\xa5\x78\xd6\x03\x89\x7e\x40\xb4\xc3\x61\x08\x8b\x4c\x7a\xa9\xb1\x87\x52\xfc\x9c\x1d\x05\xc8\x4d\xdb\x1d\x8f\xf4\x44\xe1\x3f\x2c\xdb\x39\x13\x7c\x14\xea\xf1\x84\xe1\x89\xb8\x8f\xe8\xc1\x5f\xba\x3d\x28\xc2\x95\x44\x0a\x09\xdb\x00\xde\x70\x7d\x9c\xf7\xfd\x4e\x2f\x9c\xa7\x02\xd2\xae\x77\x0e\x50\x1b\xb2\x36\x23\x33\x21\x36\x69\xee\x38\x2e\x75\xa6\x82\xb3\xff\x70\xf6\xbf\xee\x7c\xf0\x6f\x68\x80\x88\x32\x1d\x5b\x6d\xa0\x08\x8b\xbb\xc9\x04\x0b\x40\x04\x32\x15\xac\x36\xe0\x17\x9d\xba\x56\xee\x3b\x11\xc8\x71\x3c\xf8\xae\xdb\x83\x97\xb2\x44\xe7\x27\x6e\x42\xd0\x09\x52\x1e\x70\x64\xc0\xd9\xd7\xc2\x26\x63\x4d\x5f\x13\x62\x68\xb8\x45\x0a\xef\x12\xe6\xb2\x38\x71\x47\x29\x9c\xd7\xcf\xca\x75\x1d\x59\x2a\xf7\xda\xce\xca\x1b\xef\x46\x7f\x5a\x37\x84\xe7\xd2\xcc\x5b\x9d\x52\x8a\x5a\x07\x69\x14\x6d\x46\x43\x78\xa7\x64\xef\x0b\x5b\x7d\xe2\xea\x51\x38\x71\x0f\x33\xd6\xad\x77\x8c\x23\x1e\x9b\xa5\x8e\x22\x43\xb5\xd6\x46\x68\x70\xeb\x6d\xf3\x57\xd7\x0c\x64\xcf\x97\x4d\x1b\x2d\xf7\x40\xb4\x3c\x3e\x70\xc3\x76\xd0\xf2\x89\x19\xbf\xbc\xd5\x27\x66\x1c\x81\x13\xbb\x31\x8c\x8b\xa1\x11\x31\x4c\xf3\x2c\xf6\xd6\x03\x4d\xce\xfa\x36\xcf\x17\xab\x54\xb0\x68\xbf\xeb\x14\xc8\xfa\xde\xe9\x5e\xba\xf3\x56\xc5\x0f\x3e\x86\xcb\x95\x67\xce\x92\xd3\x15\xcb\x28\x28\xea\xab\xdc\xa3\xfe\x56\xaf\x58\x6e\x63\xa5\x5d\x4f\xf6\x3c\x25\x7c\xc1\x03\xbe\x6c\xc4\x91\x9c\xf3\x79\x22\x3a\x91\xd0\x08\x3c\x18\x98\x27\x65\xf8\xb9\x3f\xe9\xd2\xd7\x4c\xa8\xed\x99\x12\x95\x42\xa7\x71\xa1\x67\x58\x8a\x54\x74\xfa\xa2\xb9\x51\x3e\xea\x31\x93\xa2\x1f\x32\x1b\x4e\xe9\xd0\x28\x98\xe8\xde\x44\xef\x8e\x09\xd1\x8e\x29\xd1\xce\x49\xd1\xee\x69\xd1\xc1\x6b\x4f\xf2\x68\xdf\x8d\x62\x6e\xbb\xb8\xc8\xe3\x77\x2c\x17\x16\xb9\x3d\x5f\x63\xed\x49\xd3\xf6\xd3\xa1\xdb\x89\xc2\xf7\xf1\xa0\xe7\x24\xbf\x08\xd7\xaf\xec\x24\x7f\x78\xed\x49\x83\xe6\x8e\xe3\x52\x67\x52\x38\x6c\x87\x5a\x24\x66\x77\xbf\x35\x2d\x00\x71\xe4\x3d\x69\x2b\xf7\x9d\x08\x64\x8c\xbb\xd1\x02\x9d\xa7\x6d\xe8\xc1\x0f\xeb\xfb\x6b\x4f\xee\x26\x85\xcb\x6b\x4f\xe8\x48\x53\xb9\x83\xd4\x9e\x14\x3c\x37\x96\xda\x93\x53\xb2\x37\x06\xab\x4f\x5c\x3d\x0a\x27\xee\x61\xc6\xda\x5d\x7b\x32\x8a\x0c\xf5\xf6\xda\x93\xfd\x5e\x36\x3b\xd6\x9e\x94\xc7\x07\xa7\xda\x93\x13\x33\x1e\xd6\x83\x7b\xc0\x8c\x7b\xd6\x9e\x8c\x84\x61\xf6\xbc\x53\x29\x9f\xd8\x6e\x39\xef\x5c\x5a\xfd\x39\xb1\x64\xc4\x93\x69\x35\x9b\x04\xfd\x77\x88\xcf\x2a\x76\xe3\x02\x56\x4e\x2c\x6b\xf4\x1f\x9e\x4b\x15\x13\xb3\x80\x9f\xff\xf9\xf6\x2c\x77\x30\x53\xfa\xca\xdd\x82\xbc\xc1\x00\x15\x0a\x8a\x75\xed\xfe\x8a\x24\x6b\x4a\x94\x85\xba\xe1\x55\x9e\xe3\xac\x3a\x4f\xbe\x93\x36\x8a\x8b\x75\xd1\xfc\x81\x8b\xdb\x85\x42\x3b\x41\x7d\x42\x2f\x78\x79\xd2\x3b\xd0\xb6\x41\x03\x27\x64\x8d\xdb\x42\x5c\x18\x5c\x57\x90\xa4\xf9\xe7\x01\x52\x46\x1a\x12\xdd\x26\x56\xec\x2c\x2a\x6f\x14\x6b\x69\xe5\xa3\xb5\xa9\xf2\xd1\x0e\x5e\xf9\xe8\x46\xa9\x7c\xe6\x06\x63\x1f\xb6\x0e\x84\xb9\x5e\x12\x45\xaf\x82\x7e\x04\xe6\xe0\x6d\x40\xa0\x2c\x51\x68\x99\xe8\xf6\xa9\xb6\x91\xc6\xb0\x1e\x32\xad\xd3\x6d\xfd\x27\x5b\x31\xd7\x21\x5a\x30\xeb\xb2\x0e\xb3\x96\x0e\xce\xf5\x2a\x46\x76\x70\xbf\x7a\x09\xb7\x93\xcf\x6e\xe6\xdb\x0c\x73\x77\x8d\xb5\xf6\x16\xd1\xc1\x84\x92\x17\x2e\x1c\x69\x65\x05\x89\x87\xad\x6c\xce\xbf\xcb\xc1\x3d\xf2\x5f\x6b\x68\x91\x6d\xc6\x16\xf8\xf3\x4e\x64\x4b\x62\x06\xe9\x06\x08\x32\xd2\xb3\x3b\xdf\x0b\xc3\xe3\x6a\x51\x62\xb6\x1f\x3e\x8c\xb2\x2c\x8b\x3b\x8c\xb2\x98\x08\x1e\xa0\x6e\x55\xd5\x58\xaf\x7c\xe4\xa5\xf4\xef\xc6\x21\x3d\xbc\xe3\x4b\x6d\x14\x31\xb8\xde\x0c\xea\xa3\x0d\x31\x69\x2b\xd0\x2b\xa2\xd5\x1f\x51\xb8\x2f\x41\x58\xff\xa6\x4c\xdb\xb7\x82\x76\x7c\x25\xb5\x00\xbe\x1d\xee\x6d\x28\x68\x9d\x94\x4e\x04\xb4\x4a\xf7\xac\x7e\xe7\x82\x96\x85\x9b\xf7\x6d\x59\xab\x95\x60\xf5\xb6\x13\xd5\xfe\x26\xa8\x16\x0d\x61\xc4\x90\x41\x24\x98\x47\xe4\xaf\x01\xe5\xc1\x58\x3c\x37\x66\x49\xa5\x08\xf8\xfa\x0e\x6c\x1a\xc4\xf9\xf9\x39\x46\x6b\xb8\xec\x19\x30\x9d\x21\xd3\x15\x34\x6d\x61\xd3\x03\x88\x88\xac\x30\x1a\x3a\x0b\xce\x29\xc6\xb8\x5d\x18\x12\xbd\xee\x18\xbf\x77\xbc\xae\x58\xea\xe9\xd2\x8f\xda\xee\x88\xda\x43\x65\xb5\x10\x6d\xaf\x55\xac\x57\xb0\xed\xbc\x74\x3d\x90\xdc\xc6\x6f\x87\xf8\x2e\x37\x0e\x6d\xb7\x2b\x3b\xbe\xc3\xb7\x01\xd4\xe1\xf3\xed\xc0\x69\x2c\x57\xf3\xe4\xa0\xdc\xf5\x38\x84\x97\x77\xd4\x5c\x2c\x20\x21\x26\xcc\x3e\xd6\xce\x47\xde\x86\x08\x9c\xf9\x2f\x81\x50\xa9\xf2\x2e\xad\x17\x5a\xcd\x93\x8e\x2d\xf8\x54\x77\xc7\xde\x86\xca\xde\xd4\x5a\xf1\x31\x45\xb5\x69\x33\xe3\x35\x59\x23\x88\x34\x5e\xa1\x2a\x6d\xf1\x95\x9f\x9f\x42\x14\xb5\x06\xbc\xa1\x88\x4c\x57\x8e\xa3\xec\x28\xd5\x7d\x6f\xbb\xa1\xcd\x17\x17\xc3\x80\xa4\x91\x59\xc0\xa3\x32\x8f\xe2\x82\xc7\x69\x5c\x36\x95\xf3\x10\x90\x48\x7b\xfd\xd5\xdd\xbd\xf7\xb2\x32\x74\xaf\x97\xbf\x90\x1b\xab\x7e\xcb\x51\x0d\x46\x82\x72\x05\xaf\x7b\x7a\x90\xfd\x28\x5d\xcd\x87\x79\x9f\x0f\xae\xf0\xae\xe1\x85\x6b\xeb\xf0\xa3\x4d\x49\xc3\xbb\xff\x5e\x14\x36\x5c\x66\x4b\xa3\x5d\xb5\x89\x57\x0c\x54\x71\x83\x8a\x93\xa9\x03\x9d\xde\x08\x43\x6e\xec\x1c\x98\x90\xeb\x12\xcc\xc0\xcb\x43\x45\xcd\x63\x1e\x11\x65\x67\xc7\x34\xba\x20\x2c\x3f\x85\xa8\x70\x09\x34\x22\xa9\x46\xdb\x4a\x04\x5c\xfe\xfd\x85\x7b\x17\x61\x8c\xc2\x9c\x97\x89\xac\xce\x2b\x5f\xac\xab\x3a\x57\xf1\x5e\x4b\x01\xc4\x18\xc5\x57\xa9\x41\x0d\x33\xa0\x32\x4a\x63\x51\x97\x22\x94\xca\x54\x98\x29\x14\xea\x9e\x4b\x05\x78\x43\xe2\x24\xc2\x73\xe0\x02\x5c\x55\x62\xb6\x86\x8a\xe3\x35\x5a\x52\xac\xf6\xd5\xfe\x00\x95\x40\xaa\x51\x59\xe5\xa5\x8b\x86\x28\x77\x1c\xe9\x04\xae\xe2\xcd\xd5\xe2\xac\x78\x78\x75\x75\xa5\x3f\x46\x15\x2f\x7c\x67\x88\xf8\x07\x84\x49\xbc\xf9\xc3\xa4\x2a\x5a\xf6\x7b\xbb\x3d\xe9\x40\x89\x00\x12\x69\x09\x2b\xf4\x47\x9a\xc8\x40\xda\xc0\x8a\x6a\xbf\xa9\x30\xdd\xc3\x49\x9d\xae\x0a\x18\x68\x4f\x78\xe8\xaa\x64\xae\x02\x29\x9f\xac\x88\xba\x3a\xef\xf4\xa9\xda\x77\xe9\xb9\x72\xfa\x01\x37\xf0\x04\x26\x81\x94\x13\x20\x82\xb5\xca\x5c\x93\x28\x45\x2b\xb5\x22\xaa\x63\x16\x7e\xf2\xcb\x57\x45\x96\x98\x18\x4b\xd2\xd7\x9c\x21\x3b\x07\xa9\x80\x7b\x19\xaf\x8d\x6b\xc0\x38\x31\x9b\x73\xdb\x56\x9e\xcf\x6f\xad\xa5\x09\x89\x71\x2d\x76\x41\x20\x24\x1a\x12\x54\x31\xd7\x36\x63\xb6\x13\xa4\x11\xe1\x13\x8f\x22\x58\x95\xeb\xec\xa3\x1b\xd9\x74\x28\x97\x66\x95\xae\xf5\x10\xcd\x1a\xef\x20\x46\xfd\xea\xae\x36\x07\x8f\xd2\x5c\xf1\xb0\x40\x5d\xa5\x66\xe7\x60\x6d\x84\xe9\x8e\x00\x2e\x56\xd5\x3d\xf6\xb8\xcd\x03\x6d\x40\x28\x12\x4d\xdb\xd1\xf7\x4a\xed\x37\x26\x2c\x89\x60\x4b\x08\xb8\xd2\x06\x86\x1b\x71\xee\x7b\xbc\xec\xb5\xe9\x50\x11\x21\x24\xe0\x4d\x12\x71\xca\x8d\x77\xc1\x13\x98\x43\x7c\x4e\x2e\x83\x81\xee\x0b\xb4\xeb\x38\xf7\x6d\x87\x81\x79\xea\xec\xd1\xee\xb2\x36\x8e\xc9\x85\x46\xeb\xbf\xe5\xbc\xfc\x8b\x25\x7e\x34\xbb\x4a\x2b\xdc\x0a\x54\x80\xe7\xfe\xb1\x0c\x2c\x11\x5d\x68\xa3\x52\x6a\x52\x65\x35\x0a\x97\x38\xb9\xcc\x53\xdb\xd5\x80\xc7\xc5\xd3\xef\xa7\x8f\x9d\xda\xef\x41\x48\xe3\x4e\xa5\x4b\x85\x8f\xb5\xc9\x85\xbe\x81\x18\x89\xd0\x0e\x15\x4e\xde\x29\x84\x42\x4d\xd1\xe7\x47\x0f\xe4\x85\x47\x35\xa1\x21\x5c\x56\x58\xd1\xda\xbe\x46\x03\x9c\x9d\xbb\xbb\x91\x73\x48\x22\x22\x1e\x70\xe6\x6c\xfc\xc0\x05\x7b\xe8\xfe\xf2\xe4\x09\x0f\x8a\xe1\xf4\xc3\x1a\xba\x8a\xbf\x25\x8d\x9d\xc2\x3a\xb5\x5f\x5c\x94\xd0\xf1\xdd\x9f\x70\x76\xee\x06\xb4\xe3\x4d\x39\xf3\xff\xdb\x01\xcf\x33\xa2\xfe\xa6\xde\x0b\x0d\x0d\x5f\xb8\x27\x4f\x6a\xa5\x52\xe5\xe0\xbd\x80\xf9\x7f\x00\x00\x00\xff\xff\x20\x8c\x16\x92\x08\x58\x00\x00")

func openapiYamlBytes() ([]byte, error) {
	return bindataRead(
		_openapiYaml,
		"openapi.yaml",
	)
}

func openapiYaml() (*asset, error) {
	bytes, err := openapiYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "openapi.yaml", size: 22536, mode: os.FileMode(493), modTime: time.Unix(1718269774, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"openapi.yaml": openapiYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"openapi.yaml": &bintree{openapiYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
