// Code generated for package openapi by go-bindata DO NOT EDIT. (@generated)
// sources:
// ../../openapi/openapi.yaml
package openapi

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _openapiYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x5f\x8f\x1b\xb9\x0d\x7f\xf7\xa7\x20\xd0\x16\x4e\x0e\x5e\xdb\xe9\x5d\x81\xd6\x48\x0e\x48\x0e\x97\xe2\x0e\xb9\x24\xcd\x26\xed\x43\x51\xec\xca\x12\xc7\xa3\xcb\x8c\x34\x91\x38\x9b\x75\xda\x7e\xf7\x83\xa4\xf9\xef\x19\xaf\xbd\xd8\x3d\x7b\x03\xe7\x25\x1e\x0d\x49\x91\x14\xc9\xf9\x89\xd2\xea\x0c\x15\xcb\xe4\x02\xbe\x9d\xce\xa7\xf3\x91\x54\x91\x5e\x8c\x00\x48\x52\x82\x0b\x48\x19\x5a\x32\x1a\xce\xd1\x5c\x49\x8e\xf0\xfc\xed\x4f\x23\x00\x81\x96\x1b\x99\x91\xd4\x6a\x88\xe4\x0a\x8d\xf5\xaf\xe7\xd3\xf9\xf4\xc9\xc8\xa2\x71\x23\x4e\xf2\x19\xe4\x26\x59\x40\x4c\x94\x2d\x66\xb3\x44\x73\x96\xc4\xda\xd2\xe2\xaf\xf3\xf9\x7c\x04\xd0\x91\xce\x73\x63\x50\x11\x08\x9d\x32\xa9\xda\xec\x76\x31\x9b\xb1\x4c\x4e\x9d\x09\x36\x96\x11\x4d\xb9\x4e\x37\x45\xfc\xc2\xa4\x82\x47\x99\xd1\x22\xe7\x6e\xe4\x31\x04\x6d\xfa\x85\x59\x62\x2b\xbc\x49\xe4\x39\xb1\x95\x54\xab\x52\x50\xc6\x28\xf6\xb6\x39\x09\xb3\xc2\x21\xb3\xab\x27\x33\x83\x56\xe7\x86\xa3\x7f\x09\xb0\x42\x0a\x3f\x00\x6c\x9e\xa6\xcc\xac\x17\xf0\x0e\x29\x37\xca\x02\x83\x44\x5a\x02\x1d\x41\xc5\x54\x92\x22\xcf\x8d\xa4\x75\xc9\xea\xd4\x7e\x81\xcc\xa0\x59\xc0\xbf\xff\x53\x0c\x1a\xb4\x99\x56\xb6\x9c\xc9\xfd\x1b\xff\x79\x3e\x1f\xd7\x8f\x1d\x13\x9e\xc3\xcf\xe7\x6f\x5e\x03\x33\x86\xad\x9b\xb3\x82\x5e\xfe\x8a\x9c\x6c\x83\x8f\x6b\x45\xa8\xa8\x29\x0a\x80\x65\x59\x22\x39\x73\xc2\x66\xbf\x5a\xad\xda\x6f\x01\x2c\x8f\x31\x65\xdd\x51\x80\x3f\x1a\x8c\x16\x30\xfe\xc3\x8c\xeb\x34\xd3\x0a\x15\xd9\x59\xa0\xb5\xb3\x77\x85\x0e\xaf\xa4\xa5\x71\x6d\xc7\x77\xf3\x27\x5b\xec\xc8\x29\x06\xd2\x1f\x51\x81\xb4\x20\xd5\x15\x4b\xa4\x38\x84\xf2\x3f\x1a\xa3\x4d\x4b\xeb\x6f\x87\xb5\xfe\xa0\x58\x4e\xb1\x36\xf2\x0b\x0a\x20\x0d\x19\x9a\x48\x9b\x14\x74\x86\xc6\xab\x75\x0c\x16\xfc\x65\x5b\xfc\x7c\x50\x78\x9d\x21\x27\x14\x80\x8e\x0f\x34\xf7\xb9\x7a\x78\xdf\x67\xcc\xb0\x14\xa9\x28\x37\xe0\xf3\xa5\x8f\xb9\xa6\x9b\x65\x6c\x85\xe3\x5d\x89\xad\xfc\xb2\x07\x31\x32\xc3\xe3\x9d\xc9\xb5\x11\x68\x5e\xac\x77\xa6\x8f\x24\x26\xc2\x06\xf2\xcc\x55\xd1\x6e\x79\xf9\xc1\x20\x23\x04\x06\x0a\x3f\x57\x39\xbe\x5f\x61\xf9\x94\xa3\xa5\x17\x5a\x34\xe8\x5a\x91\x50\x66\x2d\x08\x46\xac\x22\x71\x7c\xd2\xa0\x58\x00\x99\x1c\x47\x5b\x42\x62\x7b\x40\xf4\x87\xc3\x2e\x55\x64\xbc\xb5\x34\x6e\x29\x29\xc1\x67\x07\x09\xe4\xae\xee\xbe\x8e\x6c\xc9\xc2\x7f\xba\x6a\xe7\x55\x08\x59\x68\x8f\x27\x0d\x4f\x85\xfb\x80\x16\xfc\x6d\xd8\x82\x2a\x5d\x59\x62\x90\x89\x35\xe0\xb5\xb4\x87\xf9\xde\xef\xf5\xc1\x79\xae\x20\x1f\xfa\xe6\x00\x77\x29\xeb\x10\x19\xc5\xd8\x2d\x73\x87\x31\x69\x10\x0a\xce\xfe\x2b\xc5\xff\x87\xf1\xe0\xdf\x91\x80\xa9\x1a\x8e\x2d\xd7\x50\xa5\xc5\xfd\x20\xc1\x2a\x20\x22\x9d\x2b\xd1\x9a\xf0\x77\x75\x5d\x6f\xed\x3b\x15\x90\xc3\x58\xf0\xdd\xb0\x05\xaf\x75\x1d\x9d\x9f\x25\xc5\x60\x33\xe4\x32\x92\x28\x40\x8a\x87\x52\x4d\x8e\x15\xbe\x66\x8c\x78\xbc\x51\x14\x3e\x64\xc2\xa3\x38\x75\x4f\x10\x2e\xc8\x17\xf5\xba\x1e\x19\x94\x7b\xeb\xbc\xf2\x2e\x98\xb1\x1d\xd6\xed\x52\xe7\xf2\xc2\x5a\x9b\x73\x8e\xd6\x46\x79\x92\xac\x8f\xa6\xe0\x9d\xc0\xde\xef\xac\xf5\xa9\x56\x1f\x85\x11\x5f\x21\x62\xdd\xf8\xc6\xf8\xc2\xe3\x50\xea\x51\x20\xd4\xcd\x4e\xc9\x8d\xed\x06\x29\xfa\xa0\x2d\xd7\xca\xe6\x69\x25\x65\xb7\x2e\x67\xc5\x74\xaf\xd8\xb6\xdb\xe5\x2c\x67\x3d\x64\x97\xf3\x87\x42\x87\x53\x97\xf3\x28\xea\xe7\x83\x84\x89\x7d\x5d\xce\x3d\xfb\x9c\x7b\x76\x3a\xf7\xee\x75\xee\xdf\xed\xbc\xf3\x7e\x67\x99\xed\x77\x0b\x96\xcb\xfc\x3d\x16\x90\x5c\xea\xf3\x10\xfb\x9d\x5d\xdd\x4f\x10\xf8\x54\xc2\x6f\x63\xc1\x16\xf4\x58\xa5\xeb\x03\x43\x8f\xbb\xf7\x3b\x3b\x65\xee\x30\x26\x0d\x82\xc2\xdd\xfa\x9d\x15\x30\xbb\xff\x7e\x67\x15\x10\x07\xee\x77\xf6\xd6\xbe\x53\x01\x39\xc6\x3d\x74\x15\x9d\xc7\xbc\x87\x7e\x90\x40\xf6\xa6\x7e\xe7\xfd\x40\xb8\xb2\xdf\xc9\x8f\x14\xca\xdd\x49\xbf\xb3\xaa\x73\xc7\xd2\xef\x3c\x81\xbd\x63\xd0\xfa\x54\xab\x8f\xc2\x88\xaf\x10\xb1\x0e\xf7\x3b\x8f\x02\xa1\xde\xea\x66\x98\x14\xe3\x51\xfd\xc6\xb1\x95\x9f\xa0\x73\x27\xbf\xac\xc6\xc5\x37\xa8\x90\x4a\xeb\x0c\xc3\xad\xd2\x51\x43\x6f\x5c\xc0\xd2\x93\x15\x83\xe1\xe1\xa5\x36\x29\xa3\x05\xfc\xfc\xaf\xf7\xa3\xd2\xc0\x42\xe8\x1b\xdf\xa3\x7c\x87\x11\x1a\x54\x1c\xdb\xd2\x43\x03\xb3\x18\xca\x8c\x4b\x51\x92\xcd\x8f\x83\x14\x4d\x3f\x05\x26\x4b\x46\xaa\x55\x35\xfc\x51\xaa\x9b\x89\x62\xe7\xa0\x6d\x44\xaf\x64\xdd\x87\xd9\x51\xb7\x9d\x26\xce\xd8\x0a\x37\x89\xa4\x22\x5c\x35\x22\xc9\xca\x2f\x3b\x50\x91\x26\x96\xdc\x44\x56\x7d\xf7\x1b\xe0\xc2\x69\xda\x78\x74\x3a\x35\x1e\xdd\xe4\x8d\x47\x3f\x4b\xe3\x59\x12\xa6\x21\x6d\x7d\x10\x96\x72\x59\x92\xbc\x89\xb6\x47\x60\x19\xbc\x9d\x10\xa8\xef\x05\xf6\x38\xba\xdf\xd5\x2e\xd3\x04\xb6\x53\xa6\xd7\xdd\xce\x7e\xb6\x91\x73\x03\xa4\xd5\x17\xe1\xa2\x1d\x66\x3d\x0c\xde\xf4\x66\x8c\xec\x61\x7e\xb3\x45\xbe\x97\xcd\xde\xf3\x7d\x8a\xf9\x93\x80\xd6\x78\x0f\xe9\xce\x05\xa5\x3c\x99\x3a\xd8\xca\x86\xb2\x7a\xf3\x22\x84\x7f\xe5\xa5\xfc\x1e\xda\x6e\xc2\x40\x68\x31\xa0\xb8\x60\xb4\x93\x6c\x80\xa8\xa8\x64\x0e\x6c\x9e\x91\x4c\x9b\xa7\x5b\x05\x04\xbd\x1b\x61\x29\x53\x32\x42\xdb\x2b\xaa\xe3\x37\x00\x4b\x8c\xf2\xde\x50\x68\x90\x36\x2f\x9e\x7f\x2d\x61\xda\xbe\x5d\xd0\x77\x93\x62\xcf\xa2\xdd\x13\x3d\xfd\xb1\xd3\xb7\x3e\x1b\x73\x94\x20\xa7\xd7\xdd\xb7\x4c\x9e\x41\xef\x0f\xf9\x1f\x40\xb1\x14\xbb\x5e\x1d\x0c\xca\xa1\x94\xd8\xc2\xb2\x3d\x92\x87\x13\xe3\x16\x22\x9b\xe7\x8a\xb7\xf2\x6a\xfb\x40\x72\x6f\x57\xf6\x46\xe8\x50\x38\x0f\x90\xef\xb3\x81\xec\xdb\x2c\xef\x19\xd2\xdd\xd5\xef\xf8\xbc\x8b\x17\xeb\x32\xeb\x19\xeb\xbe\xa1\x54\x0b\xc8\x18\xc5\xc5\x63\x0b\x15\xbf\x8f\xd1\xed\x3d\xfc\x9f\xd8\x70\x6d\x44\x17\x6c\x34\x9b\x0c\x5d\x7c\xbb\x11\x03\x4d\x4c\x14\x74\x68\x20\x12\xa7\xc5\xa7\x1c\xcd\xba\x4f\x8d\xb7\x6c\x85\xa0\xf2\x74\x89\xa6\xd6\x25\x9c\xc6\x7f\x8e\x51\xb5\x06\xf0\x9a\x23\x0a\xdb\xd8\x3c\xb9\x59\x9a\x68\xa7\x5f\xd1\x6e\x21\x10\x18\xb1\x3c\xa1\x05\x3c\xa9\x6b\x83\x54\x32\xcd\xd3\x7a\xa8\xf6\x43\xc4\x12\x1b\xe4\x37\x31\x5d\xb0\xb2\x31\xf5\x56\x2b\x7f\x61\xd7\x4e\xfc\x86\xa1\xd6\x6d\x67\x8d\xbf\x84\x70\x4b\x0b\x8a\x3f\x4e\x6b\xd9\x30\xdf\x66\x83\x3f\x0c\xed\x58\xe1\xc7\x06\xec\xe8\x13\xd2\xb1\xee\x7f\x67\x95\x0e\xe7\xc5\xd2\x58\x7f\x02\x10\x04\x03\x37\x92\xd0\x48\x36\xf5\x41\x67\xd7\x8a\xd8\xb5\xf3\x01\xc5\xd2\xd6\xc1\x0c\xd2\x36\xd0\x73\x2a\x13\x66\x9c\x77\xa8\xc3\x82\x70\xf1\x39\x46\x83\x17\xc0\x13\x96\x5b\x74\xa3\x4c\xc1\xf9\x3f\x5e\xf9\x6f\x2a\xa6\xa8\x68\x52\x09\xca\x6d\x79\x1a\xe1\x4c\xb5\xa5\x08\xb7\x89\x03\x46\x64\xe4\x32\x27\xb4\x30\x03\xae\x93\x3c\x55\x6d\x2a\xc6\xb9\xce\x15\x4d\xa1\x12\xf7\x52\x1b\xc0\x6b\x96\x66\x09\x4e\x40\x2a\xf0\x27\xc5\xc5\x1a\x1a\x89\x57\xe8\x2a\x5b\x93\xd7\x86\xed\x3e\x83\xdc\xa2\x71\xc2\x6b\x13\x89\x19\xbf\x09\xf5\x04\x97\xe9\xfa\x72\x31\xaa\x5e\x5e\x5e\x5e\xda\x4f\x49\xc3\x8a\xc0\x0c\x89\xfc\x88\x30\x4e\xd7\x7f\x1a\x37\x49\x6b\xbe\xf7\x9b\x4e\x07\xce\x14\xb0\xc4\x6a\x58\x62\xd8\xc8\xa2\x00\xed\x12\x2b\x69\xdd\xad\x9c\xde\xc2\x48\x9b\x2f\xab\x30\xb0\x90\xb0\x25\x26\xe8\x4f\x2e\x2e\x23\xad\x9f\x2d\x99\xb9\x9c\x0c\xda\xd4\xe4\xbd\xf0\xac\x76\xfa\x11\xd7\xf0\x0c\xc6\x91\xd6\x63\x60\x4a\xf4\xd2\x5c\xb1\x24\x47\x47\xb5\x64\x66\xc0\x0b\x3f\x85\xe5\x6b\x46\x96\x1a\x93\xab\xb4\x57\x52\xa0\x98\x80\x36\x20\x03\x4d\x90\x26\x2d\x60\x9a\xd1\x7a\xe2\xc6\xea\x6e\xd2\xc6\x5a\x52\xcc\xc8\x8f\xb8\x05\x81\x98\x59\xc8\xd0\xa4\xd2\x3a\xfc\xe1\x1c\x64\x11\xe1\xb3\x4c\x12\x58\xd6\xeb\x1c\xb2\x1b\xc5\x74\xd7\x5a\x5a\xdc\x3e\x68\xa7\x68\x31\x78\x0f\x39\x1a\x56\x77\xb9\xbe\xf3\x2c\x2d\x05\xef\x96\xa8\xcb\x9c\xf6\x4e\xd6\x4e\x9a\xee\x19\xc0\xd5\xaa\xfa\xd7\x21\x6e\xcb\x44\xdb\x21\x15\x99\xe5\xfd\xd1\xf7\xc6\xdc\x6e\x4e\xb8\x60\x4a\x5c\x40\x24\x8d\x25\xd8\x5d\x89\x49\xe0\x78\xbd\x55\xa7\xbb\xca\x08\xa5\x01\xaf\xb3\x44\x72\x49\xc1\x84\x50\xc0\x7c\xc4\x97\xc5\x65\xe7\x40\x0f\x97\x66\xda\x71\x1e\xc6\xee\x26\xcc\x73\xaf\x8f\x05\x06\x5c\xa7\x29\x3b\xb3\xe8\xec\x77\x35\xaf\xbc\xec\x17\x66\x73\xab\xb4\xc4\x8d\x44\x05\x78\x19\x5e\xeb\xc8\x15\xa2\x33\x4b\x26\xe7\x94\x1b\x27\x51\x79\xe0\xe4\xe1\xa3\x75\xab\x01\x4f\xab\xb7\xdf\x4f\x9f\x7a\xb1\xdf\x83\xd2\xe4\x7b\x11\xb5\xc0\xa7\x96\x4a\xa2\x6f\x20\x45\xa6\xac\x8f\x0a\x4f\xef\x05\x42\x25\xa6\xe2\xf9\x31\x04\xf2\x22\x44\x35\xe3\x31\x9c\x37\xaa\xa2\xd3\x7d\x85\x04\x52\x4c\x7c\x47\x6c\x02\x59\xc2\xd4\x23\x29\xbc\x8e\x1f\xa5\x12\x8f\xfd\xaf\x50\x3c\xe1\x51\x35\x9d\x7d\xdc\x8a\xae\xea\xb7\xe6\xa9\x17\xd8\x2e\xed\x67\x67\x75\xe8\x04\xf6\x67\x52\x4c\xfc\x84\x6e\xbe\xa9\x14\xe1\x7f\x37\xe1\xa4\x28\xd4\xdf\xb4\xb9\x90\x78\xfc\xca\xbf\x79\xd6\x3a\xbe\xaa\x27\xdf\x1a\x30\xbf\x05\x00\x00\xff\xff\x7c\xde\xf2\x90\x10\x40\x00\x00")

func openapiYamlBytes() ([]byte, error) {
	return bindataRead(
		_openapiYaml,
		"openapi.yaml",
	)
}

func openapiYaml() (*asset, error) {
	bytes, err := openapiYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "openapi.yaml", size: 16400, mode: os.FileMode(493), modTime: time.Unix(1701052143, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"openapi.yaml": openapiYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"openapi.yaml": &bintree{openapiYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
