// Code generated for package openapi by go-bindata DO NOT EDIT. (@generated)
// sources:
// ../../openapi/openapi.yaml
package openapi

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _openapiYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x5f\x8f\xdb\xb8\x11\x7f\xf7\xa7\x18\xa0\x2d\x7c\x39\x78\x6d\xa7\x77\x05\x5a\x23\x39\x20\xb9\x5e\x8a\x3b\xe4\x92\x34\x9b\xb4\x0f\x45\xb1\x4b\x93\x23\x8b\xb7\x12\xa9\x90\xd4\xee\x3a\x6d\xbf\x7b\x41\x52\xff\x2d\x69\x65\x63\x37\x56\x16\xce\x4b\xd6\xd4\xcc\x70\x66\x38\xf3\xd3\x90\x43\xc9\x04\x05\x49\xf8\x0a\xbe\x9b\x2f\xe7\xcb\x09\x17\x81\x5c\x4d\x00\x0c\x37\x11\xae\x20\x26\xa8\x8d\x92\x70\x8e\xea\x9a\x53\x84\x17\xef\x7e\x9e\x00\x30\xd4\x54\xf1\xc4\x70\x29\xba\x48\xae\x51\x69\xf7\x78\x39\x5f\xce\x9f\x4e\x34\x2a\x3b\x62\x25\x9f\x41\xaa\xa2\x15\x84\xc6\x24\xab\xc5\x22\x92\x94\x44\xa1\xd4\x66\xf5\xe7\xe5\x72\x39\x01\x68\x48\xa7\xa9\x52\x28\x0c\x30\x19\x13\x2e\xea\xec\x7a\xb5\x58\x90\x84\xcf\xad\x09\x3a\xe4\x81\x99\x53\x19\xef\x8a\xf8\x95\x70\x01\xdf\x24\x4a\xb2\x94\xda\x91\x27\xe0\xb5\x69\x17\xa6\x0d\xd9\xe0\x5d\x22\xcf\x0d\xd9\x70\xb1\xc9\x05\x25\xc4\x84\xce\x36\x2b\x61\x91\x39\x64\x71\xfd\x74\xa1\x50\xcb\x54\x51\x74\x0f\x01\x36\x68\xfc\x1f\x00\x3a\x8d\x63\xa2\xb6\x2b\x78\x8f\x26\x55\x42\x03\x81\x88\x6b\x03\x32\x80\x82\x29\x27\x45\x9a\x2a\x6e\xb6\x39\xab\x55\xfb\x25\x12\x85\x6a\x05\xff\xfa\x77\x36\xa8\x50\x27\x52\xe8\x7c\x26\xfb\x6f\xfa\xc7\xe5\x72\x5a\xfe\x6c\x98\xf0\x02\x7e\x39\x7f\xfb\x06\x88\x52\x64\x5b\x9d\x15\xe4\xfa\x37\xa4\x46\x57\xf8\xa8\x14\x06\x85\xa9\x8a\x02\x20\x49\x12\x71\x4a\xac\xb0\xc5\x6f\x5a\x8a\xfa\x53\x00\x4d\x43\x8c\x49\x73\x14\xe0\xf7\x0a\x83\x15\x4c\x7f\xb7\xa0\x32\x4e\xa4\x40\x61\xf4\xc2\xd3\xea\xc5\xfb\x4c\x87\xd7\x5c\x9b\x69\x69\xc7\xf7\xcb\xa7\x3d\x76\xa4\x26\x04\x23\xaf\x50\x00\xd7\xc0\xc5\x35\x89\x38\x3b\x86\xf2\x3f\x29\x25\x55\x4d\xeb\xef\xba\xb5\xfe\x28\x48\x6a\x42\xa9\xf8\x67\x64\x60\x24\x24\xa8\x02\xa9\x62\x90\x09\x2a\xa7\xd6\x18\x2c\xf8\x53\x5f\xfc\x7c\x14\x78\x9b\x20\x35\xc8\x00\x2d\x1f\x48\xea\x72\xf5\xf8\xbe\x4f\x88\x22\x31\x9a\x0c\x6e\xc0\xe5\x4b\x1b\x73\x49\xb7\x48\xc8\x06\xa7\x43\x89\x35\xff\xbc\x07\x31\x12\x45\xc3\xc1\xe4\x52\x31\x54\x2f\xb7\x83\xe9\x03\x8e\x11\xd3\x9e\x3c\xb1\x28\xda\x84\x97\x1f\x15\x12\x83\x40\x40\xe0\x4d\x91\xe3\xfb\x01\xcb\xa7\x14\xb5\x79\x29\x59\x85\xae\x16\x09\x79\xd6\x02\x23\x86\x14\x24\x96\x8f\x2b\x64\x2b\x30\x2a\xc5\x49\x4f\x48\xf4\x07\x44\x7b\x38\x0c\x41\x91\x69\x2f\x34\xf6\x40\x8a\xf7\xd9\x51\x02\xb9\xa9\xbb\xc3\x91\x9e\x2c\xfc\x87\x45\x3b\xa7\x82\xcf\x42\x3d\x9e\x34\x3c\x01\xf7\x11\x2d\xf8\x4b\xb7\x05\x45\xba\x92\x48\x21\x61\x5b\xc0\x5b\xae\x8f\xf3\xbe\xdf\xeb\x85\xf3\x42\x40\xda\xf5\xce\x01\x6a\x53\xd6\x56\x64\x26\xc4\x26\xcc\x1d\xc7\xa4\xce\x52\x70\xf1\x1f\xce\xfe\xd7\x5d\x0f\xfe\x0d\x0d\x10\x51\x96\x63\xeb\x2d\x14\x69\xf1\x30\x95\x60\x11\x10\x81\x4c\x05\xab\x4d\xf8\x45\x5d\xd7\x8a\x7d\x27\x00\x39\x8e\x05\xdf\x77\x5b\xf0\x46\x96\xd1\x79\xc3\x4d\x08\x3a\x41\xca\x03\x8e\x0c\x38\xfb\x5a\xd0\x64\xac\xe5\x6b\x42\x0c\x0d\x77\x40\xe1\x63\xc2\x5c\x15\x27\x1e\xa8\x84\xf3\xf2\x59\xb9\xae\x23\x2b\xe5\xde\x59\xaf\xbc\xf7\x66\xf4\x97\x75\x43\x70\x2e\xcd\xac\xd5\x29\xa5\xa8\x75\x90\x46\xd1\x76\x34\x80\x77\x2a\xf6\xbe\xb0\xd6\x27\xac\x1e\x85\x11\x8f\xb0\x62\xdd\x79\xc7\x38\xe0\xb1\x55\xea\x28\x2a\x54\xab\x6d\x84\x06\x77\xde\x36\x7f\x75\xc3\x40\x0e\x7c\xd9\xb4\xc1\x72\x4f\x88\x96\xc7\x07\x6e\xda\x0e\x58\x3e\x21\xe3\x97\xd7\xfa\x84\x8c\x23\x30\x62\x3f\x84\x71\x39\x34\x22\x84\x69\x9e\xc5\xde\x79\xa0\xc9\x59\xdb\xe6\x99\x4a\xa1\xd3\xb8\x90\x32\xac\x8f\x52\x30\x3d\xe8\xee\xb9\xd9\x47\xc9\x67\x3d\x66\x1f\xe5\xc7\x4c\x87\x53\x1f\x65\x14\x38\xf4\x55\x6e\x44\xdb\xfa\x28\x7b\x76\x52\xf6\xec\xa5\xec\xdd\x4d\xd9\xbf\x9f\x72\xef\x1d\x95\x3c\xdb\xef\x77\x3b\x9e\xe7\xef\x58\xb6\xe1\xb9\x3e\x5f\x63\x47\xa5\xa9\xfb\xa9\x94\x3c\x41\xf8\x21\x16\xf4\xec\x4f\x8b\x74\xfd\xca\xf6\xa7\xc3\x3b\x2a\x0d\x98\x3b\x8e\x49\x9d\x45\xe1\xb0\x8e\x4a\x51\x98\x3d\x7c\x47\xa5\x08\x88\x23\x77\x54\x5a\xb1\xef\x04\x20\x63\xdc\x8b\x16\xd1\xf9\x78\xf6\xa2\x23\x79\x6f\xde\xd5\x51\x79\x98\x12\x2e\xef\xa8\xd0\x91\x96\x72\xf7\xd2\x51\x29\x70\x6e\x2c\x1d\x95\x53\xb1\x37\x06\xad\x4f\x58\x3d\x0a\x23\x1e\x61\xc5\xda\xdd\x51\x19\x45\x85\x7a\x77\x47\xe5\xb0\x97\xcd\x9e\x1d\x95\xf2\xf8\xe0\xd4\x51\x39\x21\xe3\xfd\x5a\xf0\x08\x90\xf1\xc0\x8e\xca\x48\x10\xe6\x80\xdb\xed\x9c\x4d\x27\xe5\x13\xcb\x96\xe3\xce\xb9\x95\x9f\x03\x4b\x06\x3c\x99\x54\xb3\x4d\xd0\x7f\x19\x33\xa9\xe8\x8d\x2b\x58\x3b\xb2\x6c\xd0\xff\x78\x25\x55\x4c\xcc\x0a\x7e\xf9\xe7\x87\x49\x6e\x60\x26\xf4\xad\xeb\x82\xbc\xc7\x00\x15\x0a\x8a\x75\xe9\xbe\x45\x92\x0d\x25\xca\x86\xba\xe1\x55\x9c\xe3\xac\xea\x27\xcf\xa4\x8d\xe2\x62\x53\x0c\x5f\x71\x71\x37\x51\x68\x1d\xd4\x47\xf4\x9a\x97\x27\xbd\x03\x75\x1b\x34\x71\x42\x36\xb8\x4b\xc4\x85\xc1\x4d\x25\x92\x34\xff\x3c\x80\xca\x48\x43\xa2\xbb\xc8\x8a\x9d\x45\xe5\x8d\x62\x35\xad\xfc\xb4\x3a\x55\x7e\xda\xc9\x2b\x3f\xdd\x2c\x95\xdf\xdc\x60\xec\xd3\xd6\x05\x61\x2e\x97\x44\xd1\xdb\xa0\x3f\x02\xf3\xe0\x6d\x84\x40\xf9\x6d\x43\x8b\xa3\xdb\x5d\x6d\x33\x8d\x61\x3d\x65\x5a\xdd\x6d\xed\x27\x3b\x39\xd7\x41\x5a\x20\xeb\x45\x3d\xcc\x5a\x18\x9c\xe9\xd5\x18\xd9\xc3\xfc\x6a\x13\x6e\x2f\x9b\x9d\xe7\xdb\x14\x73\xbd\xc6\xda\x78\x0b\xe9\x60\x40\xc9\xef\x5f\x1c\x6d\x65\x3d\xac\x5e\x08\x12\x0f\x5b\xe2\xfc\xd3\xc2\x16\xda\x66\xca\x80\x3f\xc6\x44\x76\x41\xcc\x20\xd9\x00\x41\x86\x65\x76\x43\x7b\x66\x78\x5c\xed\xa0\x67\xdb\xdc\xfb\x11\x16\x13\xc1\x03\xd4\xad\xa2\x1a\x9e\x03\xd0\x86\x98\xb4\x35\x18\x2a\xa4\xd5\xcf\xe7\x1e\x4b\xa0\xd6\xef\x48\xb6\xdd\x07\xdd\x13\xb6\x5b\xa2\xa7\x3d\x76\xda\xd6\x67\x67\x8e\xbc\xd4\x6e\x75\xf7\x81\xe9\xd3\xe9\xfd\x2e\xff\x03\xec\xe6\x4e\x4f\x50\x76\xa5\x44\x0f\x4b\x7f\x24\x77\x27\xc6\x01\x22\xab\x77\x17\x0e\xf2\x6a\xfd\xd2\xc3\xde\xae\x6c\x8d\xd0\xae\x70\xee\x20\xdf\xe7\x90\xaa\xed\x40\x6e\xcf\x90\x6e\xae\x7e\xc3\xe7\xcd\x8a\xb1\x7c\xdb\x39\xc6\xb2\x37\xc1\xc5\x0a\x12\x62\xc2\xec\x67\xad\x2e\xfe\x10\xa2\xad\xe2\xdd\x87\xc2\x54\x2a\xd6\x2c\x37\xaa\x07\x99\xcd\x0a\x77\x27\x06\xaa\x55\x91\xd7\xa1\x52\x93\x58\x2d\x3e\xa5\xa8\xb6\x6d\x6a\xbc\x23\x1b\x04\x91\xc6\x6b\x54\xa5\x2e\xfe\xc6\xcf\x4d\x88\xa2\x36\x80\xb7\x14\x91\xe9\xca\x36\xc4\xce\x52\xad\x77\xda\x15\x6d\x02\x01\xc3\x80\xa4\x91\x59\xc1\xd3\x12\x1b\xb8\xe0\x71\x1a\x97\x43\xa5\x1f\x02\x12\x69\x2f\xbf\x5a\xd5\x79\x2b\x2b\x53\xf7\x5a\xf9\x2b\xb9\xb5\xe2\x77\x0c\xd5\x76\x63\xa8\xdc\x45\xa7\x03\x2d\xc8\x3e\xb1\xaf\xd9\xb0\xec\xb3\xc1\x5d\xb8\x68\x58\xe1\xc6\x3a\xec\x68\x13\xd2\xb0\xee\xbf\x67\x85\x0e\xe7\xd9\xd2\x68\xd7\x65\xf4\x82\x81\x2a\x6e\x50\x71\x32\x77\x41\xa7\xb7\xc2\x90\x5b\xeb\x03\x13\x72\x5d\x06\x33\x70\x5d\xa9\x9f\x63\x1e\x11\x65\xbd\x63\x1a\x2c\x08\x17\x37\x21\x2a\xbc\x00\x1a\x91\x54\xa3\x1d\x25\x02\xce\xff\xfe\xda\xbd\x53\x31\x46\x61\x66\x85\xa0\x54\xe7\x1d\x4f\x6b\xaa\xce\x45\xd8\x6d\x1c\x10\x63\x14\x5f\xa7\x06\x35\x2c\x80\xca\x28\x8d\x45\x9d\x8a\x50\x2a\x53\x61\xe6\x50\x88\x7b\x25\x15\xe0\x2d\x89\x93\x08\x67\xc0\x05\xb8\xdb\x28\xd9\x1a\x2a\x8e\xd7\x68\x91\xad\xca\xab\xfd\xc6\x99\x40\xaa\x51\x59\xe1\xa5\x89\x86\x28\xb7\x0d\x75\x04\x97\xf1\xf6\x72\x35\x29\x1e\x5e\x5e\x5e\xea\x4f\x51\xc5\x0a\xcf\x0c\x11\xbf\x42\x98\xc6\xdb\x3f\x4c\xab\xa4\x25\xdf\x87\x5d\xa7\x03\x25\x02\x48\xa4\x25\xac\xd1\x6f\x65\x91\x81\xb4\x89\x15\xd5\xbe\x10\x99\x1f\x60\xa4\x4e\xd7\x45\x18\x68\x88\xc8\x1a\x23\x74\xdd\xd1\xcb\x40\xca\xe7\x6b\xa2\x2e\x67\x9d\x36\x55\x79\x2f\x1c\xab\x9e\x5f\xe1\x16\x9e\xc3\x34\x90\x72\x0a\x44\xb0\x56\x9a\x6b\x12\xa5\x68\xa9\xd6\x44\x75\x78\xe1\x67\xbf\x7c\xd5\xc8\x12\x53\x63\x91\xf6\x9a\x33\x64\x33\x90\x0a\xb8\xa7\xf1\xd2\xb8\x06\x8c\x13\xb3\x9d\xd9\xb1\xf2\x5c\x66\x67\x2d\x4d\x48\x8c\x1b\xb1\x0b\x02\x21\xd1\x90\xa0\x8a\xb9\xb6\xf5\x87\x75\x90\x46\x84\x1b\x1e\x45\xb0\x2e\xd7\xd9\x67\x37\xb2\xf9\x50\x2c\xcd\x6e\x38\xd5\x53\x34\x1b\x7c\x80\x1c\xf5\xab\xbb\xde\xde\x7b\x96\xe6\x82\x87\x25\xea\x3a\x35\x7b\x27\x6b\x23\x4d\xf7\x0c\xe0\x62\x55\xdd\x63\x1f\xb7\x79\xa2\x0d\x48\x45\xa2\x69\x7b\xf4\xbd\x55\x87\xcd\x09\x17\x44\xb0\x0b\x08\xb8\xd2\x06\x86\x2b\x31\xf3\x1c\x6f\x7a\x75\xba\xaf\x8c\x10\x12\xf0\x36\x89\x38\xe5\xc6\x9b\xe0\x01\xcc\x45\x7c\x0e\x2e\x83\x03\xdd\x5f\xcc\xab\xc7\xb9\x1f\xbb\x9f\x30\x4f\x9d\x3e\xda\x1d\xd2\xc7\x31\x39\xd3\x68\xed\xb7\x98\x97\x5f\x28\xf6\xb3\xd9\x55\x5a\xe3\x4e\xa2\x02\xbc\xf2\x8f\x65\x60\x81\xe8\x4c\x1b\x95\x52\x93\x2a\x2b\x51\xb8\xc2\xc9\x95\x8f\xda\xae\x06\x3c\x2b\x9e\xfe\x30\x7f\xe6\xc4\xfe\x00\x42\x1a\x77\x1a\x51\x0a\x7c\xa6\x4d\x4e\xf4\x2d\xc4\x48\x84\x76\x51\xe1\xe8\x9d\x40\x28\xc4\x14\x3c\x3f\xf9\x40\x5e\xf9\xa8\x26\x34\x84\xf3\x0a\x2a\x5a\xdd\x37\x68\x80\xb3\x99\x3b\x13\x9b\x41\x12\x11\xf1\x0d\x67\x4e\xc7\x2b\x2e\xd8\x13\xf7\x97\x07\x4f\xf8\xa6\x98\x4e\x3f\xa9\x45\x57\xf1\xb7\xa4\xb1\x13\x58\x87\xf6\xb3\xb3\x32\x74\x3c\xfb\x73\xce\x66\x6e\x42\x3b\xdf\x9c\x33\xff\xbf\x9d\x70\x96\x01\xf5\xb7\x75\x2e\x34\x34\x7c\xed\x9e\x3c\xaf\xb5\xc8\xcb\xc9\x7b\x03\xe6\xff\x01\x00\x00\xff\xff\x5b\x9d\xa5\x68\xd6\x48\x00\x00")

func openapiYamlBytes() ([]byte, error) {
	return bindataRead(
		_openapiYaml,
		"openapi.yaml",
	)
}

func openapiYaml() (*asset, error) {
	bytes, err := openapiYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "openapi.yaml", size: 18646, mode: os.FileMode(493), modTime: time.Unix(1710738813, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"openapi.yaml": openapiYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"openapi.yaml": &bintree{openapiYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
