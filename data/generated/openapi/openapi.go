// Code generated for package openapi by go-bindata DO NOT EDIT. (@generated)
// sources:
// ../../openapi/openapi.yaml
package openapi

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _openapiYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x5f\x8f\xdb\xb8\x11\x7f\xf7\xa7\x18\xa0\x2d\x7c\x39\x78\x6d\xa7\x77\x05\x5a\x23\x39\x20\xb9\x5e\x8a\x3b\xe4\x92\x34\x9b\xb4\x0f\x45\xb1\x4b\x53\x23\x8b\xb7\x12\xa9\x90\xa3\xdd\x75\xda\x7e\xf7\x82\xa4\xfe\x5b\xf2\xda\xc6\x6e\xac\x2c\x9c\x97\xac\xa9\x99\xe1\xcc\x70\xe6\xa7\x21\x87\x52\x29\x4a\x96\x8a\x05\x7c\x37\x9d\x4f\xe7\x23\x21\x43\xb5\x18\x01\x90\xa0\x18\x17\x90\x30\x34\xa4\x15\x9c\xa3\xbe\x16\x1c\xe1\xc5\xbb\x9f\x47\x00\x01\x1a\xae\x45\x4a\x42\xc9\x3e\x92\x6b\xd4\xc6\x3d\x9e\x4f\xe7\xd3\xa7\x23\x83\xda\x8e\x58\xc9\x67\x90\xe9\x78\x01\x11\x51\xba\x98\xcd\x62\xc5\x59\x1c\x29\x43\x8b\x3f\xcf\xe7\xf3\x11\x40\x4b\x3a\xcf\xb4\x46\x49\x10\xa8\x84\x09\xd9\x64\x37\x8b\xd9\x8c\xa5\x62\x6a\x4d\x30\x91\x08\x69\xca\x55\xb2\x29\xe2\x57\x26\x24\x7c\x93\x6a\x15\x64\xdc\x8e\x3c\x01\xaf\x4d\xb7\x30\x43\x6c\x85\x77\x89\x3c\x27\xb6\x12\x72\x55\x08\x4a\x19\x45\xce\x36\x2b\x61\x96\x3b\x64\x76\xfd\x74\xa6\xd1\xa8\x4c\x73\x74\x0f\x01\x56\x48\xfe\x0f\x00\x93\x25\x09\xd3\xeb\x05\xbc\x47\xca\xb4\x34\xc0\x20\x16\x86\x40\x85\x50\x32\x15\xa4\xc8\x33\x2d\x68\x5d\xb0\x5a\xb5\x5f\x22\xd3\xa8\x17\xf0\xaf\x7f\xe7\x83\x1a\x4d\xaa\xa4\x29\x66\xb2\xff\xc6\x7f\x9c\xcf\xc7\xd5\xcf\x96\x09\x2f\xe0\x97\xf3\xb7\x6f\x80\x69\xcd\xd6\xf5\x59\x41\x2d\x7f\x43\x4e\xa6\xc6\xc7\x95\x24\x94\x54\x17\x05\xc0\xd2\x34\x16\x9c\x59\x61\xb3\xdf\x8c\x92\xcd\xa7\x00\x86\x47\x98\xb0\xf6\x28\xc0\xef\x35\x86\x0b\x18\xff\x6e\xc6\x55\x92\x2a\x89\x92\xcc\xcc\xd3\x9a\xd9\xfb\x5c\x87\xd7\xc2\xd0\xb8\xb2\xe3\xfb\xf9\xd3\x2d\x76\x64\x14\x01\xa9\x2b\x94\x20\x0c\x08\x79\xcd\x62\x11\x1c\x43\xf9\x9f\xb4\x56\xba\xa1\xf5\x77\xfd\x5a\x7f\x94\x2c\xa3\x48\x69\xf1\x19\x03\x20\x05\x29\xea\x50\xe9\x04\x54\x8a\xda\xa9\x35\x04\x0b\xfe\xb4\x2d\x7e\x3e\x4a\xbc\x4d\x91\x13\x06\x80\x96\x0f\x14\x77\xb9\x7a\x7c\xdf\xa7\x4c\xb3\x04\x29\x87\x1b\x70\xf9\xd2\xc5\x5c\xd1\xcd\x52\xb6\xc2\xf1\xae\xc4\x46\x7c\xde\x83\x18\x99\xe6\xd1\xce\xe4\x4a\x07\xa8\x5f\xae\x77\xa6\x0f\x05\xc6\x81\xf1\xe4\xa9\x45\xd1\x36\xbc\xfc\xa8\x91\x11\x02\x03\x89\x37\x65\x8e\xef\x07\x2c\x9f\x32\x34\xf4\x52\x05\x35\xba\x46\x24\x14\x59\x0b\x01\x23\x56\x92\x58\x3e\xa1\x31\x58\x00\xe9\x0c\x47\x5b\x42\x62\x7b\x40\x74\x87\xc3\x2e\x28\x32\xde\x0a\x8d\x5b\x20\xc5\xfb\xec\x28\x81\xdc\xd6\xdd\xe1\xc8\x96\x2c\xfc\x87\x45\x3b\xa7\x82\xcf\x42\x33\x9c\x34\x3c\x01\xf7\x11\x2d\xf8\x4b\xbf\x05\x65\xba\xb2\x58\x23\x0b\xd6\x80\xb7\xc2\x1c\xe7\x7d\xbf\xd7\x0b\xe7\x85\x84\xac\xef\x9d\x03\xdc\xa6\xac\xad\xc8\x28\xc2\x36\xcc\x1d\xc7\xa4\xde\x52\x70\xf6\x1f\x11\xfc\xaf\xbf\x1e\xfc\x1b\x12\x30\x59\x95\x63\xcb\x35\x94\x69\xf1\x30\x95\x60\x19\x10\xa1\xca\x64\xd0\x98\xf0\x8b\xba\xae\x13\xfb\x4e\x00\x72\x1c\x0b\xbe\xef\xb7\xe0\x8d\xaa\xa2\xf3\x46\x50\x04\x26\x45\x2e\x42\x81\x01\x88\xe0\x6b\x41\x93\xa1\x96\xaf\x29\x23\x1e\x6d\x80\xc2\xc7\x34\x70\x55\x9c\x7c\xa0\x12\xce\xcb\x0f\xaa\x75\x1d\x58\x29\xf7\xce\x7a\xe5\xbd\x37\x63\x7b\x59\xb7\x0b\xce\x65\xb9\xb5\x26\xe3\x1c\x8d\x09\xb3\x38\x5e\x0f\x06\xf0\x4e\xc5\xde\x17\xd6\xfa\x84\xd5\x83\x30\xe2\x11\x56\xac\x1b\xef\x18\x07\x3c\xb6\x4a\x1d\x44\x85\x6a\xb5\x8d\x91\x70\xe3\x6d\xf3\x57\x37\x0c\xec\xc0\x97\x4d\x17\x2c\x6f\x09\xd1\xea\xf8\xc0\x4d\xdb\x03\xcb\x27\x64\xfc\xf2\x5a\x9f\x90\x71\x00\x46\xec\x87\x30\x2e\x87\x06\x84\x30\xed\xb3\xd8\x3b\x0f\x34\x45\xd0\xb5\x79\xe6\x4a\x9a\x2c\x29\xa5\xec\xd6\x47\x29\x99\x1e\x74\xf7\xdc\xee\xa3\x14\xb3\x1e\xb3\x8f\xf2\x63\xae\xc3\xa9\x8f\x32\x08\x1c\xfa\x2a\x37\xa2\x5d\x7d\x94\x3d\x3b\x29\x7b\xf6\x52\xf6\xee\xa6\xec\xdf\x4f\xb9\xf7\x8e\x4a\x91\xed\xf7\xbb\x1d\x2f\xf2\x77\x28\xdb\xf0\x42\x9f\xaf\xb1\xa3\xd2\xd6\xfd\x54\x4a\x9e\x20\xfc\x10\x0b\xb6\xec\x4f\xcb\x74\xfd\xca\xf6\xa7\xbb\x77\x54\x5a\x30\x77\x1c\x93\x7a\x8b\xc2\xdd\x3a\x2a\x65\x61\xf6\xf0\x1d\x95\x32\x20\x8e\xdc\x51\xe9\xc4\xbe\x13\x80\x0c\x71\x2f\x5a\x46\xe7\xe3\xd9\x8b\x0e\xe4\xbd\x79\x57\x47\xe5\x61\x4a\xb8\xa2\xa3\xc2\x07\x5a\xca\xdd\x4b\x47\xa5\xc4\xb9\xa1\x74\x54\x4e\xc5\xde\x10\xb4\x3e\x61\xf5\x20\x8c\x78\x84\x15\x6b\x7f\x47\x65\x10\x15\xea\xdd\x1d\x95\xc3\x5e\x36\x7b\x76\x54\xaa\xe3\x83\x53\x47\xe5\x84\x8c\xf7\x6b\xc1\x23\x40\xc6\x03\x3b\x2a\x03\x41\x98\x03\x6e\xb7\x8b\x60\x3c\xaa\x9e\x58\xb6\x02\x77\xce\xad\xfc\x02\x58\x72\xe0\xc9\xa5\xd2\x3a\x45\xff\x65\xcc\xa8\xa6\x37\x2e\x60\xe9\xc8\xf2\x41\xff\xe3\x95\xd2\x09\xa3\x05\xfc\xf2\xcf\x0f\xa3\xc2\xc0\x5c\xe8\x5b\xd7\x05\x79\x8f\x21\x6a\x94\x1c\x9b\xd2\x7d\x8b\x24\x1f\x4a\xb5\x0d\x75\x12\x75\x9c\x13\x41\xdd\x4f\x9e\xc9\x90\x16\x72\x55\x0e\x5f\x09\x79\x37\x51\x64\x1d\xb4\x8d\xe8\xb5\xa8\x4e\x7a\x77\xd4\x6d\xa7\x89\x53\xb6\xc2\x4d\x22\x21\x09\x57\xb5\x48\x32\xe2\xf3\x0e\x54\xa4\x88\xc5\x77\x91\x95\x3b\x8b\xda\x1b\xc5\x6a\x5a\xfb\x69\x75\xaa\xfd\xb4\x93\xd7\x7e\xba\x59\x6a\xbf\x05\x61\xe2\xd3\xd6\x05\x61\x21\x97\xc5\xf1\xdb\x70\x7b\x04\x16\xc1\xdb\x0a\x81\xea\xdb\x86\x0e\x47\x77\xbb\xda\x66\x5a\x80\xcd\x94\xe9\x74\xb7\xb5\x9f\x6d\xe4\x5c\x0f\x69\x89\xac\x17\xcd\x30\xeb\x60\x70\xa6\xd7\x63\x64\x0f\xf3\xeb\x4d\xb8\xbd\x6c\x76\x9e\xef\x52\xcc\xf5\x1a\x1b\xe3\x1d\xa4\x3b\x03\x4a\x71\xff\xe2\x68\x2b\xeb\x61\xf5\xee\x45\xf0\xff\x8a\x0f\x0b\x3b\x68\xdb\x09\x03\xfe\x10\x13\x83\x0b\x46\x3b\xc9\x06\x08\x73\x24\xb3\xdb\xd9\x33\x12\x49\xbd\x7f\x9e\x6f\x72\xef\x47\x58\xc2\xa4\x08\xd1\x74\x8a\x6a\xf9\x0d\xc0\x10\xa3\xac\x33\x14\x6a\xa4\xf5\x8f\xe7\x1e\x4b\x98\x36\x6f\x48\x76\xdd\x06\xdd\x13\xb4\x3b\xa2\xa7\x3b\x76\xba\xd6\x67\x63\x8e\xa2\xd0\xee\x74\xf7\x81\xc9\xd3\xeb\xfd\x3e\xff\x03\x48\x96\x60\xdb\xab\xbd\x41\xd9\x97\x12\x5b\x58\xb6\x47\x72\x7f\x62\x1c\x20\xb2\x7e\x73\xe1\x20\xaf\x36\xaf\x3c\xec\xed\xca\xce\x08\xed\x0b\xe7\x1e\xf2\x7d\x8e\xa8\xba\x8e\xe3\xf6\x0c\xe9\xf6\xea\xb7\x7c\xde\xae\x17\x2b\x98\x75\x8c\x55\x67\x42\xc8\x05\xa4\x8c\xa2\xfc\x67\xa3\x2a\xfe\x10\xa1\xad\xe1\xdd\x67\xc2\x5c\xe9\xa0\x5d\x6c\xd4\x8f\x31\xdb\xf5\xed\x46\x0c\xd4\x6b\x22\xaf\x43\xad\x22\xb1\x5a\x7c\xca\x50\xaf\xbb\xd4\x78\xc7\x56\x08\x32\x4b\x96\xa8\x2b\x5d\xfc\x7d\x9f\x9b\x08\x65\x63\x00\x6f\x39\x62\x60\x6a\x9b\x10\x3b\x4b\xbd\xda\xe9\x56\xb4\x0d\x04\x01\x86\x2c\x8b\x69\x01\x4f\x2b\x6c\x10\x52\x24\x59\x52\x0d\x55\x7e\x08\x59\x6c\xbc\xfc\x7a\x4d\xe7\xad\xac\x4d\xbd\xd5\xca\x5f\xd9\xad\x15\xbf\x61\xa8\xb1\xdb\x42\xed\xae\x39\x1d\x68\x41\xfe\x81\x7d\xc3\x86\xf9\x36\x1b\xdc\x75\x8b\x96\x15\x6e\xac\xc7\x8e\x2e\x21\x2d\xeb\xfe\x7b\x56\xea\x70\x9e\x2f\x8d\x71\x3d\x46\x2f\x18\xb8\x16\x84\x5a\xb0\xa9\x0b\x3a\xb3\x96\xc4\x6e\xad\x0f\x28\x12\xa6\x0a\x66\x10\xa6\x56\x3d\x27\x22\x66\xda\x7a\x87\x5a\x2c\x08\x17\x37\x11\x6a\xbc\x00\x1e\xb3\xcc\xa0\x1d\x65\x12\xce\xff\xfe\xda\xbd\x53\x31\x41\x49\x93\x52\x50\x66\x8a\x7e\xa7\x35\xd5\x14\x22\xec\x26\x0e\x18\x91\x16\xcb\x8c\xd0\xc0\x0c\xb8\x8a\xb3\x44\x36\xa9\x18\xe7\x2a\x93\x34\x85\x52\xdc\x2b\xa5\x01\x6f\x59\x92\xc6\x38\x01\x21\xc1\xdd\x45\xc9\xd7\x50\x0b\xbc\x46\x8b\x6c\x75\x5e\xe3\xb7\xcd\x0c\x32\x83\xda\x0a\xaf\x4c\x24\xa6\xdd\x26\xd4\x11\x5c\x26\xeb\xcb\xc5\xa8\x7c\x78\x79\x79\x69\x3e\xc5\x35\x2b\x3c\x33\xc4\xe2\x0a\x61\x9c\xac\xff\x30\xae\x93\x56\x7c\x1f\x36\x9d\x0e\x9c\x49\x60\xb1\x51\xb0\x44\xbf\x91\xc5\x00\x94\x4d\xac\xb8\xf1\x7d\xc8\xf4\x00\x23\x4d\xb6\x2c\xc3\xc0\x40\xcc\x96\x18\xa3\xeb\x8d\x5e\x86\x4a\x3d\x5f\x32\x7d\x39\xe9\xb5\xa9\xce\x7b\xe1\x58\xcd\xf4\x0a\xd7\xf0\x1c\xc6\xa1\x52\x63\x60\x32\xe8\xa4\xb9\x66\x71\x86\x96\x6a\xc9\x74\x8f\x17\x7e\xf6\xcb\x57\x8f\x2c\x39\x26\x8b\xb4\xd7\x22\xc0\x60\x02\x4a\x83\xf0\x34\x5e\x9a\x30\x80\x49\x4a\xeb\x89\x1d\xab\x4e\x65\x36\xd6\x92\x22\x46\x6e\xc4\x2e\x08\x44\xcc\x40\x8a\x3a\x11\xc6\xd6\x1f\xd6\x41\x06\x11\x6e\x44\x1c\xc3\xb2\x5a\x67\x9f\xdd\x18\x4c\x77\xc5\xd2\xfc\x7e\x53\x33\x45\xf3\xc1\x07\xc8\x51\xbf\xba\xcb\xf5\xbd\x67\x69\x21\x78\xb7\x44\x5d\x66\xb4\x77\xb2\xb6\xd2\x74\xcf\x00\x2e\x57\xd5\x3d\xf6\x71\x5b\x24\xda\x0e\xa9\xc8\x0c\xef\x8e\xbe\xb7\xfa\xb0\x39\xe1\x82\xc9\xe0\x02\x42\xa1\x0d\xc1\xee\x4a\x4c\x3c\xc7\x9b\xad\x3a\xdd\x57\x46\x48\x05\x78\x9b\xc6\x82\x0b\xf2\x26\x78\x00\x73\x11\x5f\x80\xcb\xce\x81\xee\xaf\xe5\x35\xe3\xdc\x8f\xdd\x4f\x98\x67\x4e\x1f\xe3\x8e\xe8\x93\x84\x9d\x19\xb4\xf6\x5b\xcc\x2b\xae\x13\xfb\xd9\xec\x2a\x2d\x71\x23\x51\x01\x5e\xf9\xc7\x2a\xb4\x40\x74\x66\x48\x67\x9c\x32\x6d\x25\x4a\x57\x38\xb9\xf2\xd1\xd8\xd5\x80\x67\xe5\xd3\x1f\xa6\xcf\x9c\xd8\x1f\x40\x2a\x72\x67\x11\x95\xc0\x67\x86\x0a\xa2\x6f\x21\x41\x26\x8d\x8b\x0a\x47\xef\x04\x42\x29\xa6\xe4\xf9\xc9\x07\xf2\xc2\x47\x35\xe3\x11\x9c\xd7\x50\xd1\xea\xbe\x42\x02\x11\x4c\xdc\x89\xd8\x04\xd2\x98\xc9\x6f\x44\xe0\x74\xbc\x12\x32\x78\xe2\xfe\xf2\xe0\x09\xdf\x94\xd3\x99\x27\x8d\xe8\x2a\xff\x56\x3c\x71\x02\x9b\xd0\x7e\x76\x56\x85\x8e\x67\x7f\x2e\x82\x89\x9b\xd0\xce\x37\x15\x81\xff\xdf\x4e\x38\xc9\x81\xfa\xdb\x26\x17\x12\x8f\x5e\xbb\x27\xcf\x1b\x0d\xf2\x6a\xf2\xad\x01\xf3\xff\x00\x00\x00\xff\xff\x0e\x10\x9d\xfb\xd4\x48\x00\x00")

func openapiYamlBytes() ([]byte, error) {
	return bindataRead(
		_openapiYaml,
		"openapi.yaml",
	)
}

func openapiYaml() (*asset, error) {
	bytes, err := openapiYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "openapi.yaml", size: 18644, mode: os.FileMode(493), modTime: time.Unix(1702392412, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"openapi.yaml": openapiYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"openapi.yaml": &bintree{openapiYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
