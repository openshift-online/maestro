// Code generated for package openapi by go-bindata DO NOT EDIT. (@generated)
// sources:
// ../../openapi/openapi.yaml
package openapi

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _openapiYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x5f\x8f\xdb\xb8\x11\x7f\xdf\x4f\x31\x40\x5b\xf8\x72\xf0\xda\x4e\xef\x0a\xb4\x46\x72\x40\x72\xbd\x14\x77\xc8\x25\x69\x36\x69\x1f\x8a\xc2\x4b\x8b\x23\x8b\xb7\x12\xa9\x90\xa3\xdd\x75\xda\x7e\xf7\x82\xa4\xfe\x5b\xd6\xca\xbe\xdd\xd8\xdd\x3a\x2f\xb1\xa8\xe1\x70\x86\xfc\xcd\x4f\x33\x24\x57\xa5\x28\x59\x2a\xe6\xf0\xcd\x64\x36\x99\x9d\x09\x19\xaa\xf9\x19\x00\x09\x8a\x71\x0e\x09\x43\x43\x5a\xc1\x05\xea\x6b\x11\x20\xbc\x78\xf7\xe3\x19\x00\x47\x13\x68\x91\x92\x50\x72\x9b\xc8\x35\x6a\xe3\x5e\xcf\x26\xb3\xc9\xd3\x33\x83\xda\xb6\x58\xcd\xe7\x90\xe9\x78\x0e\x11\x51\x3a\x9f\x4e\x63\x15\xb0\x38\x52\x86\xe6\x7f\x9c\xcd\x66\x67\x00\x2d\xed\x41\xa6\x35\x4a\x02\xae\x12\x26\x64\xb3\xbb\x99\x4f\xa7\x2c\x15\x13\xeb\x82\x89\x44\x48\x93\x40\x25\x9b\x2a\x7e\x66\x42\xc2\x57\xa9\x56\x3c\x0b\x6c\xcb\x13\xf0\xd6\x74\x2b\x33\xc4\x56\x78\x97\xca\x0b\x62\x2b\x21\x57\x85\xa2\x94\x51\xe4\x7c\xb3\x1a\xa6\xf9\x84\x4c\xaf\x9f\x4e\x35\x1a\x95\xe9\x00\xcf\x97\x99\xe4\x31\x3a\x19\x80\x15\x92\xff\x01\x60\xb2\x24\x61\x7a\x3d\x87\xf7\x48\x99\x96\x06\x18\xc4\xc2\x10\xa8\x10\x8a\xbe\x90\xf7\x2d\x7a\x60\x90\x69\x41\xeb\x42\x83\x75\xe2\x25\x32\x8d\x7a\x0e\xff\xf8\x67\xde\xa8\xd1\xa4\x4a\x9a\x62\x40\xfb\x6f\xf4\xfb\xd9\x6c\x54\x3d\xb6\x1c\x7a\x01\x3f\x5d\xbc\x7d\x03\x4c\x6b\xb6\xee\x18\x1c\xd4\xf2\x17\x0c\xc8\xd4\xba\x07\x4a\x12\x4a\xaa\x6b\x04\x60\x69\x1a\x8b\x80\x59\x9d\xd3\x5f\x8c\x92\xcd\xb7\x00\x26\x88\x30\x61\xed\x56\x80\xdf\x6a\x0c\xe7\x30\xfa\xcd\x34\x50\x49\xaa\x24\x4a\x32\x53\x2f\x6b\xa6\xef\x73\x53\x5e\x3a\x4b\x5e\x0b\x43\xa3\xca\xa9\x6f\x67\x4f\x7b\x9c\xca\x28\x02\x52\x57\x28\x41\x18\x10\xf2\x9a\xc5\x82\x1f\xc2\x85\x1f\xb4\x56\xba\x61\xf5\x37\xdb\xad\xfe\x28\x59\x46\x91\xd2\xe2\x33\x72\x20\x05\x29\xea\x50\xe9\x04\x54\x8a\xda\x99\x75\x0c\x1e\xfc\xa1\x0f\x4c\x1f\x25\xde\xa6\x18\x10\x72\x40\xdb\x0f\x54\xe0\xc2\xf8\xf0\x73\x9f\x32\xcd\x12\xa4\x9c\x89\xc0\x05\x4f\x57\xe7\x4a\x6e\x9a\xb2\x15\x8e\x86\x0a\x1b\xf1\x79\x07\x61\x64\x3a\x88\x06\x8b\x2b\xcd\x51\xbf\x5c\x0f\x96\x0f\x05\xc6\xdc\x8c\x06\xb0\xd2\xf4\x5f\x82\xff\x67\x3b\x35\xfd\x05\x09\xd8\x06\x23\x2c\xd7\x50\x06\xd3\xc3\x70\xd2\xfb\xd6\x88\xa1\xca\x24\x6f\x8c\xfb\x45\x81\xd4\xe4\xa1\x13\x07\x1d\x81\x07\xdf\x6e\xf7\xe0\x8d\xda\x40\xec\x8d\xa0\x08\x4c\x8a\x81\x08\x05\x72\x10\x1c\xf0\x56\x98\xc3\x7c\xd4\xfe\x7f\xf9\x54\xf0\x51\x9e\x4f\xc5\x48\xb8\x41\x36\x7f\x76\xcd\x9b\x7c\xf3\xeb\x99\xa6\x07\x2c\x6d\xa6\xf1\xb6\x71\x30\x59\x10\xa0\x31\x61\x16\xc7\xeb\x3a\xee\x7a\xd6\xea\x6f\x36\xbe\xdd\x8c\xfb\xb5\x32\xc7\xb3\x58\x27\xaa\x3a\x51\xd5\x17\xa7\x2a\x17\x4a\xb6\x54\xea\x8e\xe7\xc3\x79\xb2\x37\x75\xb5\xb3\xa9\x40\x49\x93\x25\xa5\x9e\x61\xc5\x5d\xd9\xe9\x8b\x56\x75\xc5\xa8\x87\x2c\xe7\xbe\xcf\x6d\x38\x15\x72\x47\xc1\x4c\x8f\x26\xf1\xd8\xb1\x94\xdb\xb1\x98\xdb\xb9\x9c\xdb\xbd\xa0\xdb\xa9\xa4\x03\x48\x95\xd9\x24\x9a\xef\x35\x32\x97\x3d\x49\xbc\x29\xa3\x7d\x37\x8a\xf9\x94\xa1\xa1\x97\x8a\xd7\xe4\x1a\x98\x28\xe2\x17\x38\x23\x56\x8a\xd8\x7e\x42\x23\x9f\x03\xe9\xac\x22\xf7\x0e\x70\xf4\x43\xa3\x1b\x18\x43\xf8\x64\xd4\x4b\x92\x3d\xe4\xe2\xe7\xec\x20\x90\x6e\xdb\x7e\x4a\x2e\x4f\x14\xbe\x8f\x07\x7f\xea\x41\x77\x11\xae\x2c\xd6\xc8\xf8\xfa\x7f\x25\x91\x7c\x21\x21\xdb\xf6\xf5\x81\xc0\x86\xac\x4d\x2a\x29\xc2\x36\xcd\x1d\xc6\xa5\xad\x49\xe1\xa0\xbd\xb5\x32\x2f\x7b\xf8\x4d\xb5\x12\x0f\x07\xde\x4d\xeb\xa4\xbe\x13\x7f\x1c\x63\x71\x5a\xa2\xf3\xf1\x54\xa5\x47\xf2\xd9\x4c\x19\x05\xd1\x06\x27\x7c\x4c\xb9\x4b\xe2\xe4\x03\x65\x70\x5e\x3f\xaf\xd6\xf5\xc8\x32\xb9\x77\x76\x56\xde\x7b\x37\xfa\xb3\xba\x21\x3c\x97\xe5\xde\x76\xee\xe5\x1d\x9a\xf0\x4e\xb9\xde\x17\xb6\xfa\xc4\xd5\x47\xe1\xc4\x23\x4c\x58\x37\xbe\x31\x8e\x78\x6c\x92\x7a\x14\x09\xea\xdd\x07\x2e\xfb\x7d\x6c\x76\x3c\x69\xa9\x76\x0f\x4e\x47\x2c\x27\x66\xbc\x5f\x0f\x1e\x01\x33\xee\x79\xb6\x72\x24\x0c\xb3\xe7\x91\x4a\xf5\xc6\x76\x2b\x78\xe7\xc2\xea\x2f\x88\x25\x27\x9e\x5c\x2b\xad\x53\xf4\x97\xf6\xce\x6a\x76\xe3\x1c\x96\x4e\x2c\x6f\xf4\x0f\xaf\x94\x4e\x18\xcd\xe1\xa7\xbf\x7f\x38\x2b\x1c\xcc\x95\xbe\x75\x87\x20\xef\x31\x44\x8d\x32\xc0\xa6\x76\x7f\x42\x92\x37\xa5\xda\x42\x9d\x44\x9d\xe7\x04\xaf\xcf\x93\xef\x64\x48\x0b\xb9\x2a\x9b\xaf\x84\xbc\x5b\x28\xb2\x13\xd4\x27\xf4\x5a\x54\x1b\xbd\x03\x6d\x1b\x34\x70\xca\x56\xb8\x29\x24\x24\xe1\xaa\x86\x24\x23\x3e\x0f\x90\x22\x45\x2c\xbe\x4b\xac\xac\x2c\x6a\x5f\x14\x6b\x69\xed\xd1\xda\x54\x7b\xb4\x83\xd7\x1e\xdd\x28\xb5\x67\x41\x98\xf8\xb0\x75\x20\x2c\xf4\xb2\x38\x7e\x1b\xf6\x23\xb0\x00\x6f\x0b\x02\xd5\xdd\xaa\x8e\x89\xee\x9e\x6a\x1b\x69\x1c\x9b\x21\xd3\x39\xdd\xd6\x7f\xb6\x11\x73\x5b\x44\x4b\x66\x5d\x34\x61\xd6\xd1\xc1\xb9\x5e\xc7\xc8\x0e\xee\xd7\xcf\xe0\x76\xf2\xd9\xcd\x7c\x97\x61\xee\xa8\xb1\xd1\xde\x21\x3a\x98\x50\x9a\x57\xae\x0e\xb4\xbe\x92\x25\xc3\xd6\xb7\x60\xe1\xc5\xe0\x1e\xc5\x25\xe9\x0e\xd9\x76\x84\x81\xdf\xf4\x44\xbe\x60\x34\x48\x37\x40\x98\x53\x9f\xad\x7f\xcf\x49\x24\xf5\x33\xf7\xbc\x2a\xbe\x1f\x65\x79\x2e\x77\x3f\xca\x12\x24\xc6\x19\xb1\x2e\x55\xad\xf5\x02\x48\x98\x14\x21\x1a\xfa\x35\x58\xdc\xa2\xda\x3b\xb5\x50\xfe\xe3\xbb\x8b\x31\x8b\x40\xc9\x50\xac\x1e\xc0\x26\x43\x8c\xb2\x4e\xbd\x35\xd1\xcd\xfb\xd2\x8f\x85\x19\xba\x6e\x60\x16\x05\x45\xa7\x8f\x7b\xd2\xc3\x56\x97\xb7\x39\xdd\x45\x12\x3d\xf0\x8f\xd9\x12\xe3\xa1\x6b\xee\x9c\xe2\x5c\x58\x18\xb2\xf8\xdd\x96\xf1\x7b\xc7\xdb\xc6\x1c\x3d\x5d\xfa\x63\x74\x3b\x7f\xec\xa1\xb2\x7e\x21\x64\xaf\x55\x6c\xde\x24\xd9\x79\xe9\x7a\x02\x70\x13\xb3\x5b\xc4\x77\xd9\xfa\xeb\xda\xe6\xdc\x31\xbf\xdb\x04\xd0\x16\x9f\xef\x06\x4e\x6b\xb9\xda\x29\x7c\x95\x7e\x38\x84\x57\x87\x45\x42\xce\x21\x65\x14\xe5\x8f\x8d\x42\xe5\x43\x84\xb6\xac\x72\x7f\x46\x12\x28\xcd\xdb\xf9\x5f\x7d\x67\xb9\x5d\x72\x6c\xc0\xa7\x9e\xa6\x7a\x1b\x6a\x49\xa2\xb5\xe2\x53\x86\x7a\xdd\x65\xc6\x3b\xb6\x42\x90\x59\xb2\x44\x5d\xd9\xe2\x6f\x60\xdd\x44\x28\x1b\x0d\x78\x1b\x20\x72\x53\xab\x0b\xed\x28\xf5\x04\xb4\xdb\xd0\xf6\x67\x9a\x63\xc8\xb2\x98\xe6\xf0\xb4\x6c\x4a\x84\x14\x49\x96\x54\x4d\xd5\x3c\x84\x2c\x36\x5e\x7f\x3d\xcd\xf6\x5e\xd6\x86\xee\xf5\xf2\x67\x76\x6b\xd5\x6f\x38\x6a\x6c\xa5\xae\xdd\xc5\xb3\x3d\x3d\xc8\xff\x1c\xab\xe1\xc3\xac\xcf\x07\x77\x01\xa6\xe5\x85\x6b\xdb\xe2\x47\x97\x92\x96\x77\xff\x3e\x2f\x6d\xb8\xc8\x97\xc6\xb8\x53\x5f\xaf\x18\x02\x2d\x08\xb5\x60\x13\x07\x3a\xb3\x96\xc4\x6e\xed\x1c\x50\x24\x4c\x05\x66\x10\x55\x75\x6f\x44\x22\x62\xa6\xed\xec\x50\xab\x0b\xc2\xe2\x26\x42\x8d\x0b\x08\x62\x96\x19\xb4\xad\x4c\xc2\xc5\x5f\x5f\xbb\x2f\x2f\x26\x28\x69\x5c\x2a\xca\x4c\x71\x02\x6d\x5d\x35\x85\x0a\x5b\x57\x03\x23\xd2\x62\x99\x11\x1a\x98\x42\xa0\xe2\x2c\x91\x4d\x29\x16\x04\x2a\x93\x34\x81\x52\xdd\x2b\xa5\x01\x6f\x59\x92\xc6\x38\x06\x21\xc1\xdd\x0e\xca\xd7\x50\x0b\xbc\x46\x4b\x8a\xf5\xbe\xc6\xef\x64\x30\xc8\x0c\x6a\xab\xbc\x72\x91\x98\x76\xfb\x02\x4e\xe0\x32\x59\x5f\xce\xcf\xca\x97\x97\x97\x97\xe6\x53\x5c\xf3\xc2\x77\x86\x58\x5c\x21\x8c\x92\xf5\xef\x46\x75\xd1\xaa\xdf\x87\xcd\x49\x87\x80\x49\x60\xb1\x51\xb0\x44\xbf\xb7\x80\x1c\x94\x0d\xac\xd8\x1d\xb9\x14\x57\x3e\x27\x7b\x38\x69\xb2\x65\x09\x03\xe3\x09\x0f\xdd\x71\xf5\x65\xa8\xd4\xf3\x25\xd3\x97\xe3\xad\x3e\xd5\xfb\x2e\x3c\x57\x4e\xae\x70\x0d\xcf\x61\x14\x2a\x35\x02\x26\x79\xa7\xcc\x35\x8b\x33\xb4\x52\x4b\xa6\xb7\xcc\xc2\x8f\x7e\xf9\xea\xc8\x92\x23\xb2\x24\x7d\x2d\x38\xf2\x31\x28\x0d\xc2\xcb\x78\x6d\xc2\x00\x26\x29\xad\xc7\xb6\xad\xda\x28\xdb\x58\x4b\x8a\x18\xb9\x16\xbb\x20\x10\x31\x03\x29\xea\x44\x18\x5b\x1f\xd8\x09\x32\x88\x70\x23\xe2\x18\x96\xd5\x3a\xfb\xe8\x46\x3e\x19\xca\xa5\xf9\x8d\xb3\x66\x88\xe6\x8d\x0f\x10\xa3\x7e\x75\x97\xeb\x7b\x8f\xd2\x42\xf1\xb0\x40\x5d\x66\xb4\x73\xb0\xb6\xc2\x74\x47\x00\x97\xab\xea\x5e\x7b\xdc\x16\x81\x36\x20\x14\x99\x09\xba\xd1\xf7\x56\xef\x37\x26\x2c\x98\xe4\x0b\x08\x85\x36\x04\xc3\x8d\x18\xfb\x1e\x6f\x7a\x6d\xba\xaf\x88\x90\x0a\xf0\x36\x8d\x45\x20\xc8\xbb\xe0\x09\xcc\x21\xbe\x20\x97\xc1\x40\xf7\x17\x25\x9b\x38\xf7\x6d\xf7\x03\xf3\xcc\xd9\x63\xdc\xa9\x49\x92\xb0\x73\x83\xd6\x7f\xcb\x79\xc5\x05\x6f\x3f\x9a\x5d\xa5\x25\x6e\x04\x2a\xc0\x2b\xff\x5a\x85\x96\x88\xce\x0d\xe9\x2c\xa0\x4c\x5b\x8d\xd2\x25\x4e\x2e\xf3\x34\x76\x35\xe0\x59\xf9\xf6\xbb\xc9\x33\xa7\xf6\x3b\x90\x8a\xdc\xf6\x50\xa5\xf0\x99\xa1\x42\xe8\x6b\x48\x90\x49\xe3\x50\xe1\xe4\x9d\x42\x28\xd5\x94\x7d\x7e\xf0\x40\x9e\x7b\x54\xb3\x20\x82\x8b\x1a\x2b\x5a\xdb\x57\x48\x20\xf8\xd8\x6d\x52\x8e\x21\x8d\x99\xfc\x4a\x70\x67\xe3\x95\x90\xfc\x89\xfb\xe5\xc9\x13\xbe\x2a\x87\x33\x4f\x1a\xe8\x2a\x7f\xab\x20\x71\x0a\x9b\xd4\x7e\x7e\x5e\x41\xc7\x77\x7f\x2e\xf8\xd8\x0d\x68\xc7\x9b\x08\xee\xff\xb7\x03\x8e\x73\xa2\xfe\xba\xd9\x0b\x29\x88\x5e\xbb\x37\xcf\x1b\x77\x16\xaa\xc1\x7b\x01\xf3\xdf\x00\x00\x00\xff\xff\x12\x6b\x26\x13\x02\x3f\x00\x00")

func openapiYamlBytes() ([]byte, error) {
	return bindataRead(
		_openapiYaml,
		"openapi.yaml",
	)
}

func openapiYaml() (*asset, error) {
	bytes, err := openapiYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "openapi.yaml", size: 16130, mode: os.FileMode(493), modTime: time.Unix(1740049896, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"openapi.yaml": openapiYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"openapi.yaml": &bintree{openapiYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
