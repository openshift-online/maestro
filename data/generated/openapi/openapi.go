// Code generated for package openapi by go-bindata DO NOT EDIT. (@generated)
// sources:
// ../../openapi/openapi.yaml
package openapi

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _openapiYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x5f\x8f\xdb\xb8\x11\x7f\xf7\xa7\x18\xa0\x2d\x7c\x39\x78\x6d\xa7\x77\x05\x5a\x23\x39\x20\xb9\x5e\x8a\x3b\xe4\x92\x34\x9b\xb4\x0f\x45\xe1\xa5\xc9\x91\xc5\x8b\x44\x2a\x24\xb5\x59\xa7\xed\x77\x2f\x48\xea\xbf\x25\xad\x6c\xec\xc6\xca\xc2\x79\x89\x45\xcd\x0c\x67\xc8\x99\x1f\x87\x1c\x6a\x65\x82\x82\x24\x7c\x05\xdf\xcd\x97\xf3\xe5\x84\x8b\x40\xae\x26\x00\x86\x9b\x08\x57\x10\x13\xd4\x46\x49\xb8\x44\x75\xcd\x29\xc2\xb3\x37\x3f\x4f\x00\x18\x6a\xaa\x78\x62\xb8\x14\x5d\x24\xd7\xa8\xb4\x7b\xbd\x9c\x2f\xe7\x8f\x27\x1a\x95\x6d\xb1\x92\x2f\x20\x55\xd1\x0a\x42\x63\x92\xd5\x62\x11\x49\x4a\xa2\x50\x6a\xb3\xfa\xf3\x72\xb9\x9c\x00\x34\xa4\xd3\x54\x29\x14\x06\x98\x8c\x09\x17\x75\x76\xbd\x5a\x2c\x48\xc2\xe7\xd6\x04\x1d\xf2\xc0\xcc\xa9\x8c\xf7\x45\xfc\x4a\xb8\x80\x6f\x12\x25\x59\x4a\x6d\xcb\x23\xf0\xda\xb4\x0b\xd3\x86\x6c\xf1\x36\x91\x97\x86\x6c\xb9\xd8\xe6\x82\x12\x62\x42\x67\x9b\x95\xb0\xc8\x06\x64\x71\xfd\x78\xa1\x50\xcb\x54\x51\x74\x2f\x01\xb6\x68\xfc\x0f\x00\x9d\xc6\x31\x51\xbb\x15\xbc\x45\x93\x2a\xa1\x81\x40\xc4\xb5\x01\x19\x40\xc1\x94\x93\x22\x4d\x15\x37\xbb\x9c\xd5\xaa\xfd\x1c\x89\x42\xb5\x82\x7f\xfd\x3b\x6b\x54\xa8\x13\x29\x74\xde\x93\xfd\x37\xfd\xe3\x72\x39\x2d\x1f\x1b\x26\x3c\x83\x5f\x2e\x5f\xbf\x02\xa2\x14\xd9\x55\x7b\x05\xb9\xf9\x0d\xa9\xd1\x15\x3e\x2a\x85\x41\x61\xaa\xa2\x00\x48\x92\x44\x9c\x12\x2b\x6c\xf1\x9b\x96\xa2\xfe\x16\x40\xd3\x10\x63\xd2\x6c\x05\xf8\xbd\xc2\x60\x05\xd3\xdf\x2d\xa8\x8c\x13\x29\x50\x18\xbd\xf0\xb4\x7a\xf1\x36\xd3\xe1\x25\xd7\x66\x5a\xda\xf1\xfd\xf2\x71\x8f\x1d\xa9\x09\xc1\xc8\x0f\x28\x80\x6b\xe0\xe2\x9a\x44\x9c\x9d\x42\xf9\x9f\x94\x92\xaa\xa6\xf5\x77\xdd\x5a\xbf\x17\x24\x35\xa1\x54\xfc\x33\x32\x30\x12\x12\x54\x81\x54\x31\xc8\x04\x95\x53\x6b\x0c\x16\xfc\xa9\xcf\x7f\xde\x0b\xbc\x49\x90\x1a\x64\x80\x96\x0f\x24\x75\xb1\x7a\xfa\xb1\x4f\x88\x22\x31\x9a\x0c\x6e\xc0\xc5\x4b\x1b\x73\x49\xb7\x48\xc8\x16\xa7\x43\x89\x35\xff\x7c\x00\x31\x12\x45\xc3\xc1\xe4\x52\x31\x54\xcf\x77\x83\xe9\x03\x8e\x11\xd3\x9e\x3c\xb1\x28\xda\x84\x97\x1f\x15\x12\x83\x40\x40\xe0\xa7\x22\xc6\x0f\x03\x96\x8f\x29\x6a\xf3\x5c\xb2\x0a\x5d\xcd\x13\xf2\xa8\x05\x46\x0c\x29\x48\x2c\x1f\x57\xc8\x56\x60\x54\x8a\x93\x1e\x97\xe8\x77\x88\x76\x77\x18\x82\x22\xd3\x5e\x68\xec\x81\x14\x3f\x66\x27\x71\xe4\xa6\xee\x0e\x47\x7a\xa2\xf0\x1f\x16\xed\x9c\x0a\x3e\x0a\xf5\x78\xc2\xf0\x0c\xdc\x27\xb4\xe0\x2f\xdd\x16\x14\xe1\x4a\x22\x85\x84\xed\x00\x6f\xb8\x3e\xcd\x7a\x7f\xd0\x82\xf3\x4c\x40\xda\xb5\xe6\x00\xb5\x21\x6b\x33\x32\x13\x62\x13\xe6\x4e\x63\x52\x67\x2a\xb8\xf8\x0f\x67\xff\xeb\xce\x07\xff\x86\x06\x88\x28\xd3\xb1\xcd\x0e\x8a\xb0\xb8\x9f\x4c\xb0\x70\x88\x40\xa6\x82\xd5\x3a\xfc\xa2\x43\xd7\x8a\x7d\x67\x00\x39\x8d\x05\xdf\x77\x5b\xf0\x4a\x96\xde\xf9\x89\x9b\x10\x74\x82\x94\x07\x1c\x19\x70\xf6\xb5\xa0\xc9\x58\xd3\xd7\x84\x18\x1a\xee\x81\xc2\xfb\x84\xb9\x2c\x4e\xdc\x53\x0a\xe7\xe5\xb3\x72\x5e\x47\x96\xca\xbd\xb1\xa3\xf2\xd6\x9b\xd1\x9f\xd6\x0d\xc1\xb9\x34\xb3\x56\xa7\x94\xa2\xd6\x41\x1a\x45\xbb\xd1\x00\xde\x39\xd9\xfb\xc2\x5a\x9f\xb1\x7a\x14\x46\x3c\xc0\x8c\x75\x6f\x8d\x71\xc0\x63\xb3\xd4\x51\x64\xa8\x56\xdb\x08\x0d\xee\xad\x36\x7f\x75\xcd\x40\x8e\x5c\x6c\xda\x60\xb9\xc7\x45\xcb\xe3\x03\xd7\x6d\x07\x2c\x9f\x91\xf1\xcb\x6b\x7d\x46\xc6\x11\x18\x71\x18\xc2\xb8\x18\x1a\x11\xc2\x34\xcf\x62\x6f\x3d\xd0\xe4\xac\x6d\xf3\x4c\xa5\xd0\x69\x5c\x48\x19\x56\x47\x29\x98\xee\x75\xf7\xdc\xac\xa3\xe4\xbd\x9e\xb2\x8e\xf2\x63\xa6\xc3\xb9\x8e\x32\x0a\x1c\xfa\x2a\x37\xa2\x6d\x75\x94\x03\x2b\x29\x07\xd6\x52\x0e\xae\xa6\x1c\x5e\x4f\xb9\xf3\x8a\x4a\x1e\xed\x77\xbb\x1d\xcf\xe3\x77\x2c\xdb\xf0\x5c\x9f\xaf\xb1\xa2\xd2\xd4\xfd\x9c\x4a\x9e\x21\xfc\x18\x0b\x7a\xf6\xa7\x45\xb8\x7e\x65\xfb\xd3\xe1\x15\x95\x06\xcc\x9d\xc6\xa4\xce\xa4\x70\x58\x45\xa5\x48\xcc\xee\xbf\xa2\x52\x38\xc4\x89\x2b\x2a\xad\xd8\x77\x06\x90\x31\xee\x45\x0b\xef\x7c\x38\x7b\xd1\x91\xac\x9b\xb7\x55\x54\xee\x27\x85\xcb\x2b\x2a\x74\xa4\xa9\xdc\x9d\x54\x54\x0a\x9c\x1b\x4b\x45\xe5\x9c\xec\x8d\x41\xeb\x33\x56\x8f\xc2\x88\x07\x98\xb1\x76\x57\x54\x46\x91\xa1\xde\x5e\x51\x39\x6e\xb1\x39\xb0\xa2\x52\x1e\x1f\x9c\x2b\x2a\x67\x64\xbc\x5b\x0b\x1e\x00\x32\x1e\x59\x51\x19\x09\xc2\x1c\x71\xbb\x9d\xb3\xe9\xa4\x7c\x63\xd9\x72\xdc\xb9\xb4\xf2\x73\x60\xc9\x80\x27\x93\x6a\x76\x09\xfa\x2f\x63\x26\x15\xbd\x71\x05\x1b\x47\x96\x35\xfa\x87\x17\x52\xc5\xc4\xac\xe0\x97\x7f\xbe\x9b\xe4\x06\x66\x42\x5f\xbb\x2a\xc8\x5b\x0c\x50\xa1\xa0\x58\x97\xee\x4b\x24\x59\x53\xa2\xac\xab\x1b\x5e\xc5\x39\xce\xaa\xe3\xe4\x99\xb4\x51\x5c\x6c\x8b\xe6\x0f\x5c\xdc\x4e\x14\xda\x01\xea\x23\x7a\xc9\xcb\x93\xde\x81\xba\x0d\xea\x38\x21\x5b\xdc\x27\xe2\xc2\xe0\xb6\xe2\x49\x9a\x7f\x1e\x40\x65\xa4\x21\xd1\x6d\x64\xc5\xce\xa2\xb2\xa2\x58\x4d\x2b\x8f\x56\xa7\xca\xa3\xed\xbc\xf2\xe8\x7a\xa9\x3c\x73\x83\xb1\x0f\x5b\xe7\x84\xb9\x5c\x12\x45\xaf\x83\x7e\x0f\xcc\x9d\xb7\xe1\x02\xe5\xb7\x0d\x2d\x03\xdd\x3e\xd4\x36\xd2\x18\xd6\x43\xa6\x75\xb8\xad\xfd\x64\x2f\xe6\x3a\x48\x0b\x64\x5d\xd7\xdd\xac\x85\xc1\x99\x5e\xf5\x91\x03\xcc\xaf\x16\xe1\x0e\xb2\xd9\x8d\x7c\x9b\x62\xae\xd6\x58\x6b\x6f\x21\x1d\x0c\x28\xf9\xfd\x8b\x13\xcd\xac\x20\xf1\xb0\x99\xcd\xf1\x77\x3d\x98\x23\xff\x06\xb1\x85\xb6\x19\x5b\xe0\xcf\x3b\x91\xad\x89\x19\x24\x1b\x20\xc8\x40\xcf\xee\x7c\x2f\x0c\x8f\xab\xa5\xf6\x6c\x3f\x7c\x37\xc2\x62\x22\x78\x80\xba\x55\x54\x63\x88\xf3\x04\x74\x2d\xfd\x72\x36\x84\xc3\xeb\xba\xd6\x46\x11\x83\xdb\xdd\x20\x1e\x6d\x88\x49\x5b\x7d\xb3\x42\x5a\xfd\x9a\xef\xa1\xc4\x4d\xfd\xca\x66\xdb\xf5\xd4\x03\x57\x91\x16\x1f\x6d\xf7\xd0\x36\x2f\x68\x1d\x94\x4e\x0f\x68\xa5\xee\x99\xfd\x3d\xfa\x7c\x5f\xd1\x3a\x99\x47\x62\x45\xe7\xdc\x76\xcd\x6e\x1b\x62\xf4\x04\x56\x44\x36\x18\xed\x4d\x71\x47\x8f\xce\x28\xc6\xb8\x1d\x39\x12\xbd\xe9\xe8\xbf\xb7\xbf\x2e\x18\xe9\x61\xe9\x8f\xfe\x6e\x30\x39\x42\x64\xf5\x62\xc8\x51\xb3\x58\xbf\x51\x72\xf0\xd4\xb5\xc6\x5b\x57\x70\x76\x90\x1f\x72\x02\xd8\x76\xda\x79\x60\x80\xee\x3b\x50\x87\xcd\xb7\x3b\x4e\x63\xba\x9a\x99\x7c\x99\x85\x38\x0f\x2f\x6b\x46\x5c\xac\x20\x21\x26\xcc\x1e\x6b\xfb\x95\x77\x21\xda\xdd\x95\xfb\x80\x9b\x4a\xc5\x9a\x69\x60\xf5\x80\xb9\xb9\xf3\xd8\x73\x9f\x6a\xb6\xea\x75\xa8\xe4\x8a\x56\x8b\x8f\x29\xaa\x5d\x9b\x1a\x6f\xc8\x16\x41\xa4\xf1\x06\x55\xa9\x8b\xbf\x89\xf5\x29\x44\x51\x6b\xc0\x1b\x8a\xc8\x74\x65\x7b\x68\x7b\xa9\xe6\xa1\xed\x8a\x36\x11\x91\x61\x40\xd2\xc8\xac\xe0\x71\x09\x92\x5c\xf0\x38\x8d\xcb\xa6\x72\x1c\x02\x12\x69\x2f\xbf\x9a\x6d\x7b\x2b\x2b\x5d\xf7\x5a\xf9\x2b\xb9\xb1\xe2\xf7\x0c\xd5\x76\xc3\xae\xdc\x05\xb4\x23\x2d\xc8\xfe\xf4\x41\xcd\x86\x65\x9f\x0d\xee\x22\x4c\xc3\x0a\xd7\xd6\x61\x47\x9b\x90\x86\x75\xff\xbd\x28\x74\xb8\xcc\xa6\x46\xbb\xea\xaf\x17\x0c\x54\x71\x83\x8a\x93\xb9\x73\x3a\xbd\x13\x86\xdc\xd8\x31\x30\x21\xd7\xa5\x33\x03\x2f\x37\xf9\x9a\xc7\x3c\x22\xca\x8e\x8e\x69\xb0\x20\xac\x3f\x85\xa8\x70\x0d\x34\x22\xa9\x46\xdb\x4a\x04\x5c\xfe\xfd\xa5\x4b\x2e\x30\x46\x61\x66\xe5\x2a\xa5\xf3\x4a\xb4\x35\x55\xe7\x22\xec\xf6\x1a\x88\x31\x8a\x6f\x52\x83\x1a\x16\x40\x65\x94\xc6\xa2\x4e\x45\x28\x95\xa9\x30\x73\x28\xc4\xbd\x90\x0a\xf0\x86\xc4\x49\x84\x33\xe0\x02\xdc\x2d\xa1\x6c\x0e\x15\xc7\x6b\xb4\xa0\x58\xe5\xd5\xfe\x40\x83\x40\xaa\x51\x59\xe1\xa5\x89\x86\x28\x77\x3c\xe0\x08\xae\xe2\xdd\xd5\x6a\x52\xbc\xbc\xba\xba\xd2\x1f\xa3\x8a\x15\x9e\x19\x22\xfe\x01\x61\x1a\xef\xfe\x30\xad\x92\x96\x7c\xef\xf6\x07\x1d\x28\x11\x40\x22\x2d\x61\x83\xfe\x88\x01\x19\x48\x1b\x58\x51\xed\xcb\x9d\xf9\x11\x46\xea\x74\x53\xb8\x81\xf6\x80\x87\xae\x6a\x7d\x15\x48\xf9\x74\x43\xd4\xd5\xac\xd3\xa6\x2a\xef\xda\x63\xe5\xfc\x03\xee\xe0\x29\x4c\x03\x29\xa7\x40\x04\x6b\xa5\xb9\x26\x51\x8a\x96\x6a\x43\x54\xc7\x28\xfc\xec\xa7\xaf\xea\x59\x62\x6a\x2c\x48\x5f\x73\x86\x6c\x06\x52\x01\xf7\x34\x5e\x1a\xd7\x80\x71\x62\x76\x33\xdb\x56\x9e\x97\xed\xcd\xa5\x09\x89\x71\x2d\x76\x42\x20\x24\x1a\x12\x54\x31\xd7\x36\x11\xb3\x03\xa4\x11\xe1\x13\x8f\x22\xd8\x94\xf3\xec\xa3\x1b\xd9\x7c\x28\x96\x66\x37\xcf\xea\x21\x9a\x35\xde\x43\x8c\xfa\xd9\xdd\xec\xee\x3c\x4a\x73\xc1\xc3\x02\x75\x93\x9a\x83\x83\xb5\x11\xa6\x07\x3a\x70\x31\xab\xee\xb5\xf7\xdb\x3c\xd0\x06\x84\x22\xd1\xb4\xdd\xfb\x5e\xab\xe3\xfa\x84\x35\x11\x6c\x0d\x01\x57\xda\xc0\x70\x25\x66\x9e\xe3\x55\xaf\x4e\x77\x15\x11\x42\x02\xde\x24\x11\xa7\xdc\x78\x13\x3c\x80\x39\x8f\xcf\xc1\x65\xb0\xa3\xfb\x0b\x93\x75\x3f\xf7\x6d\x77\xe3\xe6\xa9\xd3\x47\xbb\xe2\x49\x1c\x93\x0b\x8d\xd6\x7e\x8b\x79\xf9\x45\x6f\xdf\x9b\x9d\xa5\x0d\xee\x05\x2a\xc0\x0b\xff\x5a\x06\x16\x88\x2e\xb4\x51\x29\x35\xa9\xb2\x12\x85\x4b\x9c\x5c\xe6\xa9\xed\x6c\xc0\x93\xe2\xed\x0f\xf3\x27\x4e\xec\x0f\x20\xa4\x71\xa7\x44\xa5\xc0\x27\xda\xe4\x44\xdf\x42\x8c\x44\x68\xe7\x15\x8e\xde\x09\x84\x42\x4c\xc1\xf3\x93\x77\xe4\x95\xf7\x6a\x42\x43\xb8\xac\xa0\xa2\xd5\x7d\x8b\x06\x38\x9b\xb9\xb3\xca\x19\x24\x11\x11\xdf\x70\xe6\x74\xfc\xc0\x05\x7b\xe4\x7e\x79\xf0\x84\x6f\x8a\xee\xf4\xa3\x9a\x77\x15\xbf\x25\x8d\x9d\xc0\x3a\xb4\x5f\x5c\x94\xae\xe3\xd9\x9f\x72\x36\x73\x1d\xda\xfe\xe6\x9c\xf9\xff\x6d\x87\xb3\x0c\xa8\xbf\xad\x73\xa1\xa1\xe1\x4b\xf7\xe6\x69\xed\xea\x42\xd9\x79\xaf\xc3\xfc\x3f\x00\x00\xff\xff\xe3\xa8\xf9\x43\x6e\x4a\x00\x00")

func openapiYamlBytes() ([]byte, error) {
	return bindataRead(
		_openapiYaml,
		"openapi.yaml",
	)
}

func openapiYaml() (*asset, error) {
	bytes, err := openapiYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "openapi.yaml", size: 19054, mode: os.FileMode(493), modTime: time.Unix(1716477375, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"openapi.yaml": openapiYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"openapi.yaml": &bintree{openapiYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
