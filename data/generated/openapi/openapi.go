// Code generated for package openapi by go-bindata DO NOT EDIT. (@generated)
// sources:
// ../../openapi/openapi.yaml
package openapi

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _openapiYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x5f\x8f\xdb\xb8\x11\x7f\xf7\xa7\x18\xa0\x2d\x9c\x1c\xbc\xb6\xd3\xbb\x02\xad\x71\x39\x20\xb9\x5e\x8a\x3b\xe4\x92\x34\x9b\xb4\x0f\x45\xb1\x4b\x93\x23\x8b\xb7\x12\xa9\x90\xd4\xee\x3a\x6d\xbf\x7b\x41\x52\xff\x2d\x79\x25\x63\x37\x56\x16\xde\x97\xb5\xa8\x99\xe1\xcc\x70\xe6\xa7\xa1\x86\x92\x09\x0a\x92\xf0\x15\x7c\x3b\x5f\xce\x97\x13\x2e\x02\xb9\x9a\x00\x18\x6e\x22\x5c\x41\x4c\x50\x1b\x25\xe1\x1c\xd5\x35\xa7\x08\x2f\xde\xfd\x3c\x01\x60\xa8\xa9\xe2\x89\xe1\x52\x74\x91\x5c\xa3\xd2\xee\xf6\x72\xbe\x9c\x3f\x9b\x68\x54\x76\xc4\x4a\x3e\x83\x54\x45\x2b\x08\x8d\x49\x56\x8b\x45\x24\x29\x89\x42\xa9\xcd\xea\xcf\xcb\xe5\x72\x02\xd0\x90\x4e\x53\xa5\x50\x18\x60\x32\x26\x5c\xd4\xd9\xf5\x6a\xb1\x20\x09\x9f\x5b\x13\x74\xc8\x03\x33\xa7\x32\xde\x15\xf1\x2b\xe1\x02\x9e\x24\x4a\xb2\x94\xda\x91\xa7\xe0\xb5\x69\x17\xa6\x0d\xd9\xe0\x5d\x22\xcf\x0d\xd9\x70\xb1\xc9\x05\x25\xc4\x84\xce\x36\x2b\x61\x91\x39\x64\x71\xfd\x6c\xa1\x50\xcb\x54\x51\x74\x37\x01\x36\x68\xfc\x0f\x00\x9d\xc6\x31\x51\xdb\x15\xbc\x47\x93\x2a\xa1\x81\x40\xc4\xb5\x01\x19\x40\xc1\x94\x93\x22\x4d\x15\x37\xdb\x9c\xd5\xaa\xfd\x12\x89\x42\xb5\x82\x7f\xfd\x3b\x1b\x54\xa8\x13\x29\x74\x3e\x93\xfd\x9b\xfe\x71\xb9\x9c\x96\x97\x0d\x13\x5e\xc0\x2f\xe7\x6f\xdf\x00\x51\x8a\x6c\xab\xb3\x82\x5c\xff\x86\xd4\xe8\x0a\x1f\x95\xc2\xa0\x30\x55\x51\x00\x24\x49\x22\x4e\x89\x15\xb6\xf8\x4d\x4b\x51\xbf\x0b\xa0\x69\x88\x31\x69\x8e\x02\xfc\x5e\x61\xb0\x82\xe9\xef\x16\x54\xc6\x89\x14\x28\x8c\x5e\x78\x5a\xbd\x78\x9f\xe9\xf0\x9a\x6b\x33\x2d\xed\xf8\x6e\xf9\x6c\x8f\x1d\xa9\x09\xc1\xc8\x2b\x14\xc0\x35\x70\x71\x4d\x22\xce\x8e\xa1\xfc\x4f\x4a\x49\x55\xd3\xfa\xdb\x6e\xad\x3f\x0a\x92\x9a\x50\x2a\xfe\x19\x19\x18\x09\x09\xaa\x40\xaa\x18\x64\x82\xca\xa9\x35\x06\x0b\xfe\xb4\x2f\x7e\x3e\x0a\xbc\x4d\x90\x1a\x64\x80\x96\x0f\x24\x75\xb9\x7a\x7c\xdf\x27\x44\x91\x18\x4d\x06\x37\xe0\xf2\xa5\x8d\xb9\xa4\x5b\x24\x64\x83\xd3\xbe\xc4\x9a\x7f\x1e\x40\x8c\x44\xd1\xb0\x37\xb9\x54\x0c\xd5\xcb\x6d\x6f\xfa\x80\x63\xc4\xb4\x27\x4f\x2c\x8a\x36\xe1\xe5\x47\x85\xc4\x20\x10\x10\x78\x53\xe4\xf8\x30\x60\xf9\x94\xa2\x36\x2f\x25\xab\xd0\xd5\x22\x21\xcf\x5a\x60\xc4\x90\x82\xc4\xf2\x71\x85\x6c\x05\x46\xa5\x38\xd9\x13\x12\xfb\x03\xa2\x3d\x1c\xfa\xa0\xc8\x74\x2f\x34\xee\x81\x14\xef\xb3\xa3\x04\x72\x53\x77\x87\x23\x7b\xb2\xf0\x1f\x16\xed\x9c\x0a\x3e\x0b\xf5\x78\xd2\xf0\x04\xdc\x47\xb4\xe0\x2f\xdd\x16\x14\xe9\x4a\x22\x85\x84\x6d\x01\x6f\xb9\x3e\xce\xf3\x7e\xd0\x03\xe7\x85\x80\xb4\xeb\x99\x03\xd4\xa6\xac\xad\xc8\x4c\x88\x4d\x98\x3b\x8e\x49\x9d\xa5\xe0\xe2\x3f\x9c\xfd\xaf\xbb\x1e\xfc\x1b\x1a\x20\xa2\x2c\xc7\xd6\x5b\x28\xd2\xe2\x61\x2a\xc1\x22\x20\x02\x99\x0a\x56\x9b\xf0\x8b\xba\xae\x15\xfb\x4e\x00\x72\x1c\x0b\xbe\xeb\xb6\xe0\x8d\x2c\xa3\xf3\x86\x9b\x10\x74\x82\x94\x07\x1c\x19\x70\xf6\xb5\xa0\xc9\x58\xcb\xd7\x84\x18\x1a\xee\x80\xc2\xc7\x84\xb9\x2a\x4e\x3c\x50\x09\xe7\xe5\xb3\x72\x5d\x47\x56\xca\xbd\xb3\x5e\x79\xef\xcd\xd8\x5f\xd6\xf5\xc1\xb9\x34\xb3\x56\xa7\x94\xa2\xd6\x41\x1a\x45\xdb\xd1\x00\xde\xa9\xd8\xfb\xc2\x5a\x9f\xb0\x7a\x14\x46\x3c\xc2\x8a\x75\xe7\x19\xe3\x80\xc7\x56\xa9\xa3\xa8\x50\xad\xb6\x11\x1a\xdc\x79\xda\xfc\xd5\x0d\x03\x39\xf0\x61\xd3\x06\xcb\x7b\x42\xb4\x7c\x7d\xe0\xa6\xed\x80\xe5\x13\x32\x7e\x79\xad\x4f\xc8\x38\x02\x23\x86\x21\x8c\xcb\xa1\x11\x21\x4c\xf3\x5d\xec\x9d\x2f\x34\x39\x6b\xdb\x3c\x53\x29\x74\x1a\x17\x52\xfa\xf5\x51\x0a\xa6\x07\xdd\x3d\x37\xfb\x28\xf9\xac\xc7\xec\xa3\xfc\x98\xe9\x70\xea\xa3\x8c\x02\x87\xbe\xca\x8d\x68\x5b\x1f\x65\x60\x27\x65\x60\x2f\x65\x70\x37\x65\x78\x3f\xe5\xde\x3b\x2a\x79\xb6\xdf\xef\x76\x3c\xcf\xdf\xb1\x6c\xc3\x73\x7d\xbe\xc6\x8e\x4a\x53\xf7\x53\x29\x79\x82\xf0\x43\x2c\xd8\xb3\x3f\x2d\xd2\xf5\x2b\xdb\x9f\xf6\xef\xa8\x34\x60\xee\x38\x26\x75\x16\x85\xfd\x3a\x2a\x45\x61\xf6\xf0\x1d\x95\x22\x20\x8e\xdc\x51\x69\xc5\xbe\x13\x80\x8c\x71\x2f\x5a\x44\xe7\xe3\xd9\x8b\x8e\xe4\xb9\x79\x57\x47\xe5\x61\x4a\xb8\xbc\xa3\x42\x47\x5a\xca\xdd\x4b\x47\xa5\xc0\xb9\xb1\x74\x54\x4e\xc5\xde\x18\xb4\x3e\x61\xf5\x28\x8c\x78\x84\x15\x6b\x77\x47\x65\x14\x15\xea\xdd\x1d\x95\xc3\x1e\x36\x03\x3b\x2a\xe5\xeb\x83\x53\x47\xe5\x84\x8c\xf7\x6b\xc1\x23\x40\xc6\x03\x3b\x2a\x23\x41\x98\x03\x4e\xb7\x73\x36\x9d\x94\x77\x2c\x5b\x8e\x3b\xe7\x56\x7e\x0e\x2c\x19\xf0\x64\x52\xcd\x36\x41\xff\x65\xcc\xa4\xa2\x37\xae\x60\xed\xc8\xb2\x41\x7f\xf1\x4a\xaa\x98\x98\x15\xfc\xf2\xcf\x0f\x93\xdc\xc0\x4c\xe8\x5b\xd7\x05\x79\x8f\x01\x2a\x14\x14\xeb\xd2\x7d\x8b\x24\x1b\x4a\x94\x0d\x75\xc3\xab\x38\xc7\x59\xd5\x4f\x9e\x49\x1b\xc5\xc5\xa6\x18\xbe\xe2\xe2\x6e\xa2\xd0\x3a\x68\x1f\xd1\x6b\x5e\xbe\xe9\xed\xa9\x5b\xaf\x89\x13\xb2\xc1\x5d\x22\x2e\x0c\x6e\x2a\x91\xa4\xf9\xe7\x1e\x54\x46\x1a\x12\xdd\x45\x56\xec\x2c\x2a\x4f\x14\xab\x69\xe5\xd2\xea\x54\xb9\xb4\x93\x57\x2e\xdd\x2c\x95\x6b\x6e\x30\xf6\x69\xeb\x82\x30\x97\x4b\xa2\xe8\x6d\xb0\x3f\x02\xf3\xe0\x6d\x84\x40\xf9\x6d\x43\x8b\xa3\xdb\x5d\x6d\x33\x8d\x61\x3d\x65\x5a\xdd\x6d\xed\x27\x3b\x39\xd7\x41\x5a\x20\xeb\x45\x3d\xcc\x5a\x18\x9c\xe9\xd5\x18\x19\x60\x7e\xb5\x09\x37\xc8\x66\xe7\xf9\x36\xc5\x5c\xaf\xb1\x36\xde\x42\xda\x1b\x50\xf2\xf3\x17\x47\x5b\x59\x0f\xab\x77\x2f\x82\xff\xcb\x3f\x2c\x6c\xa1\x6d\x26\x0c\x80\x5c\xbb\x2f\xf4\xd8\xc5\x20\x2e\xea\xbb\x15\x17\xc4\xf4\xd2\x08\x20\xc8\xf0\xcf\x6e\x82\xcf\x0c\x8f\xab\x5d\xf7\x6c\x6b\x7c\x3f\xc2\x62\x22\x78\x80\xba\x55\x54\xc3\xdb\x00\xda\x10\x93\xb6\x06\x50\x85\xb4\xfa\xc9\xdd\x63\x09\xee\xfa\xb9\xca\xb6\x33\xa4\x03\xa1\xbe\x25\x7a\xda\x63\xa7\x6d\x7d\x76\xe6\xc8\xcb\xf3\x56\x77\x1f\x98\x72\x9d\xde\xef\xf2\x3f\x80\x20\x31\x36\xbd\xda\x19\x94\x5d\x29\xb1\x87\x65\x7f\x24\x77\x27\xc6\x01\x22\xab\xe7\x1d\x0e\xf2\x6a\xfd\xa0\xc4\x60\x57\xb6\x46\x68\x57\x38\x77\x90\x0f\x79\xb1\xd5\xf6\x12\x6f\x60\x48\x37\x57\xbf\xe1\xf3\x66\x95\x59\x82\xb3\x63\x2c\xfb\x19\x5c\xac\x20\x21\x26\xcc\x2e\x6b\xb5\xf4\x87\x10\x6d\xe5\xef\x3e\x2e\xa6\x52\xb1\x66\x89\x52\x7d\xf9\xd9\xac\x8a\x77\x62\xa0\x5a\x49\x79\x1d\x2a\x75\x8c\xd5\xe2\x53\x8a\x6a\xdb\xa6\xc6\x3b\xb2\x41\x10\x69\xbc\x46\x55\xea\xe2\x4f\x09\xdd\x84\x28\x6a\x03\x78\x4b\x11\x99\xae\x6c\x5d\xec\x2c\xd5\x1a\xa9\x5d\xd1\x26\x10\x30\x0c\x48\x1a\x99\x15\x3c\x2b\xb1\x81\x0b\x1e\xa7\x71\x39\x54\xfa\x21\x20\x91\xf6\xf2\xab\x95\xa0\xb7\xb2\x32\xf5\x5e\x2b\x7f\x25\xb7\x56\xfc\x8e\xa1\xda\x6e\x26\x95\x3b\x1c\x75\xa0\x05\xd9\x67\xf9\x35\x1b\x96\xfb\x6c\x70\x87\x34\x1a\x56\xb8\xb1\x0e\x3b\xda\x84\x34\xac\xfb\xef\x59\xa1\xc3\x79\xb6\x34\xda\x75\x26\xbd\x60\xa0\x8a\x1b\x54\x9c\xcc\x5d\xd0\xe9\xad\x30\xe4\xd6\xfa\xc0\x84\x5c\x97\xc1\x0c\x5c\x57\x6a\xee\x98\x47\x44\x59\xef\x98\x06\x0b\xc2\xc5\x4d\x88\x0a\x2f\x80\x46\x24\xd5\x68\x47\x89\x80\xf3\xbf\xbf\x76\xcf\x54\x8c\x51\x98\x59\x21\x28\xd5\x79\x97\xd4\x9a\xaa\x73\x11\x76\xeb\x07\xc4\x18\xc5\xd7\xa9\x41\x0d\x0b\xa0\x32\x4a\x63\x51\xa7\x22\x94\xca\x54\x98\x39\x14\xe2\x5e\x49\x05\x78\x4b\xe2\x24\xc2\x19\x70\x01\xee\x04\x4b\xb6\x86\x8a\xe3\x35\x5a\x64\xab\xf2\x6a\xbf\xd9\x26\x90\x6a\x54\x56\x78\x69\xa2\x21\xca\x6d\x5d\x1d\xc1\x65\xbc\xbd\x5c\x4d\x8a\x9b\x97\x97\x97\xfa\x53\x54\xb1\xc2\x33\x43\xc4\xaf\x10\xa6\xf1\xf6\x0f\xd3\x2a\x69\xc9\xf7\x61\xd7\xe9\x40\x89\x00\x12\x69\x09\x6b\xf4\xdb\x5f\x64\x20\x6d\x62\x45\xb5\xaf\x4a\xe6\x07\x18\xa9\xd3\x75\x11\x06\x1a\x22\xb2\xc6\x08\x5d\x47\xf5\x32\x90\xf2\xf9\x9a\xa8\xcb\x59\xa7\x4d\x55\xde\x0b\xc7\xaa\xe7\x57\xb8\x85\xe7\x30\x0d\xa4\x9c\x02\x11\xac\x95\xe6\x9a\x44\x29\x5a\xaa\x35\x51\x1d\x5e\xf8\xd9\x2f\x5f\x35\xb2\xc4\xd4\x58\xa4\xbd\xe6\x0c\xd9\x0c\xa4\x02\xee\x69\xbc\x34\xae\x01\xe3\xc4\x6c\x67\x76\xac\x7c\x97\xb3\xb3\x96\x26\x24\xc6\x8d\xd8\x05\x81\x90\x68\x48\x50\xc5\x5c\xdb\xfa\xc3\x3a\x48\x23\xc2\x0d\x8f\x22\x58\x97\xeb\xec\xb3\x1b\xd9\xbc\x2f\x96\x66\xa7\xa2\xea\x29\x9a\x0d\x3e\x40\x8e\xfa\xd5\x5d\x6f\xef\x3d\x4b\x73\xc1\xfd\x12\x75\x9d\x9a\xc1\xc9\xda\x48\xd3\x81\x01\x5c\xac\xaa\xbb\xed\xe3\x36\x4f\xb4\x1e\xa9\x48\x34\x6d\x8f\xbe\xb7\xea\xb0\x39\xe1\x82\x08\x76\x01\x01\x57\xda\x40\x7f\x25\x66\x9e\xe3\xcd\x5e\x9d\xee\x2b\x23\x84\x04\xbc\x4d\x22\x4e\xb9\xf1\x26\x78\x00\x73\x11\x9f\x83\x4b\xef\x40\xf7\x87\xf9\xea\x71\xee\xc7\xee\x27\xcc\x53\xa7\x8f\x76\x2f\xf6\xe3\x98\x9c\x69\xb4\xf6\x5b\xcc\xcb\x0f\x21\xfb\xd9\xec\x2a\xad\x71\x27\x51\x01\x5e\xf9\xdb\x32\xb0\x40\x74\xa6\x8d\x4a\xa9\x49\x95\x95\x28\x5c\xe1\xe4\xca\x47\x6d\x57\x03\xbe\x2f\xee\xfe\x30\xff\xde\x89\xfd\x01\x84\x34\xee\x0d\x46\x29\xb0\x4a\xf5\x0d\xc4\x48\x84\x76\x61\xe1\x18\x9c\x44\x28\x28\x0a\xa6\x9f\x7c\x24\xaf\x7c\x58\x13\x1a\xc2\x79\x05\x16\xad\xf2\x1b\x34\xc0\xd9\xcc\xbd\x48\x9b\x41\x12\x11\xf1\x84\x33\xa7\xe4\x15\x17\xec\xa9\xfb\xe5\xd1\x13\x9e\x14\xd3\xe9\xa7\xb5\xf0\x2a\x7e\x4b\x1a\x3b\x81\x75\x6c\x3f\x3b\x2b\x63\xc7\xb3\x3f\xe7\x6c\xe6\x26\xb4\xf3\xcd\x39\xf3\xff\xed\x84\xb3\x0c\xa9\xbf\xa9\x73\xa1\xa1\xe1\x6b\x77\xe7\x79\xad\xaf\x5e\x4e\xbe\x37\x62\xfe\x1f\x00\x00\xff\xff\xee\xc5\x9e\xa8\x0b\x49\x00\x00")

func openapiYamlBytes() ([]byte, error) {
	return bindataRead(
		_openapiYaml,
		"openapi.yaml",
	)
}

func openapiYaml() (*asset, error) {
	bytes, err := openapiYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "openapi.yaml", size: 18699, mode: os.FileMode(493), modTime: time.Unix(1704252374, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"openapi.yaml": openapiYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"openapi.yaml": &bintree{openapiYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
