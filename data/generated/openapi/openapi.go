// Code generated for package openapi by go-bindata DO NOT EDIT. (@generated)
// sources:
// ../../openapi/openapi.yaml
package openapi

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _openapiYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x5f\x8f\xdb\xb8\x11\x7f\xdf\x4f\x31\x40\x5b\x38\x39\xec\xda\x4e\xef\x0a\xb4\x46\x72\x40\x72\xbd\x14\x77\xc8\x25\x69\x36\x69\x1f\x8a\xc2\x4b\x93\x23\x8b\x89\x44\x2a\x24\xb5\x59\xa7\xed\x77\x2f\x48\xea\xbf\x25\xad\xec\xf3\xc6\xca\x9e\xf3\x92\x35\x35\x33\x9c\x21\x67\x7e\x1a\x0e\xc7\x96\x09\x0a\x92\xf0\x05\x7c\x3b\x9d\x4f\xe7\x67\x5c\x04\x72\x71\x06\x60\xb8\x89\x70\x01\x31\x41\x6d\x94\x84\x4b\x54\xd7\x9c\x22\x3c\x7d\xfd\xd3\x19\x00\x43\x4d\x15\x4f\x0c\x97\xa2\x8b\xe4\x1a\x95\x76\x8f\xe7\xd3\xf9\xf4\xd1\x99\x46\x65\x47\xac\xe4\x0b\x48\x55\xb4\x80\xd0\x98\x64\x31\x9b\x45\x92\x92\x28\x94\xda\x2c\xfe\x3c\x9f\xcf\xcf\x00\x1a\xd2\x69\xaa\x14\x0a\x03\x4c\xc6\x84\x8b\x3a\xbb\x5e\xcc\x66\x24\xe1\x53\x6b\x82\x0e\x79\x60\xa6\x54\xc6\xdb\x22\x7e\x21\x5c\xc0\x83\x44\x49\x96\x52\x3b\xf2\x10\xbc\x36\xed\xc2\xb4\x21\x6b\xbc\x4d\xe4\xa5\x21\x6b\x2e\xd6\xb9\xa0\x84\x98\xd0\xd9\x66\x25\xcc\xb2\x05\x99\x5d\x3f\x9a\x29\xd4\x32\x55\x14\xdd\x43\x80\x35\x1a\xff\x07\x80\x4e\xe3\x98\xa8\xcd\x02\xde\xa0\x49\x95\xd0\x40\x20\xe2\xda\x80\x0c\xa0\x60\xca\x49\x91\xa6\x8a\x9b\x4d\xce\x6a\xd5\x7e\x86\x44\xa1\x5a\xc0\xbf\xfe\x9d\x0d\x2a\xd4\x89\x14\x3a\x9f\xc9\xfe\x9b\xfc\x71\x3e\x9f\x94\x1f\x1b\x26\x3c\x85\x9f\x2f\x5f\xbd\x04\xa2\x14\xd9\x54\x67\x05\xb9\x7a\x8f\xd4\xe8\x0a\x1f\x95\xc2\xa0\x30\x55\x51\x00\x24\x49\x22\x4e\x89\x15\x36\x7b\xaf\xa5\xa8\x3f\x05\xd0\x34\xc4\x98\x34\x47\x01\x7e\xaf\x30\x58\xc0\xe4\x77\x33\x2a\xe3\x44\x0a\x14\x46\xcf\x3c\xad\x9e\xbd\xc9\x74\x78\xc1\xb5\x99\x94\x76\x7c\x37\x7f\xd4\x63\x47\x6a\x42\x30\xf2\x03\x0a\xe0\x1a\xb8\xb8\x26\x11\x67\xc7\x50\xfe\x47\xa5\xa4\xaa\x69\xfd\x6d\xb7\xd6\xef\x04\x49\x4d\x28\x15\xff\x8c\x0c\x8c\x84\x04\x55\x20\x55\x0c\x32\x41\xe5\xd4\x1a\x83\x05\x7f\xea\xf3\x9f\x77\x02\x6f\x12\xa4\x06\x19\xa0\xe5\x03\x49\x5d\xac\x1e\x7f\xed\x13\xa2\x48\x8c\x26\x83\x1b\x70\xf1\xd2\xc6\x5c\xd2\xcd\x12\xb2\xc6\xc9\x50\x62\xcd\x3f\xef\x40\x8c\x44\xd1\x70\x30\xb9\x54\x0c\xd5\xb3\xcd\x60\xfa\x80\x63\xc4\xb4\x27\x4f\x2c\x8a\x36\xe1\xe5\x07\x85\xc4\x20\x10\x10\xf8\xa9\x88\xf1\xdd\x80\xe5\x63\x8a\xda\x3c\x93\xac\x42\x57\xf3\x84\x3c\x6a\x81\x11\x43\x0a\x12\xcb\xc7\x15\xb2\x05\x18\x95\xe2\x59\x8f\x4b\xf4\x3b\x44\xbb\x3b\x0c\x41\x91\x49\x2f\x34\xf6\x40\x8a\x5f\xb3\xa3\x38\x72\x53\x77\x87\x23\x3d\x51\xf8\x0f\x8b\x76\x4e\x05\x1f\x85\x7a\x3c\x61\x78\x02\xee\x23\x5a\xf0\x97\x6e\x0b\x8a\x70\x25\x91\x42\xc2\x36\x80\x37\x5c\x1f\xe7\x7d\xbf\xd3\x0b\xe7\xa9\x80\xb4\xeb\x9d\x03\xd4\x86\xac\xcd\xc8\x4c\x88\x4d\x98\x3b\x8e\x49\x9d\xa9\xe0\xec\x3f\x9c\xfd\xaf\x3b\x1f\xfc\x1b\x1a\x20\xa2\x4c\xc7\x56\x1b\x28\xc2\xe2\x6e\x32\xc1\xc2\x21\x02\x99\x0a\x56\x9b\xf0\x8b\x2e\x5d\x2b\xf6\x9d\x00\xe4\x38\x16\x7c\xd7\x6d\xc1\x4b\x59\x7a\xe7\x27\x6e\x42\xd0\x09\x52\x1e\x70\x64\xc0\xd9\xd7\x82\x26\x63\x4d\x5f\x13\x62\x68\xb8\x05\x0a\xef\x12\xe6\xb2\x38\x71\x47\x29\x9c\x97\xcf\xca\x7d\x1d\x59\x2a\xf7\xda\xae\xca\x1b\x6f\x46\x7f\x5a\x37\x04\xe7\xd2\xcc\x5a\x9d\x52\x8a\x5a\x07\x69\x14\x6d\x46\x03\x78\xa7\x64\xef\x0b\x6b\x7d\xc2\xea\x51\x18\x71\x0f\x33\xd6\xad\x77\x8c\x03\x1e\x9b\xa5\x8e\x22\x43\xb5\xda\x46\x68\x70\xeb\x6d\xf3\x57\x37\x0c\x64\xcf\x97\x4d\x1b\x2c\xf7\xb8\x68\x59\x3e\x70\xd3\x76\xc0\xf2\x09\x19\xbf\xbc\xd6\x27\x64\x1c\x81\x11\xbb\x21\x8c\x8b\xa1\x11\x21\x4c\xb3\x16\x7b\x6b\x41\x93\xb3\xbe\xc3\xf3\xc5\x2a\x15\x2c\xda\xef\x3a\x05\x32\xde\x3b\x3d\x4b\x77\xde\xaa\xf8\xc9\xc7\x70\xb9\xf2\xcc\x69\x72\xba\x62\x19\x05\x44\x7d\x95\x67\xd4\xdf\xea\x15\xcb\x6d\xa8\xb4\x6b\x65\xcf\x43\xc2\x17\x2c\xf0\x65\x33\x8e\xa4\xce\xe7\x81\xe8\x04\x42\x23\xb0\x60\x60\x9e\x94\xf9\xcf\xfd\x49\x97\xbe\x66\x40\x6d\xcf\x94\xa8\x14\x3a\x8d\x0b\x39\xc3\x52\xa4\x82\xe9\x8b\xe6\x46\xf9\xac\xc7\x4c\x8a\x7e\xc8\x74\x38\xa5\x43\xa3\x40\xa2\x7b\x13\xbd\x3b\x26\x44\x3b\xa6\x44\x3b\x27\x45\xbb\xa7\x45\x07\xef\x3d\xc9\xa3\x7d\x37\x88\xb9\xed\xe2\x22\x8f\xdf\xb1\x5c\x58\xe4\xfa\x7c\x8d\xbd\x27\x4d\xdd\x4f\x45\xb7\x13\x84\xef\x63\x41\x4f\x25\xbf\x08\xd7\xaf\xac\x92\x3f\xbc\xf7\xa4\x01\x73\xc7\x31\xa9\x33\x29\x1c\x76\x42\x2d\x12\xb3\xbb\x3f\x9a\x16\x0e\x71\xe4\x33\x69\x2b\xf6\x9d\x00\x64\x8c\xa7\xd1\xc2\x3b\x4f\xc7\xd0\x83\x17\xeb\xfb\x7b\x4f\xee\x26\x85\xcb\x7b\x4f\xe8\x48\x53\xb9\x83\xf4\x9e\x14\x38\x37\x96\xde\x93\x53\xb2\x37\x06\xad\x4f\x58\x3d\x0a\x23\xee\x61\xc6\xda\xdd\x7b\x32\x8a\x0c\xf5\xf6\xde\x93\xfd\x5e\x36\x3b\xf6\x9e\x94\xe5\x83\x53\xef\xc9\x09\x19\x0f\x6b\xc1\x3d\x40\xc6\x3d\x7b\x4f\x46\x82\x30\x7b\xde\xa9\x94\x4f\x2c\x5b\x8e\x3b\x97\x56\x7e\x0e\x2c\x19\xf0\x64\x52\xcd\x26\x41\xff\x1d\xe2\xb3\x8a\xde\xb8\x80\x95\x23\xcb\x06\xfd\x87\xe7\x52\xc5\xc4\x2c\xe0\xe7\x7f\xbe\x3d\xcb\x0d\xcc\x84\xbe\x72\xb7\x20\x6f\x30\x40\x85\x82\x62\x5d\xba\xbf\x22\xc9\x86\x12\x65\x5d\xdd\xf0\x2a\xce\x71\x56\x5d\x27\xcf\xa4\x8d\xe2\x62\x5d\x0c\x7f\xe0\xe2\x76\xa2\xd0\x2e\x50\x1f\xd1\x0b\x5e\x56\x7a\x07\xea\x36\x68\xe2\x84\xac\x71\x9b\x88\x0b\x83\xeb\x8a\x27\x69\xfe\x79\x00\x95\x91\x86\x44\xb7\x91\x15\x27\x8b\xca\x1b\xc5\x6a\x5a\xf9\x68\x75\xaa\x7c\xb4\x93\x57\x3e\xba\x59\x2a\x9f\xb9\xc1\xd8\x87\xad\x73\xc2\x5c\x2e\x89\xa2\x57\x41\xbf\x07\xe6\xce\xdb\x70\x81\xb2\x45\xa1\x65\xa1\xdb\x97\xda\x46\x1a\xc3\x7a\xc8\xb4\x2e\xb7\xb5\x9f\x6c\xc5\x5c\x07\x69\x81\xac\xcb\xba\x9b\xb5\x30\x38\xd3\xab\x3e\xb2\x83\xf9\xd5\x4b\xb8\x9d\x6c\x76\x2b\xdf\xa6\x98\xbb\x6b\xac\x8d\xb7\x90\x0e\x06\x94\xbc\x71\xe1\x48\x3b\x2b\x48\x3c\x6c\x67\x73\xfc\x5d\x0e\xe6\xc8\x7f\xad\xa1\x85\xb6\x19\x5b\xe0\xeb\x9d\xc8\x96\xc4\x0c\x92\x0d\x10\x64\xa0\x67\x4f\xbe\x17\x86\xc7\xd5\xa6\xc4\xec\x3c\x7c\x18\x61\x59\x16\x77\x18\x61\x31\x11\x3c\x40\xdd\x2a\xaa\xb1\x5f\xf9\xcc\x4b\xe9\xdf\x8d\x43\x38\xbc\xe1\x4b\x6d\x14\x31\xb8\xde\x0c\xe2\xd1\x86\x98\xb4\xd5\xd1\x2b\xa4\xd5\x1f\x51\xb8\x2f\x41\x58\xff\xa6\x4c\xdb\xb7\x82\x76\x7c\x25\xb5\x38\x7c\xbb\xbb\xb7\x79\x41\xeb\xa2\x74\x7a\x40\x2b\x75\xcf\xee\x77\x6e\x68\xd9\xb8\x79\xdf\xb6\xb5\xda\x09\x56\x1f\x3b\x41\xed\x6f\x09\x6a\x7f\x8d\x9f\x1d\x0c\x98\x73\x65\x96\x54\x8a\x80\xaf\xef\x40\xa7\x41\x30\x9e\x97\x26\x5a\x23\x60\xcf\x18\xe8\x8c\x82\xae\x38\x68\x8b\x84\x9e\x3d\x8e\xc8\x0a\xa3\xa1\xab\xe0\x8c\x62\x8c\xdb\x8d\x21\xd1\xeb\x8e\xf9\x7b\xe7\xeb\x0a\x8f\x1e\x96\x7e\x47\xec\x0e\x92\x5f\x21\xb2\x2b\x54\xf6\x10\x59\x6d\x57\xdb\xcb\x31\xea\x7d\x6e\x3b\x7b\x43\x8f\x97\x6f\x87\x44\x07\xf9\x2e\xf7\x12\x6d\x77\x30\x3b\xbe\xe9\xb7\x7d\xb2\xc3\xe6\xdb\x7d\xb1\xb1\x5d\xcd\xfa\x42\x79\x36\x72\x41\x53\xde\x64\x73\xb1\x80\x84\x98\x30\xfb\x58\xab\xa2\xbc\x0d\x11\x38\xf3\x5f\x15\xa1\x52\xe5\x2c\xad\xd7\x5e\xcd\x7a\xc8\x96\xfb\x54\xcf\xd0\x5e\x87\xca\x09\xd6\x6a\xf1\x31\x45\xb5\x69\x53\xe3\x35\x59\x23\x88\x34\x5e\xa1\x2a\x75\xf1\xfd\xa1\x9f\x42\x14\xb5\x01\xbc\xa1\x88\x4c\x57\x8a\x56\x76\x96\xea\xe9\xb8\x5d\xd1\xe6\xeb\x8d\x61\x40\xd2\xc8\x2c\xe0\x51\x99\x6d\x71\xc1\xe3\x34\x2e\x87\xca\x75\x08\x48\xa4\xbd\xfc\x6a\x0d\xc0\x5b\x59\x99\xba\xd7\xca\x5f\xc8\x8d\x15\xbf\x65\xa8\x06\x23\x41\xb9\xb6\xd8\x3d\x2d\xc8\x7e\xba\xae\x66\xc3\xbc\xcf\x06\xd7\x9e\xd7\xb0\xc2\x8d\x75\xd8\xd1\x26\xa4\x61\xdd\x7f\x2f\x0a\x1d\x2e\xb3\xad\xd1\xae\x27\xc5\x0b\x06\xaa\xb8\x41\xc5\xc9\xd4\x39\x9d\xde\x08\x43\x6e\xec\x1a\x98\x90\xeb\xd2\x99\x81\x97\xa5\x47\xcd\x63\x1e\x11\x65\x57\xc7\x34\x58\x10\x96\x9f\x42\x54\xb8\x04\x1a\x91\x54\xa3\x1d\x25\x02\x2e\xff\xfe\xc2\xbd\xde\x30\x46\x61\xce\xcb\x74\x57\xe7\xfd\x31\xd6\x54\x9d\x8b\x78\xaf\xa5\x00\x62\x8c\xe2\xab\xd4\xa0\x86\x19\x50\x19\xa5\xb1\xa8\x53\x11\x4a\x65\x2a\xcc\x14\x0a\x71\xcf\xa5\x02\xbc\x21\x71\x12\xe1\x39\x70\x01\xae\x77\x31\xdb\x43\xc5\xf1\x1a\x2d\x28\x56\x79\xb5\x2f\xb3\x12\x48\x35\x2a\x2b\xbc\x34\xd1\x10\xe5\x8a\x96\x8e\xe0\x2a\xde\x5c\x2d\xce\x8a\x87\x57\x57\x57\xfa\x63\x54\xb1\xc2\x33\x43\xc4\x3f\x20\x4c\xe2\xcd\x1f\x26\x55\xd2\x92\xef\xed\xf6\xa2\x03\x25\x02\x48\xa4\x25\xac\xd0\x17\x3e\x91\x81\xb4\x81\x15\xd5\x7e\x79\x61\xba\x87\x91\x3a\x5d\x15\x6e\xa0\x3d\xe0\xa1\xeb\xa5\xb9\x0a\xa4\x7c\xb2\x22\xea\xea\xbc\xd3\xa6\x2a\xef\xd2\x63\xe5\xf4\x03\x6e\xe0\x09\x4c\x02\x29\x27\x40\x04\x6b\xa5\xb9\x26\x51\x8a\x96\x6a\x45\x54\xc7\x2a\xfc\xe4\xb7\xaf\xea\x59\x62\x62\x2c\x48\x5f\x73\x86\xec\x1c\xa4\x02\xee\x69\xbc\x34\xae\x01\xe3\xc4\x6c\xce\xed\x58\x59\xc5\xdf\xda\x4b\x13\x12\xe3\x46\xec\x86\x40\x48\x34\x24\xa8\x62\xae\x6d\x5e\x6d\x17\x48\x23\xc2\x27\x1e\x45\xb0\x2a\xf7\xd9\x47\x37\xb2\xe9\x50\x2c\xcd\xfa\x61\xeb\x21\x9a\x0d\xde\x41\x8c\xfa\xdd\x5d\x6d\x0e\x1e\xa5\xb9\xe0\x61\x81\xba\x4a\xcd\xce\xc1\xda\x08\xd3\x1d\x1d\xb8\xd8\x55\xf7\xd8\xfb\x6d\x1e\x68\x03\x42\x91\x68\xda\xee\x7d\xaf\xd4\x7e\x73\xc2\x92\x08\xb6\x84\x80\x2b\x6d\x60\xb8\x12\xe7\x9e\xe3\x65\xaf\x4e\x87\x8a\x08\x21\x01\x6f\x92\x88\x53\x6e\xbc\x09\x1e\xc0\x9c\xc7\xe7\xe0\x32\xd8\xd1\x7d\x1b\x77\xdd\xcf\xfd\xd8\x61\xdc\x3c\x75\xfa\x68\x77\xa5\x1b\xc7\xe4\x42\xa3\xb5\xdf\x62\x5e\xfe\xf5\x13\x3f\x9b\xdd\xa5\x15\x6e\x05\x2a\xc0\x73\xff\x58\x06\x16\x88\x2e\xb4\x51\x29\x35\xa9\xb2\x12\x85\x4b\x9c\x5c\xe6\xa9\xed\x6e\xc0\xe3\xe2\xe9\xf7\xd3\xc7\x4e\xec\xf7\x20\xa4\x71\xb5\xeb\x52\xe0\x63\x6d\x72\xa2\x6f\x20\x46\x22\xb4\xf3\x0a\x47\xef\x04\x42\x21\xa6\xe0\xf9\xd1\x3b\xf2\xc2\x7b\x35\xa1\x21\x5c\x56\x50\xd1\xea\xbe\x46\x03\x9c\x9d\xbb\x1b\x94\x73\x48\x22\x22\x1e\x70\xe6\x74\xfc\xc0\x05\x7b\xe8\xfe\xf2\xe0\x09\x0f\x8a\xe9\xf4\xc3\x9a\x77\x15\x7f\x4b\x1a\x3b\x81\x75\x68\xbf\xb8\x28\x5d\xc7\xb3\x3f\xe1\xec\xdc\x4d\x68\xe7\x9b\x72\xe6\xff\xb7\x13\x9e\x67\x40\xfd\x4d\x9d\x0b\x0d\x0d\x5f\xb8\x27\x4f\x6a\x0d\x55\xe5\xe4\xbd\x0e\xf3\xff\x00\x00\x00\xff\xff\xb7\x2a\x5d\xec\x2e\x58\x00\x00")

func openapiYamlBytes() ([]byte, error) {
	return bindataRead(
		_openapiYaml,
		"openapi.yaml",
	)
}

func openapiYaml() (*asset, error) {
	bytes, err := openapiYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "openapi.yaml", size: 22574, mode: os.FileMode(493), modTime: time.Unix(1718102698, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"openapi.yaml": openapiYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"openapi.yaml": &bintree{openapiYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
