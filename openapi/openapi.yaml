openapi: 3.0.0
info:
  title: maestro Service API
  description: maestro Service API
  version: 0.0.1
servers:
  - url: http://localhost:8000
    description: current domain
  - url: https://api.openshift.com
    description: Main (production) server
  - url: https://api.stage.openshift.com
    description: Staging server
paths:
  /api/maestro/v1/resources:
    get:
      summary: Returns a list of resources
      security:
        - Bearer: []
      responses:
        '200':
          description: A JSON array of resource objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceList'
        '401':
          description: Auth token is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Unauthorized to perform operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Unexpected error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      parameters:
      - $ref: '#/components/parameters/page'
      - $ref: '#/components/parameters/size'
      - $ref: '#/components/parameters/search'
      - $ref: '#/components/parameters/orderBy'
      - $ref: '#/components/parameters/fields'
    post:
      summary: Create a new resource
      security:
        - Bearer: []
      requestBody:
        description: Resource data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Resource'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'
        '400':
          description: Validation errors occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Auth token is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Unauthorized to perform operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Resource already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: An unexpected error occurred creating the resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/maestro/v1/resources/{id}:
    get:
      summary: Get an resource by id
      security:
        - Bearer: []
      responses:
        '200':
          description: Resource found by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'
        '401':
          description: Auth token is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Unauthorized to perform operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: No resource with specified id exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Unexpected error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Update an resource
      security:
        - Bearer: []
      requestBody:
        description: Updated resource data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResourcePatchRequest'
      responses:
        '200':
          description: Resource updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'
        '400':
          description: Validation errors occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Auth token is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Unauthorized to perform operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: No resource with specified id exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Resource already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Unexpected error updating resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a resource
      security:
        - Bearer: []
      responses:
        '204':
          description: Resource deleted successfully
        '400':
          description: Validation errors occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Auth token is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Unauthorized to perform operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: No resource with specified id exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Unexpected error deleting resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    parameters:
    - $ref: '#/components/parameters/id'
  /api/maestro/v1/resource-bundles:
    get:
      summary: Returns a list of resource bundles
      security:
        - Bearer: []
      responses:
        '200':
          description: A JSON array of resource bundle objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceBundleList'
        '401':
          description: Auth token is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Unauthorized to perform operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Unexpected error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      parameters:
      - $ref: '#/components/parameters/page'
      - $ref: '#/components/parameters/size'
      - $ref: '#/components/parameters/search'
      - $ref: '#/components/parameters/orderBy'
      - $ref: '#/components/parameters/fields'
  /api/maestro/v1/resource-bundles/{id}:
    get:
      summary: Get an resource bundle by id
      security:
        - Bearer: []
      responses:
        '200':
          description: Resource bundle found by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceBundle'
        '401':
          description: Auth token is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Unauthorized to perform operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: No resource bundle with specified id exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Unexpected error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      parameters:
      - $ref: '#/components/parameters/id'
  /api/maestro/v1/consumers:
    get:
      summary: Returns a list of consumers
      security:
        - Bearer: []
      responses:
        '200':
          description: A JSON array of consumer objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConsumerList'
        '401':
          description: Auth token is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Unauthorized to perform operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Unexpected error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/size'
        - $ref: '#/components/parameters/search'
        - $ref: '#/components/parameters/orderBy'
        - $ref: '#/components/parameters/fields'
    post:
      summary: Create a new consumer
      security:
        - Bearer: []
      requestBody:
        description: Consumer data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Consumer'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Consumer'
        '400':
          description: Validation errors occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Auth token is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Unauthorized to perform operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Consumer already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: An unexpected error occurred creating the consumer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/maestro/v1/consumers/{id}:
    get:
      summary: Get an consumer by id
      security:
        - Bearer: []
      responses:
        '200':
          description: Consumer found by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Consumer'
        '401':
          description: Auth token is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Unauthorized to perform operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: No consumer with specified id exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Unexpected error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Update an consumer
      security:
        - Bearer: []
      requestBody:
        description: Updated consumer data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConsumerPatchRequest'
      responses:
        '200':
          description: Consumer updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Consumer'
        '400':
          description: Validation errors occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Auth token is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Unauthorized to perform operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: No consumer with specified id exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Consumer already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Unexpected error updating consumer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a consumer
      security:
        - Bearer: []
      responses:
        '204':
          description: Consumer deleted successfully
        '400':
          description: Validation errors occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Auth token is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Unauthorized to perform operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: No consumer with specified id exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Unexpected error deleting consumer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    parameters:
      - $ref: '#/components/parameters/id'
components:
  securitySchemes:
    Bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    ObjectReference:
      type: object
      properties:
        id:
          type: string
        kind:
          type: string
        href:
          type: string
    List:
      type: object
      properties:
        kind:
          type: string
        page:
          type: integer
        size:
          type: integer
        total:
          type: integer
      required:
        - kind
        - page
        - size
        - total
        - items
    Error:
      allOf:
      - $ref: '#/components/schemas/ObjectReference'
      - type: object
        properties:
          code:
            type: string
          reason:
            type: string
          operation_id:
            type: string
    ErrorList:
      allOf:
      - $ref: '#/components/schemas/List'
      - type: object
        properties:
          items:
            type: array
            items:
              $ref: '#/components/schemas/Error'
    Resource:
      allOf:
      - $ref: '#/components/schemas/ObjectReference'
      - type: object
        properties:
          name:
            type: string
          consumer_name:
            type: string
          version:
            type: integer
          created_at:
            type: string
            format: date-time
          updated_at:
            type: string
            format: date-time
          manifest:
            type: object
          delete_option:
            type: object
          update_strategy:
            type: object
          status:
            type: object
    ResourceList:
      allOf:
      - $ref: '#/components/schemas/List'
      - type: object
        properties:
          items:
            type: array
            items:
              $ref: '#/components/schemas/Resource'
    ResourcePatchRequest:
      type: object
      properties:
        version:
          type: integer
        manifest:
          type: object
        delete_option:
          type: object
        update_strategy:
          type: object
    ResourceBundleList:
      allOf:
      - $ref: '#/components/schemas/List'
      - type: object
        properties:
          items:
            type: array
            items:
              $ref: '#/components/schemas/ResourceBundle'
    ResourceBundle:
      allOf:
      - $ref: '#/components/schemas/ObjectReference'
      - type: object
        properties:
          name:
            type: string
          consumer_name:
            type: string
          version:
            type: integer
          created_at:
            type: string
            format: date-time
          updated_at:
            type: string
            format: date-time
          manifests:
            type: array
            items:
              type: object
          delete_option:
            type: object
          manifest_configs:
            type: array
            items:
              type: object
          status:
            type: object
    Consumer:
      allOf:
        - $ref: '#/components/schemas/ObjectReference'
        - type: object
          properties:
            name:
              type: string
            labels:
              type: object
              additionalProperties:
                type: string
            created_at:
              type: string
              format: date-time
            updated_at:
              type: string
              format: date-time
    ConsumerList:
      allOf:
        - $ref: '#/components/schemas/List'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/Consumer'
    ConsumerPatchRequest:
      type: object
      properties:
        labels:
          type: object
          additionalProperties:
            type: string
  parameters:
    id:
      name: id
      in: path
      description: The id of record
      required: true
      schema:
        type: string
    page:
      name: page
      in: query
      description: Page number of record list when record list exceeds specified page size
      schema:
        type: integer
        default: 1
        minimum: 1
      required: false
    size:
      name: size
      in: query
      description: Maximum number of records to return
      schema:
        type: integer
        default: 100
        minimum: 0
      required: false
    search:
      name: search
      in: query
      required: false
      description: |-
        Specifies the search criteria. The syntax of this parameter is
        similar to the syntax of the _where_ clause of an SQL statement,
        using the names of the json attributes / column names of the account. 
        For example, in order to retrieve all the accounts with a username
        starting with `my`:

        ```sql
        username like 'my%'
        ```

        The search criteria can also be applied on related resource.
        For example, in order to retrieve all the subscriptions labeled by `foo=bar`,

        ```sql
        subscription_labels.key = 'foo' and subscription_labels.value = 'bar'
        ```

        If the parameter isn't provided, or if the value is empty, then
        all the accounts that the user has permission to see will be
        returned.
      schema:
        type: string
    orderBy:
      name: orderBy
      in: query
      required: false
      description: |-
        Specifies the order by criteria. The syntax of this parameter is
        similar to the syntax of the _order by_ clause of an SQL statement,
        but using the names of the json attributes / column of the account.
        For example, in order to retrieve all accounts ordered by username:

        ```sql
        username asc
        ```

        Or in order to retrieve all accounts ordered by username _and_ first name:

        ```sql
        username asc, firstName asc
        ```

        If the parameter isn't provided, or if the value is empty, then
        no explicit ordering will be applied.
      schema:
        type: string
    fields:
      name: fields
      in: query
      required: false
      description: |-
        Supplies a comma-separated list of fields to be returned.
        Fields of sub-structures and of arrays use <structure>.<field> notation.
        <stucture>.* means all field of a structure
        Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)

        ```
        ocm get subscriptions --parameter fields=id,href,plan.id,plan.kind,labels.* --parameter fetchLabels=true
        ```
      schema:
        type: string
